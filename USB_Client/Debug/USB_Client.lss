
USB_Client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ccc  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000f8  20000000  00003ccc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  000100f8  2**0
                  CONTENTS
  3 .bss          00000a14  200000f8  00003dc4  000100f8  2**2
                  ALLOC
  4 .stack        00002004  20000b0c  000047d8  000100f8  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000100f8  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010120  2**0
                  CONTENTS, READONLY
  7 .debug_info   00021d97  00000000  00000000  0001017b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003a44  00000000  00000000  00031f12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000009e0  00000000  00000000  00035956  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001dee8  00000000  00000000  00036336  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001170a  00000000  00000000  0005421e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00097aa7  00000000  00000000  00065928  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000074dd  00000000  00000000  000fd3cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000009b8  00000000  00000000  001048ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000018c4  00000000  00000000  00105264  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
       0:	20002b10 	.word	0x20002b10
       4:	000036bd 	.word	0x000036bd
	/* Initialize time structure. */
	struct rtc_calendar_time time;
	struct rtc_calendar_alarm_time alarm;

	/* Get current time. */
	rtc_calendar_get_time(module, &time);
       8:	000036b9 	.word	0x000036b9
       c:	000036b9 	.word	0x000036b9
	...
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
		if (time.hour == 0) {
      2c:	000036b9 	.word	0x000036b9
	...
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
			alarm.time.hour = alarm.time.hour % 12;
			if (alarm.time.hour == 0) {
				alarm.time.hour = 12;
      38:	000036b9 	.word	0x000036b9
			}
			module->clock_24h = false;
      3c:	000036b9 	.word	0x000036b9
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      40:	000036b9 	.word	0x000036b9
      44:	000036b9 	.word	0x000036b9
			module->clock_24h = true;
		}

		/* Change value in configuration structure. */
		module->clock_24h = false;
      48:	00001061 	.word	0x00001061
      4c:	00002d31 	.word	0x00002d31
	} else {
		/* Set hour value based on pm flag. */
		if (time.pm == 1) {
      50:	000036b9 	.word	0x000036b9
      54:	000036b9 	.word	0x000036b9
			time.hour = time.hour + 12;
      58:	000025a9 	.word	0x000025a9
      5c:	00000f61 	.word	0x00000f61

			time.pm = 0;
      60:	000036b9 	.word	0x000036b9
		} else if (time.hour == 12) {
      64:	000036b9 	.word	0x000036b9
      68:	000036b9 	.word	0x000036b9
			time.hour = 0;
      6c:	000036b9 	.word	0x000036b9
      70:	000036b9 	.word	0x000036b9

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
			if (alarm.time.pm == 1) {
				alarm.time.hour = alarm.time.hour + 12;
      74:	000036b9 	.word	0x000036b9
      78:	000036b9 	.word	0x000036b9
				alarm.time.pm = 0;
      7c:	000036b9 	.word	0x000036b9
				module->clock_24h = true;
      80:	000036b9 	.word	0x000036b9
				rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      84:	00001161 	.word	0x00001161
      88:	00001171 	.word	0x00001171
	...
				module->clock_24h = false;
			} else if (alarm.time.hour == 12) {
      94:	00001181 	.word	0x00001181
				alarm.time.hour = 0;
      98:	000036b9 	.word	0x000036b9
			}
		}

		/* Change value in configuration structure. */
		module->clock_24h = true;
      9c:	000036b9 	.word	0x000036b9
	}

	/* Disable RTC so new configuration can be set. */
	rtc_calendar_disable(module);
      a0:	000036b9 	.word	0x000036b9
      a4:	000036b9 	.word	0x000036b9

	/* Toggle mode. */
	rtc_module->MODE2.CTRLA.reg ^= RTC_MODE2_CTRLA_CLKREP;
      a8:	000036b9 	.word	0x000036b9
      ac:	000036b9 	.word	0x000036b9

	/* Enable RTC. */
	rtc_calendar_enable(module);
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:

	/* Set new time format in CLOCK register. */
	rtc_calendar_set_time(module, &time);
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
	if (module->clock_24h) {
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
      ce:	bd10      	pop	{r4, pc}
      d0:	200000f8 	.word	0x200000f8
      d4:	00000000 	.word	0x00000000
      d8:	00003ccc 	.word	0x00003ccc

000000dc <frame_dummy>:
			alarm.time.hour = alarm.time.hour % 12;
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
			if (alarm.time.hour == 0) {
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
			time.hour = 0;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
			if (alarm.time.pm == 1) {
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
			alarm.time.hour = alarm.time.hour % 12;
			if (alarm.time.hour == 0) {
				alarm.time.hour = 12;
			}
			module->clock_24h = false;
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
     104:	00003ccc 	.word	0x00003ccc
     108:	200000fc 	.word	0x200000fc
	/* Enable RTC. */
	rtc_calendar_enable(module);

	/* Set new time format in CLOCK register. */
	rtc_calendar_set_time(module, &time);
}
     10c:	00003ccc 	.word	0x00003ccc
     110:	00000000 	.word	0x00000000

00000114 <udi_cdc_comm_disable>:
     114:	4a02      	ldr	r2, [pc, #8]	; (120 <udi_cdc_comm_disable+0xc>)
     116:	7813      	ldrb	r3, [r2, #0]
     118:	3b01      	subs	r3, #1
     11a:	b2db      	uxtb	r3, r3
     11c:	7013      	strb	r3, [r2, #0]
     11e:	4770      	bx	lr
     120:	200003a8 	.word	0x200003a8

00000124 <udi_cdc_data_setup>:
     124:	2000      	movs	r0, #0
     126:	4770      	bx	lr

00000128 <udi_cdc_getsetting>:
     128:	2000      	movs	r0, #0
     12a:	4770      	bx	lr

0000012c <udi_cdc_line_coding_received>:
{
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}
     12c:	4770      	bx	lr
     12e:	46c0      	nop			; (mov r8, r8)

00000130 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
     130:	b508      	push	{r3, lr}
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
     132:	2200      	movs	r2, #0
     134:	4b10      	ldr	r3, [pc, #64]	; (178 <udi_cdc_comm_enable+0x48>)
     136:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
     138:	2100      	movs	r1, #0
     13a:	4b10      	ldr	r3, [pc, #64]	; (17c <udi_cdc_comm_enable+0x4c>)
     13c:	801a      	strh	r2, [r3, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
     13e:	4b10      	ldr	r3, [pc, #64]	; (180 <udi_cdc_comm_enable+0x50>)
     140:	20a1      	movs	r0, #161	; 0xa1
     142:	7018      	strb	r0, [r3, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
     144:	3881      	subs	r0, #129	; 0x81
     146:	7058      	strb	r0, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
     148:	805a      	strh	r2, [r3, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
     14a:	809a      	strh	r2, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
     14c:	381e      	subs	r0, #30
     14e:	80d8      	strh	r0, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
     150:	811a      	strh	r2, [r3, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
     152:	4b0c      	ldr	r3, [pc, #48]	; (184 <udi_cdc_comm_enable+0x54>)
     154:	22e1      	movs	r2, #225	; 0xe1
     156:	0252      	lsls	r2, r2, #9
     158:	601a      	str	r2, [r3, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
     15a:	7119      	strb	r1, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
     15c:	7159      	strb	r1, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
     15e:	2208      	movs	r2, #8
     160:	719a      	strb	r2, [r3, #6]
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
     162:	2000      	movs	r0, #0
     164:	4b08      	ldr	r3, [pc, #32]	; (188 <udi_cdc_comm_enable+0x58>)
     166:	4798      	blx	r3
     168:	2800      	cmp	r0, #0
     16a:	d004      	beq.n	176 <udi_cdc_comm_enable+0x46>
		return false;
	}
	udi_cdc_nb_comm_enabled++;
     16c:	4a02      	ldr	r2, [pc, #8]	; (178 <udi_cdc_comm_enable+0x48>)
     16e:	7813      	ldrb	r3, [r2, #0]
     170:	3301      	adds	r3, #1
     172:	b2db      	uxtb	r3, r3
     174:	7013      	strb	r3, [r2, #0]
	return true;
}
     176:	bd08      	pop	{r3, pc}
     178:	200003a8 	.word	0x200003a8
     17c:	20000658 	.word	0x20000658
     180:	200003c4 	.word	0x200003c4
     184:	20000114 	.word	0x20000114
     188:	00003829 	.word	0x00003829

0000018c <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
     18c:	b530      	push	{r4, r5, lr}
     18e:	b083      	sub	sp, #12

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
     190:	4b45      	ldr	r3, [pc, #276]	; (2a8 <udi_cdc_tx_send+0x11c>)
     192:	781b      	ldrb	r3, [r3, #0]
     194:	2b00      	cmp	r3, #0
     196:	d000      	beq.n	19a <udi_cdc_tx_send+0xe>
     198:	e084      	b.n	2a4 <udi_cdc_tx_send+0x118>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
     19a:	4b44      	ldr	r3, [pc, #272]	; (2ac <udi_cdc_tx_send+0x120>)
     19c:	4798      	blx	r3
     19e:	2800      	cmp	r0, #0
     1a0:	d006      	beq.n	1b0 <udi_cdc_tx_send+0x24>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
     1a2:	4b43      	ldr	r3, [pc, #268]	; (2b0 <udi_cdc_tx_send+0x124>)
     1a4:	881c      	ldrh	r4, [r3, #0]
     1a6:	4b43      	ldr	r3, [pc, #268]	; (2b4 <udi_cdc_tx_send+0x128>)
     1a8:	4798      	blx	r3
     1aa:	4284      	cmp	r4, r0
     1ac:	d106      	bne.n	1bc <udi_cdc_tx_send+0x30>
     1ae:	e079      	b.n	2a4 <udi_cdc_tx_send+0x118>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
     1b0:	4b3f      	ldr	r3, [pc, #252]	; (2b0 <udi_cdc_tx_send+0x124>)
     1b2:	881c      	ldrh	r4, [r3, #0]
     1b4:	4b40      	ldr	r3, [pc, #256]	; (2b8 <udi_cdc_tx_send+0x12c>)
     1b6:	4798      	blx	r3
     1b8:	4284      	cmp	r4, r0
     1ba:	d073      	beq.n	2a4 <udi_cdc_tx_send+0x118>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     1bc:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
     1c0:	425d      	negs	r5, r3
     1c2:	415d      	adcs	r5, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     1c4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1c6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     1ca:	2200      	movs	r2, #0
     1cc:	4b3b      	ldr	r3, [pc, #236]	; (2bc <udi_cdc_tx_send+0x130>)
     1ce:	701a      	strb	r2, [r3, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
     1d0:	4b3b      	ldr	r3, [pc, #236]	; (2c0 <udi_cdc_tx_send+0x134>)
     1d2:	781c      	ldrb	r4, [r3, #0]
     1d4:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
     1d6:	0062      	lsls	r2, r4, #1
     1d8:	4b3a      	ldr	r3, [pc, #232]	; (2c4 <udi_cdc_tx_send+0x138>)
     1da:	5ad3      	ldrh	r3, [r2, r3]
     1dc:	2b00      	cmp	r3, #0
     1de:	d11d      	bne.n	21c <udi_cdc_tx_send+0x90>
		sof_zlp_counter++;
     1e0:	4a39      	ldr	r2, [pc, #228]	; (2c8 <udi_cdc_tx_send+0x13c>)
     1e2:	8813      	ldrh	r3, [r2, #0]
     1e4:	3301      	adds	r3, #1
     1e6:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
     1e8:	4b30      	ldr	r3, [pc, #192]	; (2ac <udi_cdc_tx_send+0x120>)
     1ea:	4798      	blx	r3
     1ec:	2800      	cmp	r0, #0
     1ee:	d103      	bne.n	1f8 <udi_cdc_tx_send+0x6c>
     1f0:	4b35      	ldr	r3, [pc, #212]	; (2c8 <udi_cdc_tx_send+0x13c>)
     1f2:	881b      	ldrh	r3, [r3, #0]
     1f4:	2b63      	cmp	r3, #99	; 0x63
     1f6:	d908      	bls.n	20a <udi_cdc_tx_send+0x7e>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
     1f8:	4b2c      	ldr	r3, [pc, #176]	; (2ac <udi_cdc_tx_send+0x120>)
     1fa:	4798      	blx	r3
     1fc:	2800      	cmp	r0, #0
     1fe:	d00d      	beq.n	21c <udi_cdc_tx_send+0x90>
     200:	4b31      	ldr	r3, [pc, #196]	; (2c8 <udi_cdc_tx_send+0x13c>)
     202:	881a      	ldrh	r2, [r3, #0]
     204:	4b31      	ldr	r3, [pc, #196]	; (2cc <udi_cdc_tx_send+0x140>)
     206:	429a      	cmp	r2, r3
     208:	d808      	bhi.n	21c <udi_cdc_tx_send+0x90>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     20a:	2d00      	cmp	r5, #0
     20c:	d04a      	beq.n	2a4 <udi_cdc_tx_send+0x118>
		cpu_irq_enable();
     20e:	2201      	movs	r2, #1
     210:	4b2a      	ldr	r3, [pc, #168]	; (2bc <udi_cdc_tx_send+0x130>)
     212:	701a      	strb	r2, [r3, #0]
     214:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     218:	b662      	cpsie	i
     21a:	e043      	b.n	2a4 <udi_cdc_tx_send+0x118>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
     21c:	2200      	movs	r2, #0
     21e:	4b2a      	ldr	r3, [pc, #168]	; (2c8 <udi_cdc_tx_send+0x13c>)
     220:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
     222:	4b2b      	ldr	r3, [pc, #172]	; (2d0 <udi_cdc_tx_send+0x144>)
     224:	781b      	ldrb	r3, [r3, #0]
     226:	2b00      	cmp	r3, #0
     228:	d105      	bne.n	236 <udi_cdc_tx_send+0xaa>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     22a:	4263      	negs	r3, r4
     22c:	4163      	adcs	r3, r4
     22e:	b2db      	uxtb	r3, r3
     230:	4a23      	ldr	r2, [pc, #140]	; (2c0 <udi_cdc_tx_send+0x134>)
     232:	7013      	strb	r3, [r2, #0]
     234:	e002      	b.n	23c <udi_cdc_tx_send+0xb0>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
     236:	4263      	negs	r3, r4
     238:	415c      	adcs	r4, r3
     23a:	b2e4      	uxtb	r4, r4
	}
	udi_cdc_tx_trans_ongoing[port] = true;
     23c:	2201      	movs	r2, #1
     23e:	4b1a      	ldr	r3, [pc, #104]	; (2a8 <udi_cdc_tx_send+0x11c>)
     240:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     242:	2d00      	cmp	r5, #0
     244:	d004      	beq.n	250 <udi_cdc_tx_send+0xc4>
		cpu_irq_enable();
     246:	4b1d      	ldr	r3, [pc, #116]	; (2bc <udi_cdc_tx_send+0x130>)
     248:	701a      	strb	r2, [r3, #0]
     24a:	f3bf 8f5f 	dmb	sy
     24e:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
     250:	1c25      	adds	r5, r4, #0
     252:	0064      	lsls	r4, r4, #1
     254:	4b1b      	ldr	r3, [pc, #108]	; (2c4 <udi_cdc_tx_send+0x138>)
     256:	5ae1      	ldrh	r1, [r4, r3]
     258:	3941      	subs	r1, #65	; 0x41
     25a:	39ff      	subs	r1, #255	; 0xff
     25c:	1e4b      	subs	r3, r1, #1
     25e:	4199      	sbcs	r1, r3
     260:	b2cc      	uxtb	r4, r1
	if (b_short_packet) {
     262:	2c00      	cmp	r4, #0
     264:	d00d      	beq.n	282 <udi_cdc_tx_send+0xf6>
		if (udd_is_high_speed()) {
     266:	4b11      	ldr	r3, [pc, #68]	; (2ac <udi_cdc_tx_send+0x120>)
     268:	4798      	blx	r3
     26a:	2800      	cmp	r0, #0
     26c:	d004      	beq.n	278 <udi_cdc_tx_send+0xec>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
     26e:	4b11      	ldr	r3, [pc, #68]	; (2b4 <udi_cdc_tx_send+0x128>)
     270:	4798      	blx	r3
     272:	4b0f      	ldr	r3, [pc, #60]	; (2b0 <udi_cdc_tx_send+0x124>)
     274:	8018      	strh	r0, [r3, #0]
     276:	e007      	b.n	288 <udi_cdc_tx_send+0xfc>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
     278:	4b0f      	ldr	r3, [pc, #60]	; (2b8 <udi_cdc_tx_send+0x12c>)
     27a:	4798      	blx	r3
     27c:	4b0c      	ldr	r3, [pc, #48]	; (2b0 <udi_cdc_tx_send+0x124>)
     27e:	8018      	strh	r0, [r3, #0]
     280:	e002      	b.n	288 <udi_cdc_tx_send+0xfc>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
     282:	2200      	movs	r2, #0
     284:	4b0a      	ldr	r3, [pc, #40]	; (2b0 <udi_cdc_tx_send+0x124>)
     286:	801a      	strh	r2, [r3, #0]
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
     288:	00aa      	lsls	r2, r5, #2
     28a:	1952      	adds	r2, r2, r5
     28c:	0192      	lsls	r2, r2, #6
     28e:	4b11      	ldr	r3, [pc, #68]	; (2d4 <udi_cdc_tx_send+0x148>)
     290:	189a      	adds	r2, r3, r2
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
     292:	006b      	lsls	r3, r5, #1
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
     294:	490b      	ldr	r1, [pc, #44]	; (2c4 <udi_cdc_tx_send+0x138>)
     296:	5a5b      	ldrh	r3, [r3, r1]
     298:	490f      	ldr	r1, [pc, #60]	; (2d8 <udi_cdc_tx_send+0x14c>)
     29a:	9100      	str	r1, [sp, #0]
     29c:	2081      	movs	r0, #129	; 0x81
     29e:	1c21      	adds	r1, r4, #0
     2a0:	4c0e      	ldr	r4, [pc, #56]	; (2dc <udi_cdc_tx_send+0x150>)
     2a2:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
     2a4:	b003      	add	sp, #12
     2a6:	bd30      	pop	{r4, r5, pc}
     2a8:	200003c0 	.word	0x200003c0
     2ac:	0000184d 	.word	0x0000184d
     2b0:	200003b4 	.word	0x200003b4
     2b4:	00001861 	.word	0x00001861
     2b8:	00001851 	.word	0x00001851
     2bc:	200000f7 	.word	0x200000f7
     2c0:	2000011c 	.word	0x2000011c
     2c4:	20000120 	.word	0x20000120
     2c8:	200003b8 	.word	0x200003b8
     2cc:	0000031f 	.word	0x0000031f
     2d0:	20000654 	.word	0x20000654
     2d4:	20000124 	.word	0x20000124
     2d8:	000002e1 	.word	0x000002e1
     2dc:	00001b59 	.word	0x00001b59

000002e0 <udi_cdc_data_sent>:
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
     2e0:	b508      	push	{r3, lr}
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
     2e2:	2800      	cmp	r0, #0
     2e4:	d10d      	bne.n	302 <udi_cdc_data_sent+0x22>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
     2e6:	4b07      	ldr	r3, [pc, #28]	; (304 <udi_cdc_data_sent+0x24>)
     2e8:	781b      	ldrb	r3, [r3, #0]
     2ea:	425a      	negs	r2, r3
     2ec:	4153      	adcs	r3, r2
     2ee:	005b      	lsls	r3, r3, #1
     2f0:	2200      	movs	r2, #0
     2f2:	4905      	ldr	r1, [pc, #20]	; (308 <udi_cdc_data_sent+0x28>)
     2f4:	5258      	strh	r0, [r3, r1]
	udi_cdc_tx_both_buf_to_send[port] = false;
     2f6:	4b05      	ldr	r3, [pc, #20]	; (30c <udi_cdc_data_sent+0x2c>)
     2f8:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
     2fa:	4b05      	ldr	r3, [pc, #20]	; (310 <udi_cdc_data_sent+0x30>)
     2fc:	701a      	strb	r2, [r3, #0]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
     2fe:	4b05      	ldr	r3, [pc, #20]	; (314 <udi_cdc_data_sent+0x34>)
     300:	4798      	blx	r3
}
     302:	bd08      	pop	{r3, pc}
     304:	2000011c 	.word	0x2000011c
     308:	20000120 	.word	0x20000120
     30c:	20000654 	.word	0x20000654
     310:	200003c0 	.word	0x200003c0
     314:	0000018d 	.word	0x0000018d

00000318 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
     318:	b508      	push	{r3, lr}
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
     31a:	2000      	movs	r0, #0
     31c:	4b01      	ldr	r3, [pc, #4]	; (324 <udi_cdc_data_sof_notify+0xc>)
     31e:	4798      	blx	r3
	port_notify++;
	if (port_notify >= UDI_CDC_PORT_NB) {
		port_notify = 0;
	}
#endif
}
     320:	bd08      	pop	{r3, pc}
     322:	46c0      	nop			; (mov r8, r8)
     324:	0000018d 	.word	0x0000018d

00000328 <udi_cdc_ctrl_state_notify>:
	udi_cdc_ctrl_state_notify(port, ep_comm);
}


static void udi_cdc_ctrl_state_notify(uint8_t port, udd_ep_id_t ep)
{
     328:	b510      	push	{r4, lr}
     32a:	b082      	sub	sp, #8
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	// Send it if possible and state changed
	if ((!udi_cdc_serial_state_msg_ongoing[port])
     32c:	4b0c      	ldr	r3, [pc, #48]	; (360 <udi_cdc_ctrl_state_notify+0x38>)
     32e:	781b      	ldrb	r3, [r3, #0]
     330:	2b00      	cmp	r3, #0
     332:	d113      	bne.n	35c <udi_cdc_ctrl_state_notify+0x34>
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
     334:	4b0b      	ldr	r3, [pc, #44]	; (364 <udi_cdc_ctrl_state_notify+0x3c>)
     336:	881b      	ldrh	r3, [r3, #0]
     338:	b29b      	uxth	r3, r3
     33a:	4a0b      	ldr	r2, [pc, #44]	; (368 <udi_cdc_ctrl_state_notify+0x40>)
     33c:	8912      	ldrh	r2, [r2, #8]
     33e:	429a      	cmp	r2, r3
     340:	d00c      	beq.n	35c <udi_cdc_ctrl_state_notify+0x34>
     342:	1c08      	adds	r0, r1, #0
		// Fill notification message
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
     344:	4b07      	ldr	r3, [pc, #28]	; (364 <udi_cdc_ctrl_state_notify+0x3c>)
     346:	881b      	ldrh	r3, [r3, #0]
     348:	4a07      	ldr	r2, [pc, #28]	; (368 <udi_cdc_ctrl_state_notify+0x40>)
     34a:	8113      	strh	r3, [r2, #8]
		// Send notification message
		udi_cdc_serial_state_msg_ongoing[port] =
				udd_ep_run(ep,
     34c:	4b07      	ldr	r3, [pc, #28]	; (36c <udi_cdc_ctrl_state_notify+0x44>)
     34e:	9300      	str	r3, [sp, #0]
     350:	2100      	movs	r1, #0
     352:	230a      	movs	r3, #10
     354:	4c06      	ldr	r4, [pc, #24]	; (370 <udi_cdc_ctrl_state_notify+0x48>)
     356:	47a0      	blx	r4
	if ((!udi_cdc_serial_state_msg_ongoing[port])
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
		// Fill notification message
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
		// Send notification message
		udi_cdc_serial_state_msg_ongoing[port] =
     358:	4b01      	ldr	r3, [pc, #4]	; (360 <udi_cdc_ctrl_state_notify+0x38>)
     35a:	7018      	strb	r0, [r3, #0]
				false,
				(uint8_t *) & uid_cdc_state_msg[port],
				sizeof(uid_cdc_state_msg[0]),
				udi_cdc_serial_state_msg_sent);
	}
}
     35c:	b002      	add	sp, #8
     35e:	bd10      	pop	{r4, pc}
     360:	200003ac 	.word	0x200003ac
     364:	20000658 	.word	0x20000658
     368:	200003c4 	.word	0x200003c4
     36c:	000003c5 	.word	0x000003c5
     370:	00001b59 	.word	0x00001b59

00000374 <udi_cdc_ctrl_state_change>:

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}

static void udi_cdc_ctrl_state_change(uint8_t port, bool b_set, le16_t bit_mask)
{
     374:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     376:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     37a:	b672      	cpsid	i
     37c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     380:	2400      	movs	r4, #0
     382:	480d      	ldr	r0, [pc, #52]	; (3b8 <udi_cdc_ctrl_state_change+0x44>)
     384:	7004      	strb	r4, [r0, #0]
	port = 0;
#endif

	// Update state
	flags = cpu_irq_save(); // Protect udi_cdc_state
	if (b_set) {
     386:	2900      	cmp	r1, #0
     388:	d004      	beq.n	394 <udi_cdc_ctrl_state_change+0x20>
		udi_cdc_state[port] |= bit_mask;
     38a:	490c      	ldr	r1, [pc, #48]	; (3bc <udi_cdc_ctrl_state_change+0x48>)
     38c:	8808      	ldrh	r0, [r1, #0]
     38e:	4302      	orrs	r2, r0
     390:	800a      	strh	r2, [r1, #0]
     392:	e003      	b.n	39c <udi_cdc_ctrl_state_change+0x28>
	} else {
		udi_cdc_state[port] &= ~(unsigned)bit_mask;
     394:	4809      	ldr	r0, [pc, #36]	; (3bc <udi_cdc_ctrl_state_change+0x48>)
     396:	8801      	ldrh	r1, [r0, #0]
     398:	4391      	bics	r1, r2
     39a:	8001      	strh	r1, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     39c:	2b00      	cmp	r3, #0
     39e:	d105      	bne.n	3ac <udi_cdc_ctrl_state_change+0x38>
		cpu_irq_enable();
     3a0:	2201      	movs	r2, #1
     3a2:	4b05      	ldr	r3, [pc, #20]	; (3b8 <udi_cdc_ctrl_state_change+0x44>)
     3a4:	701a      	strb	r2, [r3, #0]
     3a6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     3aa:	b662      	cpsie	i
#undef UDI_CDC_PORT_TO_COMM_EP
	default:
		ep_comm = UDI_CDC_COMM_EP_0;
		break;
	}
	udi_cdc_ctrl_state_notify(port, ep_comm);
     3ac:	2000      	movs	r0, #0
     3ae:	2183      	movs	r1, #131	; 0x83
     3b0:	4b03      	ldr	r3, [pc, #12]	; (3c0 <udi_cdc_ctrl_state_change+0x4c>)
     3b2:	4798      	blx	r3
}
     3b4:	bd10      	pop	{r4, pc}
     3b6:	46c0      	nop			; (mov r8, r8)
     3b8:	200000f7 	.word	0x200000f7
     3bc:	20000658 	.word	0x20000658
     3c0:	00000329 	.word	0x00000329

000003c4 <udi_cdc_serial_state_msg_sent>:
	}
}


static void udi_cdc_serial_state_msg_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
     3c4:	b510      	push	{r4, lr}
	default:
		port = 0;
		break;
	}

	udi_cdc_serial_state_msg_ongoing[port] = false;
     3c6:	2100      	movs	r1, #0
     3c8:	4b07      	ldr	r3, [pc, #28]	; (3e8 <udi_cdc_serial_state_msg_sent+0x24>)
     3ca:	7019      	strb	r1, [r3, #0]

	// For the irregular signals like break, the incoming ring signal,
	// or the overrun error state, this will reset their values to zero
	// and again will not send another notification until their state changes.
	udi_cdc_state[port] &= ~(CDC_SERIAL_STATE_BREAK |
     3cc:	4907      	ldr	r1, [pc, #28]	; (3ec <udi_cdc_serial_state_msg_sent+0x28>)
     3ce:	880b      	ldrh	r3, [r1, #0]
     3d0:	247c      	movs	r4, #124	; 0x7c
     3d2:	43a3      	bics	r3, r4
     3d4:	800b      	strh	r3, [r1, #0]
			CDC_SERIAL_STATE_RING |
			CDC_SERIAL_STATE_FRAMING |
			CDC_SERIAL_STATE_PARITY | CDC_SERIAL_STATE_OVERRUN);
	uid_cdc_state_msg[port].value &= ~(CDC_SERIAL_STATE_BREAK |
     3d6:	4806      	ldr	r0, [pc, #24]	; (3f0 <udi_cdc_serial_state_msg_sent+0x2c>)
     3d8:	8903      	ldrh	r3, [r0, #8]
     3da:	43a3      	bics	r3, r4
     3dc:	8103      	strh	r3, [r0, #8]
			CDC_SERIAL_STATE_RING |
			CDC_SERIAL_STATE_FRAMING |
			CDC_SERIAL_STATE_PARITY | CDC_SERIAL_STATE_OVERRUN);
	// Send it if possible and state changed
	udi_cdc_ctrl_state_notify(port, ep);
     3de:	2000      	movs	r0, #0
     3e0:	1c11      	adds	r1, r2, #0
     3e2:	4b04      	ldr	r3, [pc, #16]	; (3f4 <udi_cdc_serial_state_msg_sent+0x30>)
     3e4:	4798      	blx	r3
}
     3e6:	bd10      	pop	{r4, pc}
     3e8:	200003ac 	.word	0x200003ac
     3ec:	20000658 	.word	0x20000658
     3f0:	200003c4 	.word	0x200003c4
     3f4:	00000329 	.word	0x00000329

000003f8 <udi_cdc_data_disable>:
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
}

void udi_cdc_data_disable(void)
{
     3f8:	b508      	push	{r3, lr}
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
     3fa:	4a06      	ldr	r2, [pc, #24]	; (414 <udi_cdc_data_disable+0x1c>)
     3fc:	7813      	ldrb	r3, [r2, #0]
     3fe:	3b01      	subs	r3, #1
     400:	b2db      	uxtb	r3, r3
     402:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
     404:	7810      	ldrb	r0, [r2, #0]
     406:	b2c0      	uxtb	r0, r0
	UDI_CDC_DISABLE_EXT(port);
     408:	4b03      	ldr	r3, [pc, #12]	; (418 <udi_cdc_data_disable+0x20>)
     40a:	4798      	blx	r3
	udi_cdc_data_running = false;
     40c:	2200      	movs	r2, #0
     40e:	4b03      	ldr	r3, [pc, #12]	; (41c <udi_cdc_data_disable+0x24>)
     410:	701a      	strb	r2, [r3, #0]
}
     412:	bd08      	pop	{r3, pc}
     414:	2000011b 	.word	0x2000011b
     418:	00003839 	.word	0x00003839
     41c:	200003b6 	.word	0x200003b6

00000420 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
     420:	b508      	push	{r3, lr}
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
     422:	4b20      	ldr	r3, [pc, #128]	; (4a4 <udi_cdc_comm_setup+0x84>)
     424:	781b      	ldrb	r3, [r3, #0]
     426:	b25a      	sxtb	r2, r3
     428:	2a00      	cmp	r2, #0
     42a:	da13      	bge.n	454 <udi_cdc_comm_setup+0x34>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     42c:	2260      	movs	r2, #96	; 0x60
     42e:	4013      	ands	r3, r2
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
     430:	2000      	movs	r0, #0
{
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     432:	2b20      	cmp	r3, #32
     434:	d134      	bne.n	4a0 <udi_cdc_comm_setup+0x80>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     436:	4b1b      	ldr	r3, [pc, #108]	; (4a4 <udi_cdc_comm_setup+0x84>)
     438:	785b      	ldrb	r3, [r3, #1]
     43a:	2b21      	cmp	r3, #33	; 0x21
     43c:	d12d      	bne.n	49a <udi_cdc_comm_setup+0x7a>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
     43e:	4b19      	ldr	r3, [pc, #100]	; (4a4 <udi_cdc_comm_setup+0x84>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
     440:	88db      	ldrh	r3, [r3, #6]
     442:	2b07      	cmp	r3, #7
     444:	d12c      	bne.n	4a0 <udi_cdc_comm_setup+0x80>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
     446:	4b17      	ldr	r3, [pc, #92]	; (4a4 <udi_cdc_comm_setup+0x84>)
     448:	4a17      	ldr	r2, [pc, #92]	; (4a8 <udi_cdc_comm_setup+0x88>)
     44a:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
     44c:	2207      	movs	r2, #7
     44e:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
     450:	3001      	adds	r0, #1
     452:	e025      	b.n	4a0 <udi_cdc_comm_setup+0x80>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     454:	2260      	movs	r2, #96	; 0x60
     456:	4013      	ands	r3, r2
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
     458:	2000      	movs	r0, #0
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     45a:	2b20      	cmp	r3, #32
     45c:	d120      	bne.n	4a0 <udi_cdc_comm_setup+0x80>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
     45e:	4b11      	ldr	r3, [pc, #68]	; (4a4 <udi_cdc_comm_setup+0x84>)
     460:	785b      	ldrb	r3, [r3, #1]
     462:	2b20      	cmp	r3, #32
     464:	d002      	beq.n	46c <udi_cdc_comm_setup+0x4c>
     466:	2b22      	cmp	r3, #34	; 0x22
     468:	d00e      	beq.n	488 <udi_cdc_comm_setup+0x68>
     46a:	e018      	b.n	49e <udi_cdc_comm_setup+0x7e>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
     46c:	4b0d      	ldr	r3, [pc, #52]	; (4a4 <udi_cdc_comm_setup+0x84>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
     46e:	88db      	ldrh	r3, [r3, #6]
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
     470:	2000      	movs	r0, #0
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
     472:	2b07      	cmp	r3, #7
     474:	d114      	bne.n	4a0 <udi_cdc_comm_setup+0x80>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
     476:	4b0b      	ldr	r3, [pc, #44]	; (4a4 <udi_cdc_comm_setup+0x84>)
     478:	4a0c      	ldr	r2, [pc, #48]	; (4ac <udi_cdc_comm_setup+0x8c>)
     47a:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
     47c:	4a0a      	ldr	r2, [pc, #40]	; (4a8 <udi_cdc_comm_setup+0x88>)
     47e:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
     480:	2207      	movs	r2, #7
     482:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
     484:	3001      	adds	r0, #1
     486:	e00b      	b.n	4a0 <udi_cdc_comm_setup+0x80>
			case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
				// According cdc spec 1.1 chapter 6.2.14
				UDI_CDC_SET_DTR_EXT(port, (0 !=
     488:	4b06      	ldr	r3, [pc, #24]	; (4a4 <udi_cdc_comm_setup+0x84>)
     48a:	885b      	ldrh	r3, [r3, #2]
     48c:	2101      	movs	r1, #1
     48e:	4019      	ands	r1, r3
     490:	2000      	movs	r0, #0
     492:	4b07      	ldr	r3, [pc, #28]	; (4b0 <udi_cdc_comm_setup+0x90>)
     494:	4798      	blx	r3
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
     496:	2001      	movs	r0, #1
     498:	e002      	b.n	4a0 <udi_cdc_comm_setup+0x80>
			}
		}
	}
	return false;  // request Not supported
     49a:	2000      	movs	r0, #0
     49c:	e000      	b.n	4a0 <udi_cdc_comm_setup+0x80>
     49e:	2000      	movs	r0, #0
}
     4a0:	bd08      	pop	{r3, pc}
     4a2:	46c0      	nop			; (mov r8, r8)
     4a4:	200009b0 	.word	0x200009b0
     4a8:	20000114 	.word	0x20000114
     4ac:	0000012d 	.word	0x0000012d
     4b0:	00003845 	.word	0x00003845

000004b4 <udi_cdc_signal_overrun>:
{
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_PARITY);
}

void udi_cdc_signal_overrun(void)
{
     4b4:	b508      	push	{r3, lr}
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_OVERRUN);
     4b6:	2000      	movs	r0, #0
     4b8:	2101      	movs	r1, #1
     4ba:	2240      	movs	r2, #64	; 0x40
     4bc:	4b01      	ldr	r3, [pc, #4]	; (4c4 <udi_cdc_signal_overrun+0x10>)
     4be:	4798      	blx	r3
}
     4c0:	bd08      	pop	{r3, pc}
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	00000375 	.word	0x00000375

000004c8 <udi_cdc_multi_get_nb_received_data>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     4c8:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     4cc:	b672      	cpsid	i
     4ce:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     4d2:	2100      	movs	r1, #0
     4d4:	4b09      	ldr	r3, [pc, #36]	; (4fc <udi_cdc_multi_get_nb_received_data+0x34>)
     4d6:	7019      	strb	r1, [r3, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
     4d8:	4b09      	ldr	r3, [pc, #36]	; (500 <udi_cdc_multi_get_nb_received_data+0x38>)
     4da:	8818      	ldrh	r0, [r3, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
     4dc:	4b09      	ldr	r3, [pc, #36]	; (504 <udi_cdc_multi_get_nb_received_data+0x3c>)
     4de:	781b      	ldrb	r3, [r3, #0]
     4e0:	005b      	lsls	r3, r3, #1
     4e2:	4909      	ldr	r1, [pc, #36]	; (508 <udi_cdc_multi_get_nb_received_data+0x40>)
     4e4:	5a5b      	ldrh	r3, [r3, r1]
     4e6:	1a18      	subs	r0, r3, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     4e8:	2a00      	cmp	r2, #0
     4ea:	d105      	bne.n	4f8 <udi_cdc_multi_get_nb_received_data+0x30>
		cpu_irq_enable();
     4ec:	3201      	adds	r2, #1
     4ee:	4b03      	ldr	r3, [pc, #12]	; (4fc <udi_cdc_multi_get_nb_received_data+0x34>)
     4f0:	701a      	strb	r2, [r3, #0]
     4f2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     4f6:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
     4f8:	4770      	bx	lr
     4fa:	46c0      	nop			; (mov r8, r8)
     4fc:	200000f7 	.word	0x200000f7
     500:	200003b0 	.word	0x200003b0
     504:	200003bc 	.word	0x200003bc
     508:	200003a4 	.word	0x200003a4

0000050c <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
     50c:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
     50e:	4b03      	ldr	r3, [pc, #12]	; (51c <udi_cdc_multi_is_rx_ready+0x10>)
     510:	4798      	blx	r3
     512:	1e43      	subs	r3, r0, #1
     514:	4198      	sbcs	r0, r3
     516:	b2c0      	uxtb	r0, r0
}
     518:	bd08      	pop	{r3, pc}
     51a:	46c0      	nop			; (mov r8, r8)
     51c:	000004c9 	.word	0x000004c9

00000520 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
     520:	b530      	push	{r4, r5, lr}
     522:	b083      	sub	sp, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     524:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
     528:	425d      	negs	r5, r3
     52a:	415d      	adcs	r5, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     52c:	b672      	cpsid	i
     52e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     532:	2200      	movs	r2, #0
     534:	4b21      	ldr	r3, [pc, #132]	; (5bc <udi_cdc_rx_start+0x9c>)
     536:	701a      	strb	r2, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
     538:	4b21      	ldr	r3, [pc, #132]	; (5c0 <udi_cdc_rx_start+0xa0>)
     53a:	781c      	ldrb	r4, [r3, #0]
     53c:	b2e4      	uxtb	r4, r4
	if (udi_cdc_rx_trans_ongoing[port] ||
     53e:	4a21      	ldr	r2, [pc, #132]	; (5c4 <udi_cdc_rx_start+0xa4>)
     540:	7812      	ldrb	r2, [r2, #0]
     542:	2a00      	cmp	r2, #0
     544:	d107      	bne.n	556 <udi_cdc_rx_start+0x36>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
     546:	4b20      	ldr	r3, [pc, #128]	; (5c8 <udi_cdc_rx_start+0xa8>)
     548:	881a      	ldrh	r2, [r3, #0]
     54a:	0061      	lsls	r1, r4, #1
     54c:	4b1f      	ldr	r3, [pc, #124]	; (5cc <udi_cdc_rx_start+0xac>)
     54e:	5acb      	ldrh	r3, [r1, r3]
     550:	b292      	uxth	r2, r2
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
     552:	429a      	cmp	r2, r3
     554:	d209      	bcs.n	56a <udi_cdc_rx_start+0x4a>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
     556:	2000      	movs	r0, #0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     558:	2d00      	cmp	r5, #0
     55a:	d02d      	beq.n	5b8 <udi_cdc_rx_start+0x98>
		cpu_irq_enable();
     55c:	2201      	movs	r2, #1
     55e:	4b17      	ldr	r3, [pc, #92]	; (5bc <udi_cdc_rx_start+0x9c>)
     560:	701a      	strb	r2, [r3, #0]
     562:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     566:	b662      	cpsie	i
     568:	e026      	b.n	5b8 <udi_cdc_rx_start+0x98>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
     56a:	2200      	movs	r2, #0
     56c:	4b16      	ldr	r3, [pc, #88]	; (5c8 <udi_cdc_rx_start+0xa8>)
     56e:	801a      	strh	r2, [r3, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     570:	4263      	negs	r3, r4
     572:	4163      	adcs	r3, r4
     574:	b2db      	uxtb	r3, r3
     576:	4a12      	ldr	r2, [pc, #72]	; (5c0 <udi_cdc_rx_start+0xa0>)
     578:	7013      	strb	r3, [r2, #0]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
     57a:	2201      	movs	r2, #1
     57c:	4b11      	ldr	r3, [pc, #68]	; (5c4 <udi_cdc_rx_start+0xa4>)
     57e:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     580:	2d00      	cmp	r5, #0
     582:	d004      	beq.n	58e <udi_cdc_rx_start+0x6e>
		cpu_irq_enable();
     584:	4b0d      	ldr	r3, [pc, #52]	; (5bc <udi_cdc_rx_start+0x9c>)
     586:	701a      	strb	r2, [r3, #0]
     588:	f3bf 8f5f 	dmb	sy
     58c:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
     58e:	2000      	movs	r0, #0
     590:	4b0f      	ldr	r3, [pc, #60]	; (5d0 <udi_cdc_rx_start+0xb0>)
     592:	4798      	blx	r3
     594:	2800      	cmp	r0, #0
     596:	d002      	beq.n	59e <udi_cdc_rx_start+0x7e>
		UDI_CDC_RX_NOTIFY(port);
     598:	2000      	movs	r0, #0
     59a:	4b0e      	ldr	r3, [pc, #56]	; (5d4 <udi_cdc_rx_start+0xb4>)
     59c:	4798      	blx	r3
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
     59e:	00a2      	lsls	r2, r4, #2
     5a0:	1912      	adds	r2, r2, r4
     5a2:	0194      	lsls	r4, r2, #6
     5a4:	4a0c      	ldr	r2, [pc, #48]	; (5d8 <udi_cdc_rx_start+0xb8>)
     5a6:	1912      	adds	r2, r2, r4
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
     5a8:	4b0c      	ldr	r3, [pc, #48]	; (5dc <udi_cdc_rx_start+0xbc>)
     5aa:	9300      	str	r3, [sp, #0]
     5ac:	2002      	movs	r0, #2
     5ae:	2101      	movs	r1, #1
     5b0:	23a0      	movs	r3, #160	; 0xa0
     5b2:	005b      	lsls	r3, r3, #1
     5b4:	4c0a      	ldr	r4, [pc, #40]	; (5e0 <udi_cdc_rx_start+0xc0>)
     5b6:	47a0      	blx	r4
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
     5b8:	b003      	add	sp, #12
     5ba:	bd30      	pop	{r4, r5, pc}
     5bc:	200000f7 	.word	0x200000f7
     5c0:	200003bc 	.word	0x200003bc
     5c4:	20000650 	.word	0x20000650
     5c8:	200003b0 	.word	0x200003b0
     5cc:	200003a4 	.word	0x200003a4
     5d0:	0000050d 	.word	0x0000050d
     5d4:	00001eb5 	.word	0x00001eb5
     5d8:	200003d0 	.word	0x200003d0
     5dc:	00000675 	.word	0x00000675
     5e0:	00001b59 	.word	0x00001b59

000005e4 <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
     5e4:	b538      	push	{r3, r4, r5, lr}
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
     5e6:	2400      	movs	r4, #0
     5e8:	4b15      	ldr	r3, [pc, #84]	; (640 <udi_cdc_data_enable+0x5c>)
     5ea:	701c      	strb	r4, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
     5ec:	4b15      	ldr	r3, [pc, #84]	; (644 <udi_cdc_data_enable+0x60>)
     5ee:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
     5f0:	4b15      	ldr	r3, [pc, #84]	; (648 <udi_cdc_data_enable+0x64>)
     5f2:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
     5f4:	4b15      	ldr	r3, [pc, #84]	; (64c <udi_cdc_data_enable+0x68>)
     5f6:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
     5f8:	4b15      	ldr	r3, [pc, #84]	; (650 <udi_cdc_data_enable+0x6c>)
     5fa:	2500      	movs	r5, #0
     5fc:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
     5fe:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
     600:	4b14      	ldr	r3, [pc, #80]	; (654 <udi_cdc_data_enable+0x70>)
     602:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
     604:	2000      	movs	r0, #0
     606:	4b14      	ldr	r3, [pc, #80]	; (658 <udi_cdc_data_enable+0x74>)
     608:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
     60a:	4b14      	ldr	r3, [pc, #80]	; (65c <udi_cdc_data_enable+0x78>)
     60c:	701d      	strb	r5, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
     60e:	4b14      	ldr	r3, [pc, #80]	; (660 <udi_cdc_data_enable+0x7c>)
     610:	701d      	strb	r5, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
     612:	4b14      	ldr	r3, [pc, #80]	; (664 <udi_cdc_data_enable+0x80>)
     614:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
     616:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
     618:	4b13      	ldr	r3, [pc, #76]	; (668 <udi_cdc_data_enable+0x84>)
     61a:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
     61c:	2000      	movs	r0, #0
     61e:	4b13      	ldr	r3, [pc, #76]	; (66c <udi_cdc_data_enable+0x88>)
     620:	4798      	blx	r3
     622:	2800      	cmp	r0, #0
     624:	d00a      	beq.n	63c <udi_cdc_data_enable+0x58>
		return false;
	}
	udi_cdc_nb_data_enabled++;
     626:	4a06      	ldr	r2, [pc, #24]	; (640 <udi_cdc_data_enable+0x5c>)
     628:	7813      	ldrb	r3, [r2, #0]
     62a:	3301      	adds	r3, #1
     62c:	b2db      	uxtb	r3, r3
     62e:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
     630:	7813      	ldrb	r3, [r2, #0]
     632:	2b01      	cmp	r3, #1
     634:	d102      	bne.n	63c <udi_cdc_data_enable+0x58>
		udi_cdc_data_running = true;
     636:	2201      	movs	r2, #1
     638:	4b0d      	ldr	r3, [pc, #52]	; (670 <udi_cdc_data_enable+0x8c>)
     63a:	701a      	strb	r2, [r3, #0]
	}
	return true;
}
     63c:	bd38      	pop	{r3, r4, r5, pc}
     63e:	46c0      	nop			; (mov r8, r8)
     640:	2000011b 	.word	0x2000011b
     644:	200003c0 	.word	0x200003c0
     648:	20000654 	.word	0x20000654
     64c:	2000011c 	.word	0x2000011c
     650:	20000120 	.word	0x20000120
     654:	200003b4 	.word	0x200003b4
     658:	0000018d 	.word	0x0000018d
     65c:	20000650 	.word	0x20000650
     660:	200003bc 	.word	0x200003bc
     664:	200003a4 	.word	0x200003a4
     668:	200003b0 	.word	0x200003b0
     66c:	00000521 	.word	0x00000521
     670:	200003b6 	.word	0x200003b6

00000674 <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
     674:	b510      	push	{r4, lr}
     676:	b082      	sub	sp, #8
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
     678:	2800      	cmp	r0, #0
     67a:	d11f      	bne.n	6bc <udi_cdc_data_received+0x48>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
     67c:	4b10      	ldr	r3, [pc, #64]	; (6c0 <udi_cdc_data_received+0x4c>)
     67e:	781b      	ldrb	r3, [r3, #0]
     680:	4258      	negs	r0, r3
     682:	4143      	adcs	r3, r0
     684:	b2db      	uxtb	r3, r3
	if (!n) {
     686:	2900      	cmp	r1, #0
     688:	d10e      	bne.n	6a8 <udi_cdc_data_received+0x34>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
     68a:	0099      	lsls	r1, r3, #2
     68c:	18cb      	adds	r3, r1, r3
     68e:	019b      	lsls	r3, r3, #6
     690:	490c      	ldr	r1, [pc, #48]	; (6c4 <udi_cdc_data_received+0x50>)
     692:	18cb      	adds	r3, r1, r3
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
     694:	490c      	ldr	r1, [pc, #48]	; (6c8 <udi_cdc_data_received+0x54>)
     696:	9100      	str	r1, [sp, #0]
     698:	1c10      	adds	r0, r2, #0
     69a:	2101      	movs	r1, #1
     69c:	1c1a      	adds	r2, r3, #0
     69e:	23a0      	movs	r3, #160	; 0xa0
     6a0:	005b      	lsls	r3, r3, #1
     6a2:	4c0a      	ldr	r4, [pc, #40]	; (6cc <udi_cdc_data_received+0x58>)
     6a4:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
     6a6:	e009      	b.n	6bc <udi_cdc_data_received+0x48>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
     6a8:	b289      	uxth	r1, r1
     6aa:	005b      	lsls	r3, r3, #1
     6ac:	4a08      	ldr	r2, [pc, #32]	; (6d0 <udi_cdc_data_received+0x5c>)
     6ae:	5299      	strh	r1, [r3, r2]
	udi_cdc_rx_trans_ongoing[port] = false;
     6b0:	2200      	movs	r2, #0
     6b2:	4b08      	ldr	r3, [pc, #32]	; (6d4 <udi_cdc_data_received+0x60>)
     6b4:	701a      	strb	r2, [r3, #0]
	udi_cdc_rx_start(port);
     6b6:	2000      	movs	r0, #0
     6b8:	4b07      	ldr	r3, [pc, #28]	; (6d8 <udi_cdc_data_received+0x64>)
     6ba:	4798      	blx	r3
}
     6bc:	b002      	add	sp, #8
     6be:	bd10      	pop	{r4, pc}
     6c0:	200003bc 	.word	0x200003bc
     6c4:	200003d0 	.word	0x200003d0
     6c8:	00000675 	.word	0x00000675
     6cc:	00001b59 	.word	0x00001b59
     6d0:	200003a4 	.word	0x200003a4
     6d4:	20000650 	.word	0x20000650
     6d8:	00000521 	.word	0x00000521

000006dc <udi_cdc_is_rx_ready>:
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
}

bool udi_cdc_is_rx_ready(void)
{
     6dc:	b508      	push	{r3, lr}
	return udi_cdc_multi_is_rx_ready(0);
     6de:	2000      	movs	r0, #0
     6e0:	4b01      	ldr	r3, [pc, #4]	; (6e8 <udi_cdc_is_rx_ready+0xc>)
     6e2:	4798      	blx	r3
}
     6e4:	bd08      	pop	{r3, pc}
     6e6:	46c0      	nop			; (mov r8, r8)
     6e8:	0000050d 	.word	0x0000050d

000006ec <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
     6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     6ee:	4657      	mov	r7, sl
     6f0:	464e      	mov	r6, r9
     6f2:	4645      	mov	r5, r8
     6f4:	b4e0      	push	{r5, r6, r7}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     6f6:	4b26      	ldr	r3, [pc, #152]	; (790 <udi_cdc_multi_getc+0xa4>)
     6f8:	799b      	ldrb	r3, [r3, #6]
     6fa:	3b09      	subs	r3, #9
     6fc:	425a      	negs	r2, r3
     6fe:	4153      	adcs	r3, r2
     700:	b2db      	uxtb	r3, r3
     702:	4699      	mov	r9, r3
}

int udi_cdc_multi_getc(uint8_t port)
{
	irqflags_t flags;
	int rx_data = 0;
     704:	2300      	movs	r3, #0
     706:	469c      	mov	ip, r3
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     708:	4b22      	ldr	r3, [pc, #136]	; (794 <udi_cdc_multi_getc+0xa8>)
     70a:	4698      	mov	r8, r3
     70c:	2700      	movs	r7, #0
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
     70e:	4e22      	ldr	r6, [pc, #136]	; (798 <udi_cdc_multi_getc+0xac>)
	buf_sel = udi_cdc_rx_buf_sel[port];
     710:	4c22      	ldr	r4, [pc, #136]	; (79c <udi_cdc_multi_getc+0xb0>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     712:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     716:	b672      	cpsid	i
     718:	f3bf 8f5f 	dmb	sy
     71c:	4643      	mov	r3, r8
     71e:	701f      	strb	r7, [r3, #0]
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
     720:	8832      	ldrh	r2, [r6, #0]
     722:	b292      	uxth	r2, r2
	buf_sel = udi_cdc_rx_buf_sel[port];
     724:	7823      	ldrb	r3, [r4, #0]
     726:	b2db      	uxtb	r3, r3
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
     728:	0058      	lsls	r0, r3, #1
     72a:	4d1d      	ldr	r5, [pc, #116]	; (7a0 <udi_cdc_multi_getc+0xb4>)
     72c:	5b45      	ldrh	r5, [r0, r5]
     72e:	b2ad      	uxth	r5, r5
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     730:	2900      	cmp	r1, #0
     732:	d107      	bne.n	744 <udi_cdc_multi_getc+0x58>
		cpu_irq_enable();
     734:	3101      	adds	r1, #1
     736:	468a      	mov	sl, r1
     738:	4916      	ldr	r1, [pc, #88]	; (794 <udi_cdc_multi_getc+0xa8>)
     73a:	4650      	mov	r0, sl
     73c:	7008      	strb	r0, [r1, #0]
     73e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     742:	b662      	cpsie	i
	cpu_irq_restore(flags);
	while (again) {
     744:	42aa      	cmp	r2, r5
     746:	d305      	bcc.n	754 <udi_cdc_multi_getc+0x68>
		if (!udi_cdc_data_running) {
     748:	4b16      	ldr	r3, [pc, #88]	; (7a4 <udi_cdc_multi_getc+0xb8>)
     74a:	781b      	ldrb	r3, [r3, #0]
     74c:	2b00      	cmp	r3, #0
     74e:	d1e0      	bne.n	712 <udi_cdc_multi_getc+0x26>
			return 0;
     750:	2000      	movs	r0, #0
     752:	e017      	b.n	784 <udi_cdc_multi_getc+0x98>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
     754:	0099      	lsls	r1, r3, #2
     756:	18cb      	adds	r3, r1, r3
     758:	019b      	lsls	r3, r3, #6
     75a:	189b      	adds	r3, r3, r2
     75c:	4912      	ldr	r1, [pc, #72]	; (7a8 <udi_cdc_multi_getc+0xbc>)
     75e:	5c5b      	ldrb	r3, [r3, r1]
     760:	4665      	mov	r5, ip
     762:	431d      	orrs	r5, r3
	udi_cdc_rx_pos[port] = pos+1;
     764:	3201      	adds	r2, #1
     766:	b292      	uxth	r2, r2
     768:	4b0b      	ldr	r3, [pc, #44]	; (798 <udi_cdc_multi_getc+0xac>)
     76a:	801a      	strh	r2, [r3, #0]

	udi_cdc_rx_start(port);
     76c:	2000      	movs	r0, #0
     76e:	4b0f      	ldr	r3, [pc, #60]	; (7ac <udi_cdc_multi_getc+0xc0>)
     770:	4798      	blx	r3

	if (b_databit_9) {
     772:	464b      	mov	r3, r9
     774:	2b00      	cmp	r3, #0
     776:	d004      	beq.n	782 <udi_cdc_multi_getc+0x96>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
     778:	022b      	lsls	r3, r5, #8
     77a:	469c      	mov	ip, r3

	udi_cdc_rx_start(port);

	if (b_databit_9) {
		// Receive MSB
		b_databit_9 = false;
     77c:	2300      	movs	r3, #0
     77e:	4699      	mov	r9, r3
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
     780:	e7c7      	b.n	712 <udi_cdc_multi_getc+0x26>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
     782:	1c28      	adds	r0, r5, #0
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
     784:	bc1c      	pop	{r2, r3, r4}
     786:	4690      	mov	r8, r2
     788:	4699      	mov	r9, r3
     78a:	46a2      	mov	sl, r4
     78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     78e:	46c0      	nop			; (mov r8, r8)
     790:	20000114 	.word	0x20000114
     794:	200000f7 	.word	0x200000f7
     798:	200003b0 	.word	0x200003b0
     79c:	200003bc 	.word	0x200003bc
     7a0:	200003a4 	.word	0x200003a4
     7a4:	200003b6 	.word	0x200003b6
     7a8:	200003d0 	.word	0x200003d0
     7ac:	00000521 	.word	0x00000521

000007b0 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
     7b0:	b508      	push	{r3, lr}
	return udi_cdc_multi_getc(0);
     7b2:	2000      	movs	r0, #0
     7b4:	4b01      	ldr	r3, [pc, #4]	; (7bc <udi_cdc_getc+0xc>)
     7b6:	4798      	blx	r3
}
     7b8:	bd08      	pop	{r3, pc}
     7ba:	46c0      	nop			; (mov r8, r8)
     7bc:	000006ed 	.word	0x000006ed

000007c0 <udi_cdc_multi_get_free_tx_buffer>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     7c0:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     7c4:	b672      	cpsid	i
     7c6:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     7ca:	2100      	movs	r1, #0
     7cc:	4b14      	ldr	r3, [pc, #80]	; (820 <udi_cdc_multi_get_free_tx_buffer+0x60>)
     7ce:	7019      	strb	r1, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     7d0:	4b14      	ldr	r3, [pc, #80]	; (824 <udi_cdc_multi_get_free_tx_buffer+0x64>)
     7d2:	781b      	ldrb	r3, [r3, #0]
     7d4:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
     7d6:	0058      	lsls	r0, r3, #1
     7d8:	4913      	ldr	r1, [pc, #76]	; (828 <udi_cdc_multi_get_free_tx_buffer+0x68>)
     7da:	5a40      	ldrh	r0, [r0, r1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
     7dc:	21a0      	movs	r1, #160	; 0xa0
     7de:	0049      	lsls	r1, r1, #1
     7e0:	4288      	cmp	r0, r1
     7e2:	d110      	bne.n	806 <udi_cdc_multi_get_free_tx_buffer+0x46>
		if ((!udi_cdc_tx_trans_ongoing[port])
     7e4:	4911      	ldr	r1, [pc, #68]	; (82c <udi_cdc_multi_get_free_tx_buffer+0x6c>)
     7e6:	7809      	ldrb	r1, [r1, #0]
     7e8:	2900      	cmp	r1, #0
     7ea:	d10c      	bne.n	806 <udi_cdc_multi_get_free_tx_buffer+0x46>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
     7ec:	4910      	ldr	r1, [pc, #64]	; (830 <udi_cdc_multi_get_free_tx_buffer+0x70>)
     7ee:	7809      	ldrb	r1, [r1, #0]
     7f0:	2900      	cmp	r1, #0
     7f2:	d108      	bne.n	806 <udi_cdc_multi_get_free_tx_buffer+0x46>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
     7f4:	2001      	movs	r0, #1
     7f6:	490e      	ldr	r1, [pc, #56]	; (830 <udi_cdc_multi_get_free_tx_buffer+0x70>)
     7f8:	7008      	strb	r0, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
     7fa:	4259      	negs	r1, r3
     7fc:	414b      	adcs	r3, r1
     7fe:	b2db      	uxtb	r3, r3
     800:	4908      	ldr	r1, [pc, #32]	; (824 <udi_cdc_multi_get_free_tx_buffer+0x64>)
     802:	700b      	strb	r3, [r1, #0]
			buf_sel_nb = 0;
     804:	2000      	movs	r0, #0
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
     806:	23a0      	movs	r3, #160	; 0xa0
     808:	005b      	lsls	r3, r3, #1
     80a:	1a18      	subs	r0, r3, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     80c:	2a00      	cmp	r2, #0
     80e:	d105      	bne.n	81c <udi_cdc_multi_get_free_tx_buffer+0x5c>
		cpu_irq_enable();
     810:	3201      	adds	r2, #1
     812:	4b03      	ldr	r3, [pc, #12]	; (820 <udi_cdc_multi_get_free_tx_buffer+0x60>)
     814:	701a      	strb	r2, [r3, #0]
     816:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     81a:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
     81c:	4770      	bx	lr
     81e:	46c0      	nop			; (mov r8, r8)
     820:	200000f7 	.word	0x200000f7
     824:	2000011c 	.word	0x2000011c
     828:	20000120 	.word	0x20000120
     82c:	200003c0 	.word	0x200003c0
     830:	20000654 	.word	0x20000654

00000834 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
     834:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
     836:	4b03      	ldr	r3, [pc, #12]	; (844 <udi_cdc_multi_is_tx_ready+0x10>)
     838:	4798      	blx	r3
     83a:	1e43      	subs	r3, r0, #1
     83c:	4198      	sbcs	r0, r3
     83e:	b2c0      	uxtb	r0, r0
}
     840:	bd08      	pop	{r3, pc}
     842:	46c0      	nop			; (mov r8, r8)
     844:	000007c1 	.word	0x000007c1

00000848 <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
     848:	b508      	push	{r3, lr}
	return udi_cdc_multi_is_tx_ready(0);
     84a:	2000      	movs	r0, #0
     84c:	4b01      	ldr	r3, [pc, #4]	; (854 <udi_cdc_is_tx_ready+0xc>)
     84e:	4798      	blx	r3
}
     850:	bd08      	pop	{r3, pc}
     852:	46c0      	nop			; (mov r8, r8)
     854:	00000835 	.word	0x00000835

00000858 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
     858:	b5f0      	push	{r4, r5, r6, r7, lr}
     85a:	4657      	mov	r7, sl
     85c:	464e      	mov	r6, r9
     85e:	4645      	mov	r5, r8
     860:	b4e0      	push	{r5, r6, r7}
     862:	b082      	sub	sp, #8
     864:	1c0c      	adds	r4, r1, #0

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     866:	4b20      	ldr	r3, [pc, #128]	; (8e8 <udi_cdc_multi_putc+0x90>)
     868:	799d      	ldrb	r5, [r3, #6]
     86a:	3d09      	subs	r5, #9
     86c:	426b      	negs	r3, r5
     86e:	415d      	adcs	r5, r3
     870:	b2ed      	uxtb	r5, r5

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     872:	4e1e      	ldr	r6, [pc, #120]	; (8ec <udi_cdc_multi_putc+0x94>)
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     874:	4b1e      	ldr	r3, [pc, #120]	; (8f0 <udi_cdc_multi_putc+0x98>)
     876:	4698      	mov	r8, r3
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     878:	4b1e      	ldr	r3, [pc, #120]	; (8f4 <udi_cdc_multi_putc+0x9c>)
     87a:	469a      	mov	sl, r3

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     87c:	2000      	movs	r0, #0
     87e:	47b0      	blx	r6
     880:	2800      	cmp	r0, #0
     882:	d104      	bne.n	88e <udi_cdc_multi_putc+0x36>
		if (!udi_cdc_data_running) {
     884:	4b1c      	ldr	r3, [pc, #112]	; (8f8 <udi_cdc_multi_putc+0xa0>)
     886:	781b      	ldrb	r3, [r3, #0]
     888:	2b00      	cmp	r3, #0
     88a:	d1f7      	bne.n	87c <udi_cdc_multi_putc+0x24>
     88c:	e025      	b.n	8da <udi_cdc_multi_putc+0x82>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     88e:	f3ef 8310 	mrs	r3, PRIMASK
     892:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     894:	b672      	cpsid	i
     896:	f3bf 8f5f 	dmb	sy
     89a:	2300      	movs	r3, #0
     89c:	4641      	mov	r1, r8
     89e:	700b      	strb	r3, [r1, #0]
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     8a0:	4653      	mov	r3, sl
     8a2:	781b      	ldrb	r3, [r3, #0]
     8a4:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     8a6:	4815      	ldr	r0, [pc, #84]	; (8fc <udi_cdc_multi_putc+0xa4>)
     8a8:	005f      	lsls	r7, r3, #1
     8aa:	5a39      	ldrh	r1, [r7, r0]
     8ac:	1c4a      	adds	r2, r1, #1
     8ae:	523a      	strh	r2, [r7, r0]
     8b0:	0098      	lsls	r0, r3, #2
     8b2:	18c3      	adds	r3, r0, r3
     8b4:	019b      	lsls	r3, r3, #6
     8b6:	185b      	adds	r3, r3, r1
     8b8:	4911      	ldr	r1, [pc, #68]	; (900 <udi_cdc_multi_putc+0xa8>)
     8ba:	545c      	strb	r4, [r3, r1]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     8bc:	9a01      	ldr	r2, [sp, #4]
     8be:	2a00      	cmp	r2, #0
     8c0:	d105      	bne.n	8ce <udi_cdc_multi_putc+0x76>
		cpu_irq_enable();
     8c2:	3201      	adds	r2, #1
     8c4:	4b0a      	ldr	r3, [pc, #40]	; (8f0 <udi_cdc_multi_putc+0x98>)
     8c6:	701a      	strb	r2, [r3, #0]
     8c8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     8cc:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
     8ce:	2d00      	cmp	r5, #0
     8d0:	d002      	beq.n	8d8 <udi_cdc_multi_putc+0x80>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     8d2:	1224      	asrs	r4, r4, #8
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
     8d4:	2500      	movs	r5, #0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
     8d6:	e7d1      	b.n	87c <udi_cdc_multi_putc+0x24>
	}
	return true;
     8d8:	2001      	movs	r0, #1
}
     8da:	b002      	add	sp, #8
     8dc:	bc1c      	pop	{r2, r3, r4}
     8de:	4690      	mov	r8, r2
     8e0:	4699      	mov	r9, r3
     8e2:	46a2      	mov	sl, r4
     8e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8e6:	46c0      	nop			; (mov r8, r8)
     8e8:	20000114 	.word	0x20000114
     8ec:	00000835 	.word	0x00000835
     8f0:	200000f7 	.word	0x200000f7
     8f4:	2000011c 	.word	0x2000011c
     8f8:	200003b6 	.word	0x200003b6
     8fc:	20000120 	.word	0x20000120
     900:	20000124 	.word	0x20000124

00000904 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
     904:	b508      	push	{r3, lr}
     906:	1c01      	adds	r1, r0, #0
	return udi_cdc_multi_putc(0, value);
     908:	2000      	movs	r0, #0
     90a:	4b01      	ldr	r3, [pc, #4]	; (910 <udi_cdc_putc+0xc>)
     90c:	4798      	blx	r3
}
     90e:	bd08      	pop	{r3, pc}
     910:	00000859 	.word	0x00000859

00000914 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
     914:	b510      	push	{r4, lr}
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     916:	4b11      	ldr	r3, [pc, #68]	; (95c <udc_next_desc_in_iface+0x48>)
     918:	681b      	ldr	r3, [r3, #0]
     91a:	681c      	ldr	r4, [r3, #0]
     91c:	78a3      	ldrb	r3, [r4, #2]
     91e:	78e2      	ldrb	r2, [r4, #3]
     920:	0212      	lsls	r2, r2, #8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     922:	431a      	orrs	r2, r3
     924:	18a2      	adds	r2, r4, r2
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     926:	7803      	ldrb	r3, [r0, #0]
     928:	18c0      	adds	r0, r0, r3
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     92a:	4290      	cmp	r0, r2
     92c:	d210      	bcs.n	950 <udc_next_desc_in_iface+0x3c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     92e:	7843      	ldrb	r3, [r0, #1]
     930:	2b04      	cmp	r3, #4
     932:	d00f      	beq.n	954 <udc_next_desc_in_iface+0x40>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     934:	428b      	cmp	r3, r1
     936:	d105      	bne.n	944 <udc_next_desc_in_iface+0x30>
     938:	e00f      	b.n	95a <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     93a:	7843      	ldrb	r3, [r0, #1]
     93c:	2b04      	cmp	r3, #4
     93e:	d00b      	beq.n	958 <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     940:	428b      	cmp	r3, r1
     942:	d00a      	beq.n	95a <udc_next_desc_in_iface+0x46>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     944:	7803      	ldrb	r3, [r0, #0]
     946:	18c0      	adds	r0, r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     948:	4290      	cmp	r0, r2
     94a:	d3f6      	bcc.n	93a <udc_next_desc_in_iface+0x26>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
     94c:	2000      	movs	r0, #0
     94e:	e004      	b.n	95a <udc_next_desc_in_iface+0x46>
     950:	2000      	movs	r0, #0
     952:	e002      	b.n	95a <udc_next_desc_in_iface+0x46>
     954:	2000      	movs	r0, #0
     956:	e000      	b.n	95a <udc_next_desc_in_iface+0x46>
     958:	2000      	movs	r0, #0
}
     95a:	bd10      	pop	{r4, pc}
     95c:	2000065c 	.word	0x2000065c

00000960 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
     960:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
     962:	4b03      	ldr	r3, [pc, #12]	; (970 <udc_valid_address+0x10>)
     964:	885b      	ldrh	r3, [r3, #2]
     966:	207f      	movs	r0, #127	; 0x7f
     968:	4018      	ands	r0, r3
     96a:	4b02      	ldr	r3, [pc, #8]	; (974 <udc_valid_address+0x14>)
     96c:	4798      	blx	r3
}
     96e:	bd08      	pop	{r3, pc}
     970:	200009b0 	.word	0x200009b0
     974:	00001d31 	.word	0x00001d31

00000978 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
     978:	b510      	push	{r4, lr}
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
     97a:	4b16      	ldr	r3, [pc, #88]	; (9d4 <udc_update_iface_desc+0x5c>)
     97c:	781b      	ldrb	r3, [r3, #0]
		return false;
     97e:	2200      	movs	r2, #0
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
     980:	2b00      	cmp	r3, #0
     982:	d024      	beq.n	9ce <udc_update_iface_desc+0x56>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     984:	4b14      	ldr	r3, [pc, #80]	; (9d8 <udc_update_iface_desc+0x60>)
     986:	681b      	ldr	r3, [r3, #0]
     988:	681b      	ldr	r3, [r3, #0]
     98a:	791c      	ldrb	r4, [r3, #4]
     98c:	4284      	cmp	r4, r0
     98e:	d91e      	bls.n	9ce <udc_update_iface_desc+0x56>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     990:	4a12      	ldr	r2, [pc, #72]	; (9dc <udc_update_iface_desc+0x64>)
     992:	6013      	str	r3, [r2, #0]
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     994:	789a      	ldrb	r2, [r3, #2]
     996:	78dc      	ldrb	r4, [r3, #3]
     998:	0224      	lsls	r4, r4, #8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     99a:	4314      	orrs	r4, r2
     99c:	191c      	adds	r4, r3, r4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
     99e:	42a3      	cmp	r3, r4
     9a0:	d214      	bcs.n	9cc <udc_update_iface_desc+0x54>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     9a2:	785a      	ldrb	r2, [r3, #1]
     9a4:	2a04      	cmp	r2, #4
     9a6:	d109      	bne.n	9bc <udc_update_iface_desc+0x44>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     9a8:	789a      	ldrb	r2, [r3, #2]
     9aa:	4282      	cmp	r2, r0
     9ac:	d106      	bne.n	9bc <udc_update_iface_desc+0x44>
     9ae:	78da      	ldrb	r2, [r3, #3]
     9b0:	428a      	cmp	r2, r1
     9b2:	d103      	bne.n	9bc <udc_update_iface_desc+0x44>
     9b4:	4a09      	ldr	r2, [pc, #36]	; (9dc <udc_update_iface_desc+0x64>)
     9b6:	6013      	str	r3, [r2, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
     9b8:	2201      	movs	r2, #1
     9ba:	e008      	b.n	9ce <udc_update_iface_desc+0x56>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     9bc:	781a      	ldrb	r2, [r3, #0]
     9be:	189b      	adds	r3, r3, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
     9c0:	42a3      	cmp	r3, r4
     9c2:	d3ee      	bcc.n	9a2 <udc_update_iface_desc+0x2a>
     9c4:	4a05      	ldr	r2, [pc, #20]	; (9dc <udc_update_iface_desc+0x64>)
     9c6:	6013      	str	r3, [r2, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
     9c8:	2200      	movs	r2, #0
     9ca:	e000      	b.n	9ce <udc_update_iface_desc+0x56>
     9cc:	2200      	movs	r2, #0
}
     9ce:	1c10      	adds	r0, r2, #0
     9d0:	bd10      	pop	{r4, pc}
     9d2:	46c0      	nop			; (mov r8, r8)
     9d4:	20000668 	.word	0x20000668
     9d8:	2000065c 	.word	0x2000065c
     9dc:	2000066c 	.word	0x2000066c

000009e0 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
     9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     9e2:	4647      	mov	r7, r8
     9e4:	b480      	push	{r7}
     9e6:	1c04      	adds	r4, r0, #0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     9e8:	2100      	movs	r1, #0
     9ea:	4b12      	ldr	r3, [pc, #72]	; (a34 <udc_iface_disable+0x54>)
     9ec:	4798      	blx	r3
     9ee:	1e05      	subs	r5, r0, #0
     9f0:	d01c      	beq.n	a2c <udc_iface_disable+0x4c>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     9f2:	4b11      	ldr	r3, [pc, #68]	; (a38 <udc_iface_disable+0x58>)
     9f4:	681b      	ldr	r3, [r3, #0]
     9f6:	685b      	ldr	r3, [r3, #4]
     9f8:	00a2      	lsls	r2, r4, #2
     9fa:	58d3      	ldr	r3, [r2, r3]
     9fc:	4698      	mov	r8, r3

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     9fe:	68db      	ldr	r3, [r3, #12]
     a00:	4798      	blx	r3
     a02:	1c01      	adds	r1, r0, #0
     a04:	1c20      	adds	r0, r4, #0
     a06:	4b0b      	ldr	r3, [pc, #44]	; (a34 <udc_iface_disable+0x54>)
     a08:	4798      	blx	r3
     a0a:	1e05      	subs	r5, r0, #0
     a0c:	d00e      	beq.n	a2c <udc_iface_disable+0x4c>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     a0e:	4b0b      	ldr	r3, [pc, #44]	; (a3c <udc_iface_disable+0x5c>)
     a10:	681c      	ldr	r4, [r3, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     a12:	4e0b      	ldr	r6, [pc, #44]	; (a40 <udc_iface_disable+0x60>)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
     a14:	4f0b      	ldr	r7, [pc, #44]	; (a44 <udc_iface_disable+0x64>)
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     a16:	1c20      	adds	r0, r4, #0
     a18:	2105      	movs	r1, #5
     a1a:	47b0      	blx	r6
     a1c:	1e04      	subs	r4, r0, #0
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
     a1e:	d002      	beq.n	a26 <udc_iface_disable+0x46>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
     a20:	7880      	ldrb	r0, [r0, #2]
     a22:	47b8      	blx	r7
		}
     a24:	e7f7      	b.n	a16 <udc_iface_disable+0x36>
	}
#endif

	// Disable interface
	udi_api->disable();
     a26:	4643      	mov	r3, r8
     a28:	685b      	ldr	r3, [r3, #4]
     a2a:	4798      	blx	r3
	return true;
}
     a2c:	1c28      	adds	r0, r5, #0
     a2e:	bc04      	pop	{r2}
     a30:	4690      	mov	r8, r2
     a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a34:	00000979 	.word	0x00000979
     a38:	2000065c 	.word	0x2000065c
     a3c:	2000066c 	.word	0x2000066c
     a40:	00000915 	.word	0x00000915
     a44:	00001871 	.word	0x00001871

00000a48 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
     a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a4a:	1c05      	adds	r5, r0, #0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
     a4c:	4b0f      	ldr	r3, [pc, #60]	; (a8c <udc_iface_enable+0x44>)
     a4e:	4798      	blx	r3
     a50:	2800      	cmp	r0, #0
     a52:	d019      	beq.n	a88 <udc_iface_enable+0x40>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     a54:	4b0e      	ldr	r3, [pc, #56]	; (a90 <udc_iface_enable+0x48>)
     a56:	681c      	ldr	r4, [r3, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     a58:	4e0e      	ldr	r6, [pc, #56]	; (a94 <udc_iface_enable+0x4c>)
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     a5a:	4f0f      	ldr	r7, [pc, #60]	; (a98 <udc_iface_enable+0x50>)

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     a5c:	1c20      	adds	r0, r4, #0
     a5e:	2105      	movs	r1, #5
     a60:	47b0      	blx	r6
     a62:	1e04      	subs	r4, r0, #0
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
     a64:	d009      	beq.n	a7a <udc_iface_enable+0x32>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     a66:	7880      	ldrb	r0, [r0, #2]
     a68:	78e1      	ldrb	r1, [r4, #3]
     a6a:	7923      	ldrb	r3, [r4, #4]
     a6c:	7962      	ldrb	r2, [r4, #5]
     a6e:	0212      	lsls	r2, r2, #8
     a70:	431a      	orrs	r2, r3
     a72:	47b8      	blx	r7
     a74:	2800      	cmp	r0, #0
     a76:	d1f1      	bne.n	a5c <udc_iface_enable+0x14>
     a78:	e006      	b.n	a88 <udc_iface_enable+0x40>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
     a7a:	4b08      	ldr	r3, [pc, #32]	; (a9c <udc_iface_enable+0x54>)
     a7c:	681b      	ldr	r3, [r3, #0]
     a7e:	685b      	ldr	r3, [r3, #4]
     a80:	00ad      	lsls	r5, r5, #2
     a82:	58eb      	ldr	r3, [r5, r3]
     a84:	681b      	ldr	r3, [r3, #0]
     a86:	4798      	blx	r3
}
     a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a8a:	46c0      	nop			; (mov r8, r8)
     a8c:	00000979 	.word	0x00000979
     a90:	2000066c 	.word	0x2000066c
     a94:	00000915 	.word	0x00000915
     a98:	000018c9 	.word	0x000018c9
     a9c:	2000065c 	.word	0x2000065c

00000aa0 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
     aa0:	b508      	push	{r3, lr}
	udd_enable();
     aa2:	4b01      	ldr	r3, [pc, #4]	; (aa8 <udc_start+0x8>)
     aa4:	4798      	blx	r3
}
     aa6:	bd08      	pop	{r3, pc}
     aa8:	00001de1 	.word	0x00001de1

00000aac <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
     aac:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
     aae:	4b0e      	ldr	r3, [pc, #56]	; (ae8 <udc_reset+0x3c>)
     ab0:	781b      	ldrb	r3, [r3, #0]
     ab2:	2b00      	cmp	r3, #0
     ab4:	d011      	beq.n	ada <udc_reset+0x2e>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     ab6:	4b0d      	ldr	r3, [pc, #52]	; (aec <udc_reset+0x40>)
     ab8:	681b      	ldr	r3, [r3, #0]
     aba:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     abc:	791b      	ldrb	r3, [r3, #4]
     abe:	2b00      	cmp	r3, #0
     ac0:	d00b      	beq.n	ada <udc_reset+0x2e>
     ac2:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
     ac4:	4e0a      	ldr	r6, [pc, #40]	; (af0 <udc_reset+0x44>)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     ac6:	4d09      	ldr	r5, [pc, #36]	; (aec <udc_reset+0x40>)
				iface_num++) {
			udc_iface_disable(iface_num);
     ac8:	1c20      	adds	r0, r4, #0
     aca:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     acc:	3401      	adds	r4, #1
     ace:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     ad0:	682b      	ldr	r3, [r5, #0]
     ad2:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     ad4:	791b      	ldrb	r3, [r3, #4]
     ad6:	42a3      	cmp	r3, r4
     ad8:	d8f6      	bhi.n	ac8 <udc_reset+0x1c>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
     ada:	2200      	movs	r2, #0
     adc:	4b02      	ldr	r3, [pc, #8]	; (ae8 <udc_reset+0x3c>)
     ade:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
     ae0:	3201      	adds	r2, #1
     ae2:	4b04      	ldr	r3, [pc, #16]	; (af4 <udc_reset+0x48>)
     ae4:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
     ae6:	bd70      	pop	{r4, r5, r6, pc}
     ae8:	20000668 	.word	0x20000668
     aec:	2000065c 	.word	0x2000065c
     af0:	000009e1 	.word	0x000009e1
     af4:	20000664 	.word	0x20000664

00000af8 <udc_sof_notify>:

void udc_sof_notify(void)
{
     af8:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
     afa:	4b0d      	ldr	r3, [pc, #52]	; (b30 <udc_sof_notify+0x38>)
     afc:	781b      	ldrb	r3, [r3, #0]
     afe:	2b00      	cmp	r3, #0
     b00:	d015      	beq.n	b2e <udc_sof_notify+0x36>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     b02:	4b0c      	ldr	r3, [pc, #48]	; (b34 <udc_sof_notify+0x3c>)
     b04:	681b      	ldr	r3, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     b06:	681a      	ldr	r2, [r3, #0]
     b08:	7912      	ldrb	r2, [r2, #4]
     b0a:	2a00      	cmp	r2, #0
     b0c:	d00f      	beq.n	b2e <udc_sof_notify+0x36>
     b0e:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     b10:	4d08      	ldr	r5, [pc, #32]	; (b34 <udc_sof_notify+0x3c>)
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     b12:	685b      	ldr	r3, [r3, #4]
     b14:	00a2      	lsls	r2, r4, #2
     b16:	58d3      	ldr	r3, [r2, r3]
     b18:	691b      	ldr	r3, [r3, #16]
     b1a:	2b00      	cmp	r3, #0
     b1c:	d000      	beq.n	b20 <udc_sof_notify+0x28>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     b1e:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     b20:	3401      	adds	r4, #1
     b22:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     b24:	682b      	ldr	r3, [r5, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     b26:	681a      	ldr	r2, [r3, #0]
     b28:	7912      	ldrb	r2, [r2, #4]
     b2a:	42a2      	cmp	r2, r4
     b2c:	d8f1      	bhi.n	b12 <udc_sof_notify+0x1a>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     b2e:	bd38      	pop	{r3, r4, r5, pc}
     b30:	20000668 	.word	0x20000668
     b34:	2000065c 	.word	0x2000065c

00000b38 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     b3a:	4bbd      	ldr	r3, [pc, #756]	; (e30 <udc_process_setup+0x2f8>)
     b3c:	2200      	movs	r2, #0
     b3e:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
     b40:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
     b42:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
     b44:	781b      	ldrb	r3, [r3, #0]
     b46:	b25a      	sxtb	r2, r3
     b48:	2a00      	cmp	r2, #0
     b4a:	db00      	blt.n	b4e <udc_process_setup+0x16>
     b4c:	e1f6      	b.n	f3c <udc_process_setup+0x404>
		if (udd_g_ctrlreq.req.wLength == 0) {
     b4e:	4ab8      	ldr	r2, [pc, #736]	; (e30 <udc_process_setup+0x2f8>)
     b50:	88d2      	ldrh	r2, [r2, #6]
			return false; // Error from USB host
     b52:	2000      	movs	r0, #0
	udd_g_ctrlreq.payload_size = 0;
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
     b54:	2a00      	cmp	r2, #0
     b56:	d000      	beq.n	b5a <udc_process_setup+0x22>
     b58:	e1f4      	b.n	f44 <udc_process_setup+0x40c>
     b5a:	e1f8      	b.n	f4e <udc_process_setup+0x416>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     b5c:	211f      	movs	r1, #31
     b5e:	400b      	ands	r3, r1
     b60:	d17b      	bne.n	c5a <udc_process_setup+0x122>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     b62:	49b3      	ldr	r1, [pc, #716]	; (e30 <udc_process_setup+0x2f8>)
     b64:	7849      	ldrb	r1, [r1, #1]
     b66:	2906      	cmp	r1, #6
     b68:	d00b      	beq.n	b82 <udc_process_setup+0x4a>
     b6a:	2908      	cmp	r1, #8
     b6c:	d06d      	beq.n	c4a <udc_process_setup+0x112>
     b6e:	2900      	cmp	r1, #0
     b70:	d173      	bne.n	c5a <udc_process_setup+0x122>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     b72:	2a02      	cmp	r2, #2
     b74:	d000      	beq.n	b78 <udc_process_setup+0x40>
     b76:	e18e      	b.n	e96 <udc_process_setup+0x35e>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     b78:	48ae      	ldr	r0, [pc, #696]	; (e34 <udc_process_setup+0x2fc>)
     b7a:	3102      	adds	r1, #2
     b7c:	4bae      	ldr	r3, [pc, #696]	; (e38 <udc_process_setup+0x300>)
     b7e:	4798      	blx	r3
     b80:	e1e4      	b.n	f4c <udc_process_setup+0x414>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     b82:	4bab      	ldr	r3, [pc, #684]	; (e30 <udc_process_setup+0x2f8>)
     b84:	885b      	ldrh	r3, [r3, #2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     b86:	0a1a      	lsrs	r2, r3, #8
     b88:	2a02      	cmp	r2, #2
     b8a:	d010      	beq.n	bae <udc_process_setup+0x76>
     b8c:	b2d1      	uxtb	r1, r2
     b8e:	2902      	cmp	r1, #2
     b90:	d802      	bhi.n	b98 <udc_process_setup+0x60>
     b92:	2a01      	cmp	r2, #1
     b94:	d005      	beq.n	ba2 <udc_process_setup+0x6a>
     b96:	e148      	b.n	e2a <udc_process_setup+0x2f2>
     b98:	2a03      	cmp	r2, #3
     b9a:	d02a      	beq.n	bf2 <udc_process_setup+0xba>
     b9c:	2a0f      	cmp	r2, #15
     b9e:	d01c      	beq.n	bda <udc_process_setup+0xa2>
     ba0:	e143      	b.n	e2a <udc_process_setup+0x2f2>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     ba2:	4ba6      	ldr	r3, [pc, #664]	; (e3c <udc_process_setup+0x304>)
     ba4:	6818      	ldr	r0, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     ba6:	7801      	ldrb	r1, [r0, #0]
     ba8:	4ba3      	ldr	r3, [pc, #652]	; (e38 <udc_process_setup+0x300>)
     baa:	4798      	blx	r3
     bac:	e044      	b.n	c38 <udc_process_setup+0x100>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     bae:	b2db      	uxtb	r3, r3
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     bb0:	4aa2      	ldr	r2, [pc, #648]	; (e3c <udc_process_setup+0x304>)
     bb2:	6812      	ldr	r2, [r2, #0]
     bb4:	7c52      	ldrb	r2, [r2, #17]
     bb6:	429a      	cmp	r2, r3
     bb8:	d800      	bhi.n	bbc <udc_process_setup+0x84>
     bba:	e16c      	b.n	e96 <udc_process_setup+0x35e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     bbc:	4a9f      	ldr	r2, [pc, #636]	; (e3c <udc_process_setup+0x304>)
     bbe:	6852      	ldr	r2, [r2, #4]
     bc0:	00db      	lsls	r3, r3, #3
     bc2:	5898      	ldr	r0, [r3, r2]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     bc4:	7883      	ldrb	r3, [r0, #2]
     bc6:	78c1      	ldrb	r1, [r0, #3]
     bc8:	0209      	lsls	r1, r1, #8
     bca:	4319      	orrs	r1, r3
     bcc:	4b9a      	ldr	r3, [pc, #616]	; (e38 <udc_process_setup+0x300>)
     bce:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     bd0:	4b97      	ldr	r3, [pc, #604]	; (e30 <udc_process_setup+0x2f8>)
     bd2:	689b      	ldr	r3, [r3, #8]
     bd4:	2202      	movs	r2, #2
     bd6:	705a      	strb	r2, [r3, #1]
     bd8:	e02e      	b.n	c38 <udc_process_setup+0x100>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     bda:	4b98      	ldr	r3, [pc, #608]	; (e3c <udc_process_setup+0x304>)
     bdc:	6898      	ldr	r0, [r3, #8]
     bde:	2800      	cmp	r0, #0
     be0:	d100      	bne.n	be4 <udc_process_setup+0xac>
     be2:	e158      	b.n	e96 <udc_process_setup+0x35e>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     be4:	7883      	ldrb	r3, [r0, #2]
     be6:	78c1      	ldrb	r1, [r0, #3]
     be8:	0209      	lsls	r1, r1, #8
     bea:	4319      	orrs	r1, r3
     bec:	4b92      	ldr	r3, [pc, #584]	; (e38 <udc_process_setup+0x300>)
     bee:	4798      	blx	r3
     bf0:	e022      	b.n	c38 <udc_process_setup+0x100>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     bf2:	22ff      	movs	r2, #255	; 0xff
     bf4:	4013      	ands	r3, r2
     bf6:	2b01      	cmp	r3, #1
     bf8:	d00c      	beq.n	c14 <udc_process_setup+0xdc>
     bfa:	2b00      	cmp	r3, #0
     bfc:	d005      	beq.n	c0a <udc_process_setup+0xd2>
     bfe:	2b02      	cmp	r3, #2
     c00:	d000      	beq.n	c04 <udc_process_setup+0xcc>
     c02:	e148      	b.n	e96 <udc_process_setup+0x35e>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
     c04:	4c8e      	ldr	r4, [pc, #568]	; (e40 <udc_process_setup+0x308>)
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     c06:	210f      	movs	r1, #15
     c08:	e006      	b.n	c18 <udc_process_setup+0xe0>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     c0a:	488e      	ldr	r0, [pc, #568]	; (e44 <udc_process_setup+0x30c>)
     c0c:	2104      	movs	r1, #4
     c0e:	4b8a      	ldr	r3, [pc, #552]	; (e38 <udc_process_setup+0x300>)
     c10:	4798      	blx	r3
     c12:	e011      	b.n	c38 <udc_process_setup+0x100>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
     c14:	4c8c      	ldr	r4, [pc, #560]	; (e48 <udc_process_setup+0x310>)
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     c16:	2105      	movs	r1, #5
     c18:	4a8c      	ldr	r2, [pc, #560]	; (e4c <udc_process_setup+0x314>)
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     c1a:	2300      	movs	r3, #0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     c1c:	5ce0      	ldrb	r0, [r4, r3]
     c1e:	8050      	strh	r0, [r2, #2]
     c20:	3301      	adds	r3, #1
     c22:	3202      	adds	r2, #2
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
     c24:	b2d8      	uxtb	r0, r3
     c26:	4288      	cmp	r0, r1
     c28:	d3f8      	bcc.n	c1c <udc_process_setup+0xe4>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     c2a:	0049      	lsls	r1, r1, #1
     c2c:	3102      	adds	r1, #2
     c2e:	4887      	ldr	r0, [pc, #540]	; (e4c <udc_process_setup+0x314>)
     c30:	7001      	strb	r1, [r0, #0]
		udd_set_setup_payload(
     c32:	b289      	uxth	r1, r1
     c34:	4b80      	ldr	r3, [pc, #512]	; (e38 <udc_process_setup+0x300>)
     c36:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     c38:	4b7d      	ldr	r3, [pc, #500]	; (e30 <udc_process_setup+0x2f8>)
     c3a:	88da      	ldrh	r2, [r3, #6]
     c3c:	899b      	ldrh	r3, [r3, #12]
     c3e:	4293      	cmp	r3, r2
     c40:	d800      	bhi.n	c44 <udc_process_setup+0x10c>
     c42:	e183      	b.n	f4c <udc_process_setup+0x414>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     c44:	4b7a      	ldr	r3, [pc, #488]	; (e30 <udc_process_setup+0x2f8>)
     c46:	819a      	strh	r2, [r3, #12]
     c48:	e180      	b.n	f4c <udc_process_setup+0x414>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     c4a:	2a01      	cmp	r2, #1
     c4c:	d000      	beq.n	c50 <udc_process_setup+0x118>
     c4e:	e122      	b.n	e96 <udc_process_setup+0x35e>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     c50:	487f      	ldr	r0, [pc, #508]	; (e50 <udc_process_setup+0x318>)
     c52:	2101      	movs	r1, #1
     c54:	4b78      	ldr	r3, [pc, #480]	; (e38 <udc_process_setup+0x300>)
     c56:	4798      	blx	r3
     c58:	e178      	b.n	f4c <udc_process_setup+0x414>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     c5a:	2b01      	cmp	r3, #1
     c5c:	d127      	bne.n	cae <udc_process_setup+0x176>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     c5e:	4974      	ldr	r1, [pc, #464]	; (e30 <udc_process_setup+0x2f8>)
     c60:	7849      	ldrb	r1, [r1, #1]
     c62:	290a      	cmp	r1, #10
     c64:	d123      	bne.n	cae <udc_process_setup+0x176>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     c66:	2a01      	cmp	r2, #1
     c68:	d000      	beq.n	c6c <udc_process_setup+0x134>
     c6a:	e114      	b.n	e96 <udc_process_setup+0x35e>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     c6c:	4b78      	ldr	r3, [pc, #480]	; (e50 <udc_process_setup+0x318>)
     c6e:	781b      	ldrb	r3, [r3, #0]
     c70:	2b00      	cmp	r3, #0
     c72:	d100      	bne.n	c76 <udc_process_setup+0x13e>
     c74:	e10f      	b.n	e96 <udc_process_setup+0x35e>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     c76:	4b6e      	ldr	r3, [pc, #440]	; (e30 <udc_process_setup+0x2f8>)
     c78:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     c7a:	4b76      	ldr	r3, [pc, #472]	; (e54 <udc_process_setup+0x31c>)
     c7c:	681d      	ldr	r5, [r3, #0]
     c7e:	682b      	ldr	r3, [r5, #0]
     c80:	791b      	ldrb	r3, [r3, #4]
     c82:	42a3      	cmp	r3, r4
     c84:	d800      	bhi.n	c88 <udc_process_setup+0x150>
     c86:	e106      	b.n	e96 <udc_process_setup+0x35e>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     c88:	1c20      	adds	r0, r4, #0
     c8a:	2100      	movs	r1, #0
     c8c:	4b72      	ldr	r3, [pc, #456]	; (e58 <udc_process_setup+0x320>)
     c8e:	4798      	blx	r3
     c90:	2800      	cmp	r0, #0
     c92:	d100      	bne.n	c96 <udc_process_setup+0x15e>
     c94:	e0ff      	b.n	e96 <udc_process_setup+0x35e>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     c96:	686b      	ldr	r3, [r5, #4]
     c98:	00a4      	lsls	r4, r4, #2
	udc_iface_setting = udi_api->getsetting();
     c9a:	58e3      	ldr	r3, [r4, r3]
     c9c:	68db      	ldr	r3, [r3, #12]
     c9e:	4798      	blx	r3
     ca0:	4b6e      	ldr	r3, [pc, #440]	; (e5c <udc_process_setup+0x324>)
     ca2:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     ca4:	1c18      	adds	r0, r3, #0
     ca6:	2101      	movs	r1, #1
     ca8:	4b63      	ldr	r3, [pc, #396]	; (e38 <udc_process_setup+0x300>)
     caa:	4798      	blx	r3
     cac:	e14e      	b.n	f4c <udc_process_setup+0x414>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     cae:	2b02      	cmp	r3, #2
     cb0:	d000      	beq.n	cb4 <udc_process_setup+0x17c>
     cb2:	e0f0      	b.n	e96 <udc_process_setup+0x35e>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     cb4:	4b5e      	ldr	r3, [pc, #376]	; (e30 <udc_process_setup+0x2f8>)
     cb6:	785b      	ldrb	r3, [r3, #1]
				break;
			}
		}
#endif
	}
	return false;
     cb8:	2000      	movs	r0, #0
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     cba:	2b00      	cmp	r3, #0
     cbc:	d000      	beq.n	cc0 <udc_process_setup+0x188>
     cbe:	e0e8      	b.n	e92 <udc_process_setup+0x35a>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     cc0:	2a02      	cmp	r2, #2
     cc2:	d000      	beq.n	cc6 <udc_process_setup+0x18e>
     cc4:	e0e7      	b.n	e96 <udc_process_setup+0x35e>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     cc6:	4b5a      	ldr	r3, [pc, #360]	; (e30 <udc_process_setup+0x2f8>)
     cc8:	7918      	ldrb	r0, [r3, #4]
     cca:	4b65      	ldr	r3, [pc, #404]	; (e60 <udc_process_setup+0x328>)
     ccc:	4798      	blx	r3
     cce:	4b65      	ldr	r3, [pc, #404]	; (e64 <udc_process_setup+0x32c>)
     cd0:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     cd2:	1c18      	adds	r0, r3, #0
     cd4:	2102      	movs	r1, #2
     cd6:	4b58      	ldr	r3, [pc, #352]	; (e38 <udc_process_setup+0x300>)
     cd8:	4798      	blx	r3
     cda:	e137      	b.n	f4c <udc_process_setup+0x414>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     cdc:	221f      	movs	r2, #31
     cde:	4013      	ands	r3, r2
     ce0:	d162      	bne.n	da8 <udc_process_setup+0x270>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     ce2:	4a53      	ldr	r2, [pc, #332]	; (e30 <udc_process_setup+0x2f8>)
     ce4:	7852      	ldrb	r2, [r2, #1]
     ce6:	2a03      	cmp	r2, #3
     ce8:	d100      	bne.n	cec <udc_process_setup+0x1b4>
     cea:	e0cf      	b.n	e8c <udc_process_setup+0x354>
     cec:	b2d1      	uxtb	r1, r2
     cee:	2903      	cmp	r1, #3
     cf0:	d802      	bhi.n	cf8 <udc_process_setup+0x1c0>
     cf2:	2a01      	cmp	r2, #1
     cf4:	d00e      	beq.n	d14 <udc_process_setup+0x1dc>
     cf6:	e057      	b.n	da8 <udc_process_setup+0x270>
     cf8:	2a05      	cmp	r2, #5
     cfa:	d002      	beq.n	d02 <udc_process_setup+0x1ca>
     cfc:	2a09      	cmp	r2, #9
     cfe:	d019      	beq.n	d34 <udc_process_setup+0x1fc>
     d00:	e052      	b.n	da8 <udc_process_setup+0x270>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     d02:	4b4b      	ldr	r3, [pc, #300]	; (e30 <udc_process_setup+0x2f8>)
     d04:	88db      	ldrh	r3, [r3, #6]
     d06:	2b00      	cmp	r3, #0
     d08:	d000      	beq.n	d0c <udc_process_setup+0x1d4>
     d0a:	e0c4      	b.n	e96 <udc_process_setup+0x35e>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     d0c:	4a56      	ldr	r2, [pc, #344]	; (e68 <udc_process_setup+0x330>)
     d0e:	4b48      	ldr	r3, [pc, #288]	; (e30 <udc_process_setup+0x2f8>)
     d10:	611a      	str	r2, [r3, #16]
     d12:	e11b      	b.n	f4c <udc_process_setup+0x414>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     d14:	4b46      	ldr	r3, [pc, #280]	; (e30 <udc_process_setup+0x2f8>)
     d16:	88db      	ldrh	r3, [r3, #6]
     d18:	2b00      	cmp	r3, #0
     d1a:	d000      	beq.n	d1e <udc_process_setup+0x1e6>
     d1c:	e0bb      	b.n	e96 <udc_process_setup+0x35e>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     d1e:	4b44      	ldr	r3, [pc, #272]	; (e30 <udc_process_setup+0x2f8>)
     d20:	885b      	ldrh	r3, [r3, #2]
     d22:	2b01      	cmp	r3, #1
     d24:	d000      	beq.n	d28 <udc_process_setup+0x1f0>
     d26:	e0b6      	b.n	e96 <udc_process_setup+0x35e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     d28:	4a42      	ldr	r2, [pc, #264]	; (e34 <udc_process_setup+0x2fc>)
     d2a:	8813      	ldrh	r3, [r2, #0]
     d2c:	2102      	movs	r1, #2
     d2e:	438b      	bics	r3, r1
     d30:	8013      	strh	r3, [r2, #0]
     d32:	e10b      	b.n	f4c <udc_process_setup+0x414>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     d34:	4b3e      	ldr	r3, [pc, #248]	; (e30 <udc_process_setup+0x2f8>)
     d36:	88db      	ldrh	r3, [r3, #6]
     d38:	2b00      	cmp	r3, #0
     d3a:	d000      	beq.n	d3e <udc_process_setup+0x206>
     d3c:	e0ab      	b.n	e96 <udc_process_setup+0x35e>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     d3e:	4b4b      	ldr	r3, [pc, #300]	; (e6c <udc_process_setup+0x334>)
     d40:	4798      	blx	r3
     d42:	2800      	cmp	r0, #0
     d44:	d100      	bne.n	d48 <udc_process_setup+0x210>
     d46:	e0a6      	b.n	e96 <udc_process_setup+0x35e>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     d48:	4b39      	ldr	r3, [pc, #228]	; (e30 <udc_process_setup+0x2f8>)
     d4a:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
     d4c:	4b3b      	ldr	r3, [pc, #236]	; (e3c <udc_process_setup+0x304>)
     d4e:	681b      	ldr	r3, [r3, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     d50:	7c5b      	ldrb	r3, [r3, #17]
     d52:	429a      	cmp	r2, r3
     d54:	dd00      	ble.n	d58 <udc_process_setup+0x220>
     d56:	e09e      	b.n	e96 <udc_process_setup+0x35e>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     d58:	4b45      	ldr	r3, [pc, #276]	; (e70 <udc_process_setup+0x338>)
     d5a:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     d5c:	4b34      	ldr	r3, [pc, #208]	; (e30 <udc_process_setup+0x2f8>)
     d5e:	789b      	ldrb	r3, [r3, #2]
     d60:	4a3b      	ldr	r2, [pc, #236]	; (e50 <udc_process_setup+0x318>)
     d62:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
     d64:	2b00      	cmp	r3, #0
     d66:	d100      	bne.n	d6a <udc_process_setup+0x232>
     d68:	e0f0      	b.n	f4c <udc_process_setup+0x414>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     d6a:	4a42      	ldr	r2, [pc, #264]	; (e74 <udc_process_setup+0x33c>)
     d6c:	4694      	mov	ip, r2
     d6e:	4463      	add	r3, ip
     d70:	00db      	lsls	r3, r3, #3
     d72:	4a32      	ldr	r2, [pc, #200]	; (e3c <udc_process_setup+0x304>)
     d74:	6852      	ldr	r2, [r2, #4]
     d76:	18d3      	adds	r3, r2, r3
     d78:	4a36      	ldr	r2, [pc, #216]	; (e54 <udc_process_setup+0x31c>)
     d7a:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d7c:	681b      	ldr	r3, [r3, #0]
     d7e:	791b      	ldrb	r3, [r3, #4]
     d80:	2b00      	cmp	r3, #0
     d82:	d100      	bne.n	d86 <udc_process_setup+0x24e>
     d84:	e0e2      	b.n	f4c <udc_process_setup+0x414>
     d86:	2400      	movs	r4, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     d88:	4d3b      	ldr	r5, [pc, #236]	; (e78 <udc_process_setup+0x340>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d8a:	1c16      	adds	r6, r2, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     d8c:	1c20      	adds	r0, r4, #0
     d8e:	2100      	movs	r1, #0
     d90:	47a8      	blx	r5
     d92:	2800      	cmp	r0, #0
     d94:	d100      	bne.n	d98 <udc_process_setup+0x260>
     d96:	e07e      	b.n	e96 <udc_process_setup+0x35e>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     d98:	3401      	adds	r4, #1
     d9a:	b2e4      	uxtb	r4, r4
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d9c:	6833      	ldr	r3, [r6, #0]
     d9e:	681b      	ldr	r3, [r3, #0]
     da0:	791b      	ldrb	r3, [r3, #4]
     da2:	42a3      	cmp	r3, r4
     da4:	d8f2      	bhi.n	d8c <udc_process_setup+0x254>
     da6:	e0d1      	b.n	f4c <udc_process_setup+0x414>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     da8:	2b01      	cmp	r3, #1
     daa:	d118      	bne.n	dde <udc_process_setup+0x2a6>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     dac:	4a20      	ldr	r2, [pc, #128]	; (e30 <udc_process_setup+0x2f8>)
     dae:	7852      	ldrb	r2, [r2, #1]
     db0:	2a0b      	cmp	r2, #11
     db2:	d114      	bne.n	dde <udc_process_setup+0x2a6>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     db4:	4b1e      	ldr	r3, [pc, #120]	; (e30 <udc_process_setup+0x2f8>)
     db6:	88db      	ldrh	r3, [r3, #6]
     db8:	2b00      	cmp	r3, #0
     dba:	d16c      	bne.n	e96 <udc_process_setup+0x35e>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     dbc:	4b24      	ldr	r3, [pc, #144]	; (e50 <udc_process_setup+0x318>)
     dbe:	781b      	ldrb	r3, [r3, #0]
     dc0:	2b00      	cmp	r3, #0
     dc2:	d068      	beq.n	e96 <udc_process_setup+0x35e>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     dc4:	4b1a      	ldr	r3, [pc, #104]	; (e30 <udc_process_setup+0x2f8>)
     dc6:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     dc8:	885c      	ldrh	r4, [r3, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     dca:	1c28      	adds	r0, r5, #0
     dcc:	4b2b      	ldr	r3, [pc, #172]	; (e7c <udc_process_setup+0x344>)
     dce:	4798      	blx	r3
     dd0:	2800      	cmp	r0, #0
     dd2:	d060      	beq.n	e96 <udc_process_setup+0x35e>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     dd4:	b2e1      	uxtb	r1, r4
     dd6:	1c28      	adds	r0, r5, #0
     dd8:	4b27      	ldr	r3, [pc, #156]	; (e78 <udc_process_setup+0x340>)
     dda:	4798      	blx	r3
     ddc:	e059      	b.n	e92 <udc_process_setup+0x35a>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     dde:	2b02      	cmp	r3, #2
     de0:	d159      	bne.n	e96 <udc_process_setup+0x35e>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     de2:	4b13      	ldr	r3, [pc, #76]	; (e30 <udc_process_setup+0x2f8>)
     de4:	785b      	ldrb	r3, [r3, #1]
     de6:	2b01      	cmp	r3, #1
     de8:	d002      	beq.n	df0 <udc_process_setup+0x2b8>
     dea:	2b03      	cmp	r3, #3
     dec:	d00d      	beq.n	e0a <udc_process_setup+0x2d2>
     dee:	e04f      	b.n	e90 <udc_process_setup+0x358>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     df0:	4b0f      	ldr	r3, [pc, #60]	; (e30 <udc_process_setup+0x2f8>)
     df2:	88db      	ldrh	r3, [r3, #6]
     df4:	2b00      	cmp	r3, #0
     df6:	d14e      	bne.n	e96 <udc_process_setup+0x35e>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     df8:	4b0d      	ldr	r3, [pc, #52]	; (e30 <udc_process_setup+0x2f8>)
     dfa:	885b      	ldrh	r3, [r3, #2]
     dfc:	2b00      	cmp	r3, #0
     dfe:	d14a      	bne.n	e96 <udc_process_setup+0x35e>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     e00:	4b0b      	ldr	r3, [pc, #44]	; (e30 <udc_process_setup+0x2f8>)
     e02:	7918      	ldrb	r0, [r3, #4]
     e04:	4b1e      	ldr	r3, [pc, #120]	; (e80 <udc_process_setup+0x348>)
     e06:	4798      	blx	r3
     e08:	e043      	b.n	e92 <udc_process_setup+0x35a>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     e0a:	4b09      	ldr	r3, [pc, #36]	; (e30 <udc_process_setup+0x2f8>)
     e0c:	88db      	ldrh	r3, [r3, #6]
     e0e:	2b00      	cmp	r3, #0
     e10:	d141      	bne.n	e96 <udc_process_setup+0x35e>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     e12:	4b07      	ldr	r3, [pc, #28]	; (e30 <udc_process_setup+0x2f8>)
     e14:	885b      	ldrh	r3, [r3, #2]
     e16:	2b00      	cmp	r3, #0
     e18:	d13d      	bne.n	e96 <udc_process_setup+0x35e>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     e1a:	4c05      	ldr	r4, [pc, #20]	; (e30 <udc_process_setup+0x2f8>)
     e1c:	7920      	ldrb	r0, [r4, #4]
     e1e:	4b19      	ldr	r3, [pc, #100]	; (e84 <udc_process_setup+0x34c>)
     e20:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     e22:	7920      	ldrb	r0, [r4, #4]
     e24:	4b18      	ldr	r3, [pc, #96]	; (e88 <udc_process_setup+0x350>)
     e26:	4798      	blx	r3
     e28:	e033      	b.n	e92 <udc_process_setup+0x35a>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     e2a:	2000      	movs	r0, #0
     e2c:	e031      	b.n	e92 <udc_process_setup+0x35a>
     e2e:	46c0      	nop			; (mov r8, r8)
     e30:	200009b0 	.word	0x200009b0
     e34:	20000664 	.word	0x20000664
     e38:	00001d51 	.word	0x00001d51
     e3c:	20000084 	.word	0x20000084
     e40:	20000028 	.word	0x20000028
     e44:	20000060 	.word	0x20000060
     e48:	20000038 	.word	0x20000038
     e4c:	20000040 	.word	0x20000040
     e50:	20000668 	.word	0x20000668
     e54:	2000065c 	.word	0x2000065c
     e58:	00000979 	.word	0x00000979
     e5c:	20000660 	.word	0x20000660
     e60:	000019d1 	.word	0x000019d1
     e64:	20000662 	.word	0x20000662
     e68:	00000961 	.word	0x00000961
     e6c:	00001d41 	.word	0x00001d41
     e70:	00000aad 	.word	0x00000aad
     e74:	1fffffff 	.word	0x1fffffff
     e78:	00000a49 	.word	0x00000a49
     e7c:	000009e1 	.word	0x000009e1
     e80:	00001b15 	.word	0x00001b15
     e84:	00001811 	.word	0x00001811
     e88:	000019e5 	.word	0x000019e5
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
     e8c:	2000      	movs	r0, #0
     e8e:	e000      	b.n	e92 <udc_process_setup+0x35a>
				break;
			}
		}
#endif
	}
	return false;
     e90:	2000      	movs	r0, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
     e92:	2800      	cmp	r0, #0
     e94:	d15b      	bne.n	f4e <udc_process_setup+0x416>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     e96:	4b2e      	ldr	r3, [pc, #184]	; (f50 <udc_process_setup+0x418>)
     e98:	781b      	ldrb	r3, [r3, #0]
     e9a:	221f      	movs	r2, #31
     e9c:	4013      	ands	r3, r2
     e9e:	2b01      	cmp	r3, #1
     ea0:	d120      	bne.n	ee4 <udc_process_setup+0x3ac>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     ea2:	4b2c      	ldr	r3, [pc, #176]	; (f54 <udc_process_setup+0x41c>)
     ea4:	781b      	ldrb	r3, [r3, #0]
     ea6:	2b00      	cmp	r3, #0
     ea8:	d01c      	beq.n	ee4 <udc_process_setup+0x3ac>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     eaa:	4b29      	ldr	r3, [pc, #164]	; (f50 <udc_process_setup+0x418>)
     eac:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     eae:	4b2a      	ldr	r3, [pc, #168]	; (f58 <udc_process_setup+0x420>)
     eb0:	681d      	ldr	r5, [r3, #0]
     eb2:	682b      	ldr	r3, [r5, #0]
     eb4:	791b      	ldrb	r3, [r3, #4]
     eb6:	42a3      	cmp	r3, r4
     eb8:	d914      	bls.n	ee4 <udc_process_setup+0x3ac>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     eba:	1c20      	adds	r0, r4, #0
     ebc:	2100      	movs	r1, #0
     ebe:	4b27      	ldr	r3, [pc, #156]	; (f5c <udc_process_setup+0x424>)
     ec0:	4798      	blx	r3
     ec2:	2800      	cmp	r0, #0
     ec4:	d00e      	beq.n	ee4 <udc_process_setup+0x3ac>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     ec6:	686b      	ldr	r3, [r5, #4]
     ec8:	00a2      	lsls	r2, r4, #2
     eca:	58d5      	ldr	r5, [r2, r3]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     ecc:	68eb      	ldr	r3, [r5, #12]
     ece:	4798      	blx	r3
     ed0:	1c01      	adds	r1, r0, #0
     ed2:	1c20      	adds	r0, r4, #0
     ed4:	4b21      	ldr	r3, [pc, #132]	; (f5c <udc_process_setup+0x424>)
     ed6:	4798      	blx	r3
     ed8:	2800      	cmp	r0, #0
     eda:	d003      	beq.n	ee4 <udc_process_setup+0x3ac>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
     edc:	68ab      	ldr	r3, [r5, #8]
     ede:	4798      	blx	r3
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
     ee0:	2800      	cmp	r0, #0
     ee2:	d134      	bne.n	f4e <udc_process_setup+0x416>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     ee4:	4b1a      	ldr	r3, [pc, #104]	; (f50 <udc_process_setup+0x418>)
     ee6:	781b      	ldrb	r3, [r3, #0]
     ee8:	221f      	movs	r2, #31
     eea:	4013      	ands	r3, r2
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     eec:	2000      	movs	r0, #0
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     eee:	2b02      	cmp	r3, #2
     ef0:	d12d      	bne.n	f4e <udc_process_setup+0x416>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     ef2:	4b18      	ldr	r3, [pc, #96]	; (f54 <udc_process_setup+0x41c>)
     ef4:	781b      	ldrb	r3, [r3, #0]
     ef6:	2b00      	cmp	r3, #0
     ef8:	d029      	beq.n	f4e <udc_process_setup+0x416>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     efa:	4b17      	ldr	r3, [pc, #92]	; (f58 <udc_process_setup+0x420>)
     efc:	681b      	ldr	r3, [r3, #0]
     efe:	681a      	ldr	r2, [r3, #0]
     f00:	7912      	ldrb	r2, [r2, #4]
     f02:	2a00      	cmp	r2, #0
     f04:	d018      	beq.n	f38 <udc_process_setup+0x400>
     f06:	2400      	movs	r4, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     f08:	4e14      	ldr	r6, [pc, #80]	; (f5c <udc_process_setup+0x424>)
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f0a:	4f13      	ldr	r7, [pc, #76]	; (f58 <udc_process_setup+0x420>)
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     f0c:	685b      	ldr	r3, [r3, #4]
     f0e:	00a2      	lsls	r2, r4, #2
     f10:	58d5      	ldr	r5, [r2, r3]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     f12:	68eb      	ldr	r3, [r5, #12]
     f14:	4798      	blx	r3
     f16:	1c01      	adds	r1, r0, #0
     f18:	1c20      	adds	r0, r4, #0
     f1a:	47b0      	blx	r6
     f1c:	2800      	cmp	r0, #0
     f1e:	d016      	beq.n	f4e <udc_process_setup+0x416>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
     f20:	68ab      	ldr	r3, [r5, #8]
     f22:	4798      	blx	r3
     f24:	2800      	cmp	r0, #0
     f26:	d112      	bne.n	f4e <udc_process_setup+0x416>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     f28:	3401      	adds	r4, #1
     f2a:	b2e4      	uxtb	r4, r4
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f2c:	683b      	ldr	r3, [r7, #0]
     f2e:	681a      	ldr	r2, [r3, #0]
     f30:	7912      	ldrb	r2, [r2, #4]
     f32:	42a2      	cmp	r2, r4
     f34:	d8ea      	bhi.n	f0c <udc_process_setup+0x3d4>
     f36:	e00a      	b.n	f4e <udc_process_setup+0x416>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
     f38:	2000      	movs	r0, #0
     f3a:	e008      	b.n	f4e <udc_process_setup+0x416>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     f3c:	2260      	movs	r2, #96	; 0x60
     f3e:	421a      	tst	r2, r3
     f40:	d1a9      	bne.n	e96 <udc_process_setup+0x35e>
     f42:	e6cb      	b.n	cdc <udc_process_setup+0x1a4>
     f44:	2160      	movs	r1, #96	; 0x60
     f46:	4219      	tst	r1, r3
     f48:	d1a5      	bne.n	e96 <udc_process_setup+0x35e>
     f4a:	e607      	b.n	b5c <udc_process_setup+0x24>
		if (udc_reqstd()) {
			return true;
     f4c:	2001      	movs	r0, #1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
     f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f50:	200009b0 	.word	0x200009b0
     f54:	20000668 	.word	0x20000668
     f58:	2000065c 	.word	0x2000065c
     f5c:	00000979 	.word	0x00000979

00000f60 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
     f60:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
     f62:	4b0c      	ldr	r3, [pc, #48]	; (f94 <EVSYS_Handler+0x34>)
     f64:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     f66:	2186      	movs	r1, #134	; 0x86
     f68:	05c9      	lsls	r1, r1, #23
     f6a:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
     f6c:	6898      	ldr	r0, [r3, #8]
     f6e:	4302      	orrs	r2, r0
     f70:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     f72:	4b09      	ldr	r3, [pc, #36]	; (f98 <EVSYS_Handler+0x38>)
     f74:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     f76:	2c00      	cmp	r4, #0
     f78:	d005      	beq.n	f86 <EVSYS_Handler+0x26>
		current_hook->hook_func(current_hook->resource);
     f7a:	6820      	ldr	r0, [r4, #0]
     f7c:	6863      	ldr	r3, [r4, #4]
     f7e:	4798      	blx	r3
		current_hook = current_hook->next;
     f80:	68a4      	ldr	r4, [r4, #8]
	_events_inst.interrupt_flag_buffer |= flag;
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;

	/* Traverse the linked list */
	while (current_hook != NULL) {
     f82:	2c00      	cmp	r4, #0
     f84:	d1f9      	bne.n	f7a <EVSYS_Handler+0x1a>
		current_hook->hook_func(current_hook->resource);
		current_hook = current_hook->next;
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     f86:	4b03      	ldr	r3, [pc, #12]	; (f94 <EVSYS_Handler+0x34>)
     f88:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
     f8a:	689a      	ldr	r2, [r3, #8]
     f8c:	438a      	bics	r2, r1
     f8e:	609a      	str	r2, [r3, #8]
}
     f90:	bd10      	pop	{r4, pc}
     f92:	46c0      	nop			; (mov r8, r8)
     f94:	20000064 	.word	0x20000064
     f98:	0fff0fff 	.word	0x0fff0fff

00000f9c <_system_events_init>:

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     f9c:	4906      	ldr	r1, [pc, #24]	; (fb8 <_system_events_init+0x1c>)
     f9e:	6a0b      	ldr	r3, [r1, #32]
     fa0:	2201      	movs	r2, #1
     fa2:	4313      	orrs	r3, r2
     fa4:	620b      	str	r3, [r1, #32]
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_EVSYS);
#endif

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRLA.reg = EVSYS_CTRLA_SWRST;
     fa6:	2386      	movs	r3, #134	; 0x86
     fa8:	05db      	lsls	r3, r3, #23
     faa:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRLA.reg & EVSYS_CTRLA_SWRST) {
     fac:	1c19      	adds	r1, r3, #0
     fae:	780b      	ldrb	r3, [r1, #0]
     fb0:	4213      	tst	r3, r2
     fb2:	d1fc      	bne.n	fae <_system_events_init+0x12>
	}
}
     fb4:	4770      	bx	lr
     fb6:	46c0      	nop			; (mov r8, r8)
     fb8:	40000400 	.word	0x40000400

00000fbc <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     fbc:	4a06      	ldr	r2, [pc, #24]	; (fd8 <_extint_enable+0x1c>)
     fbe:	7811      	ldrb	r1, [r2, #0]
     fc0:	2302      	movs	r3, #2
     fc2:	430b      	orrs	r3, r1
     fc4:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     fc6:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     fc8:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     fca:	6853      	ldr	r3, [r2, #4]
     fcc:	4219      	tst	r1, r3
     fce:	d1fc      	bne.n	fca <_extint_enable+0xe>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     fd0:	6853      	ldr	r3, [r2, #4]
     fd2:	4218      	tst	r0, r3
     fd4:	d1f9      	bne.n	fca <_extint_enable+0xe>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     fd6:	4770      	bx	lr
     fd8:	40002400 	.word	0x40002400

00000fdc <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
     fdc:	b500      	push	{lr}
     fde:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     fe0:	4a18      	ldr	r2, [pc, #96]	; (1044 <_system_extint_init+0x68>)
     fe2:	6953      	ldr	r3, [r2, #20]
     fe4:	2180      	movs	r1, #128	; 0x80
     fe6:	0089      	lsls	r1, r1, #2
     fe8:	430b      	orrs	r3, r1
     fea:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     fec:	a901      	add	r1, sp, #4
     fee:	2300      	movs	r3, #0
     ff0:	700b      	strb	r3, [r1, #0]
#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     ff2:	2003      	movs	r0, #3
     ff4:	4b14      	ldr	r3, [pc, #80]	; (1048 <_system_extint_init+0x6c>)
     ff6:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
     ff8:	2003      	movs	r0, #3
     ffa:	4b14      	ldr	r3, [pc, #80]	; (104c <_system_extint_init+0x70>)
     ffc:	4798      	blx	r3
#endif

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     ffe:	4a14      	ldr	r2, [pc, #80]	; (1050 <_system_extint_init+0x74>)
    1000:	7811      	ldrb	r1, [r2, #0]
    1002:	2301      	movs	r3, #1
    1004:	430b      	orrs	r3, r1
    1006:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    1008:	2102      	movs	r1, #2
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    100a:	2001      	movs	r0, #1
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    100c:	6853      	ldr	r3, [r2, #4]
    100e:	4219      	tst	r1, r3
    1010:	d1fc      	bne.n	100c <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    1012:	6853      	ldr	r3, [r2, #4]
    1014:	4218      	tst	r0, r3
    1016:	d009      	beq.n	102c <_system_extint_init+0x50>
    1018:	e7f8      	b.n	100c <_system_extint_init+0x30>

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    101a:	c304      	stmia	r3!, {r2}
#endif

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    101c:	428b      	cmp	r3, r1
    101e:	d1fc      	bne.n	101a <_system_extint_init+0x3e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1020:	2208      	movs	r2, #8
    1022:	4b0c      	ldr	r3, [pc, #48]	; (1054 <_system_extint_init+0x78>)
    1024:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
    1026:	4b0c      	ldr	r3, [pc, #48]	; (1058 <_system_extint_init+0x7c>)
    1028:	4798      	blx	r3
    102a:	e009      	b.n	1040 <_system_extint_init+0x64>
		/* Wait for all hardware modules to complete synchronization */
	}

#if (EXTINT_CLOCK_SELECTION == EXTINT_CLK_GCLK)
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
    102c:	4a08      	ldr	r2, [pc, #32]	; (1050 <_system_extint_init+0x74>)
    102e:	7813      	ldrb	r3, [r2, #0]
    1030:	2110      	movs	r1, #16
    1032:	438b      	bics	r3, r1
    1034:	7013      	strb	r3, [r2, #0]
    1036:	4b09      	ldr	r3, [pc, #36]	; (105c <_system_extint_init+0x80>)
    1038:	1c19      	adds	r1, r3, #0
    103a:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    103c:	2200      	movs	r2, #0
    103e:	e7ec      	b.n	101a <_system_extint_init+0x3e>
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
}
    1040:	b003      	add	sp, #12
    1042:	bd00      	pop	{pc}
    1044:	40000400 	.word	0x40000400
    1048:	0000355d 	.word	0x0000355d
    104c:	000034f5 	.word	0x000034f5
    1050:	40002400 	.word	0x40002400
    1054:	e000e100 	.word	0xe000e100
    1058:	00000fbd 	.word	0x00000fbd
    105c:	20000738 	.word	0x20000738

00001060 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    1060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1062:	465f      	mov	r7, fp
    1064:	4656      	mov	r6, sl
    1066:	464d      	mov	r5, r9
    1068:	4644      	mov	r4, r8
    106a:	b4f0      	push	{r4, r5, r6, r7}
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
	struct rtc_module *module = _rtc_instance[instance_index];
    106c:	4b23      	ldr	r3, [pc, #140]	; (10fc <RTC_Handler+0x9c>)
    106e:	681b      	ldr	r3, [r3, #0]
    1070:	469a      	mov	sl, r3

	Rtc *const rtc_module = module->hw;
    1072:	681e      	ldr	r6, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    1074:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
	callback_mask &= module->registered_callback;
    1076:	4652      	mov	r2, sl
    1078:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    107a:	401a      	ands	r2, r3
    107c:	4690      	mov	r8, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    107e:	89b3      	ldrh	r3, [r6, #12]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    1080:	8972      	ldrh	r2, [r6, #10]
    1082:	4013      	ands	r3, r2

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    1084:	b21a      	sxth	r2, r3
    1086:	2a00      	cmp	r2, #0
    1088:	da08      	bge.n	109c <RTC_Handler+0x3c>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    108a:	4643      	mov	r3, r8
    108c:	059b      	lsls	r3, r3, #22
    108e:	d502      	bpl.n	1096 <RTC_Handler+0x36>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    1090:	4653      	mov	r3, sl
    1092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1094:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    1096:	4b1a      	ldr	r3, [pc, #104]	; (1100 <RTC_Handler+0xa0>)
    1098:	81b3      	strh	r3, [r6, #12]
    109a:	e028      	b.n	10ee <RTC_Handler+0x8e>
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_TAMPER;
#endif
	}else if (interrupt_status & RTC_MODE2_INTFLAG_PER(0xff)) {
    109c:	27ff      	movs	r7, #255	; 0xff
    109e:	401f      	ands	r7, r3
    10a0:	d01a      	beq.n	10d8 <RTC_Handler+0x78>
    10a2:	2400      	movs	r4, #0
		uint8_t i  = 0;
		for (i = 0;i < RTC_PER_NUM;i++) {
			if ((interrupt_status & RTC_MODE2_INTFLAG_PER(1 << i))
    10a4:	2301      	movs	r3, #1
    10a6:	4699      	mov	r9, r3
			  && (callback_mask & (1 << i))) {
				module->callbacks[i]();
			}

			/* Clear interrupt flag */
			rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_PER(1<<i);
    10a8:	33fe      	adds	r3, #254	; 0xfe
    10aa:	469b      	mov	fp, r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_TAMPER;
#endif
	}else if (interrupt_status & RTC_MODE2_INTFLAG_PER(0xff)) {
		uint8_t i  = 0;
		for (i = 0;i < RTC_PER_NUM;i++) {
			if ((interrupt_status & RTC_MODE2_INTFLAG_PER(1 << i))
    10ac:	1c23      	adds	r3, r4, #0
    10ae:	464d      	mov	r5, r9
    10b0:	40a5      	lsls	r5, r4
    10b2:	422f      	tst	r7, r5
    10b4:	d009      	beq.n	10ca <RTC_Handler+0x6a>
			  && (callback_mask & (1 << i))) {
    10b6:	4642      	mov	r2, r8
    10b8:	4122      	asrs	r2, r4
    10ba:	4649      	mov	r1, r9
    10bc:	4211      	tst	r1, r2
    10be:	d004      	beq.n	10ca <RTC_Handler+0x6a>
				module->callbacks[i]();
    10c0:	3302      	adds	r3, #2
    10c2:	009b      	lsls	r3, r3, #2
    10c4:	4652      	mov	r2, sl
    10c6:	589b      	ldr	r3, [r3, r2]
    10c8:	4798      	blx	r3
			}

			/* Clear interrupt flag */
			rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_PER(1<<i);
    10ca:	465b      	mov	r3, fp
    10cc:	401d      	ands	r5, r3
    10ce:	81b5      	strh	r5, [r6, #12]
    10d0:	3401      	adds	r4, #1
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_TAMPER;
#endif
	}else if (interrupt_status & RTC_MODE2_INTFLAG_PER(0xff)) {
		uint8_t i  = 0;
		for (i = 0;i < RTC_PER_NUM;i++) {
    10d2:	2c08      	cmp	r4, #8
    10d4:	d1ea      	bne.n	10ac <RTC_Handler+0x4c>
    10d6:	e00a      	b.n	10ee <RTC_Handler+0x8e>
			}

			/* Clear interrupt flag */
			rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_PER(1<<i);
		}
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    10d8:	05db      	lsls	r3, r3, #23
    10da:	d508      	bpl.n	10ee <RTC_Handler+0x8e>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    10dc:	4643      	mov	r3, r8
    10de:	05db      	lsls	r3, r3, #23
    10e0:	d502      	bpl.n	10e8 <RTC_Handler+0x88>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    10e2:	4653      	mov	r3, sl
    10e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    10e6:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    10e8:	2380      	movs	r3, #128	; 0x80
    10ea:	005b      	lsls	r3, r3, #1
    10ec:	81b3      	strh	r3, [r6, #12]
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
	_rtc_interrupt_handler(0);
}
    10ee:	bc3c      	pop	{r2, r3, r4, r5}
    10f0:	4690      	mov	r8, r2
    10f2:	4699      	mov	r9, r3
    10f4:	46a2      	mov	sl, r4
    10f6:	46ab      	mov	fp, r5
    10f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    10fa:	46c0      	nop			; (mov r8, r8)
    10fc:	20000778 	.word	0x20000778
    1100:	ffff8000 	.word	0xffff8000

00001104 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1104:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    1106:	0080      	lsls	r0, r0, #2
    1108:	4b14      	ldr	r3, [pc, #80]	; (115c <_tc_interrupt_handler+0x58>)
    110a:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    110c:	682b      	ldr	r3, [r5, #0]
    110e:	7a9c      	ldrb	r4, [r3, #10]
    1110:	7e2b      	ldrb	r3, [r5, #24]
    1112:	401c      	ands	r4, r3
    1114:	7e6b      	ldrb	r3, [r5, #25]
    1116:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1118:	07e3      	lsls	r3, r4, #31
    111a:	d505      	bpl.n	1128 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    111c:	1c28      	adds	r0, r5, #0
    111e:	68ab      	ldr	r3, [r5, #8]
    1120:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1122:	2301      	movs	r3, #1
    1124:	682a      	ldr	r2, [r5, #0]
    1126:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1128:	07a3      	lsls	r3, r4, #30
    112a:	d505      	bpl.n	1138 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    112c:	1c28      	adds	r0, r5, #0
    112e:	68eb      	ldr	r3, [r5, #12]
    1130:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1132:	2302      	movs	r3, #2
    1134:	682a      	ldr	r2, [r5, #0]
    1136:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1138:	06e3      	lsls	r3, r4, #27
    113a:	d505      	bpl.n	1148 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    113c:	1c28      	adds	r0, r5, #0
    113e:	692b      	ldr	r3, [r5, #16]
    1140:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1142:	2310      	movs	r3, #16
    1144:	682a      	ldr	r2, [r5, #0]
    1146:	7293      	strb	r3, [r2, #10]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1148:	06a3      	lsls	r3, r4, #26
    114a:	d505      	bpl.n	1158 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    114c:	1c28      	adds	r0, r5, #0
    114e:	696b      	ldr	r3, [r5, #20]
    1150:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1152:	682b      	ldr	r3, [r5, #0]
    1154:	2220      	movs	r2, #32
    1156:	729a      	strb	r2, [r3, #10]
	}
}
    1158:	bd38      	pop	{r3, r4, r5, pc}
    115a:	46c0      	nop			; (mov r8, r8)
    115c:	2000077c 	.word	0x2000077c

00001160 <TC0_Handler>:
		{ \
			_tc_interrupt_handler(m); \
		}

#if (SAML21E) || (SAML21G)
	_TC_INTERRUPT_HANDLER(0,0)
    1160:	b508      	push	{r3, lr}
    1162:	2000      	movs	r0, #0
    1164:	4b01      	ldr	r3, [pc, #4]	; (116c <TC0_Handler+0xc>)
    1166:	4798      	blx	r3
    1168:	bd08      	pop	{r3, pc}
    116a:	46c0      	nop			; (mov r8, r8)
    116c:	00001105 	.word	0x00001105

00001170 <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
    1170:	b508      	push	{r3, lr}
    1172:	2001      	movs	r0, #1
    1174:	4b01      	ldr	r3, [pc, #4]	; (117c <TC1_Handler+0xc>)
    1176:	4798      	blx	r3
    1178:	bd08      	pop	{r3, pc}
    117a:	46c0      	nop			; (mov r8, r8)
    117c:	00001105 	.word	0x00001105

00001180 <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
    1180:	b508      	push	{r3, lr}
    1182:	2002      	movs	r0, #2
    1184:	4b01      	ldr	r3, [pc, #4]	; (118c <TC4_Handler+0xc>)
    1186:	4798      	blx	r3
    1188:	bd08      	pop	{r3, pc}
    118a:	46c0      	nop			; (mov r8, r8)
    118c:	00001105 	.word	0x00001105

00001190 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    1190:	b510      	push	{r4, lr}
    1192:	b082      	sub	sp, #8
    1194:	1c04      	adds	r4, r0, #0
	enum sleepmgr_mode sleep_mode[] = {
    1196:	a801      	add	r0, sp, #4
    1198:	4923      	ldr	r1, [pc, #140]	; (1228 <udd_sleep_mode+0x98>)
    119a:	2204      	movs	r2, #4
    119c:	4b23      	ldr	r3, [pc, #140]	; (122c <udd_sleep_mode+0x9c>)
    119e:	4798      	blx	r3
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    11a0:	4b23      	ldr	r3, [pc, #140]	; (1230 <udd_sleep_mode+0xa0>)
    11a2:	781b      	ldrb	r3, [r3, #0]
    11a4:	42a3      	cmp	r3, r4
    11a6:	d03d      	beq.n	1224 <udd_sleep_mode+0x94>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    11a8:	2c00      	cmp	r4, #0
    11aa:	d01a      	beq.n	11e2 <udd_sleep_mode+0x52>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
    11ac:	ab01      	add	r3, sp, #4
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    11ae:	5d1a      	ldrb	r2, [r3, r4]
    11b0:	4b20      	ldr	r3, [pc, #128]	; (1234 <udd_sleep_mode+0xa4>)
    11b2:	5c9b      	ldrb	r3, [r3, r2]
    11b4:	2bff      	cmp	r3, #255	; 0xff
    11b6:	d100      	bne.n	11ba <udd_sleep_mode+0x2a>
    11b8:	e7fe      	b.n	11b8 <udd_sleep_mode+0x28>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    11ba:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    11be:	b672      	cpsid	i
    11c0:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    11c4:	2000      	movs	r0, #0
    11c6:	491c      	ldr	r1, [pc, #112]	; (1238 <udd_sleep_mode+0xa8>)
    11c8:	7008      	strb	r0, [r1, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    11ca:	481a      	ldr	r0, [pc, #104]	; (1234 <udd_sleep_mode+0xa4>)
    11cc:	5c81      	ldrb	r1, [r0, r2]
    11ce:	3101      	adds	r1, #1
    11d0:	5481      	strb	r1, [r0, r2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    11d2:	2b00      	cmp	r3, #0
    11d4:	d105      	bne.n	11e2 <udd_sleep_mode+0x52>
		cpu_irq_enable();
    11d6:	2201      	movs	r2, #1
    11d8:	4b17      	ldr	r3, [pc, #92]	; (1238 <udd_sleep_mode+0xa8>)
    11da:	701a      	strb	r2, [r3, #0]
    11dc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    11e0:	b662      	cpsie	i
	}
	if (udd_state != UDD_STATE_OFF) {
    11e2:	4b13      	ldr	r3, [pc, #76]	; (1230 <udd_sleep_mode+0xa0>)
    11e4:	781b      	ldrb	r3, [r3, #0]
    11e6:	2b00      	cmp	r3, #0
    11e8:	d01a      	beq.n	1220 <udd_sleep_mode+0x90>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    11ea:	aa01      	add	r2, sp, #4
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    11ec:	5cd2      	ldrb	r2, [r2, r3]
    11ee:	4b11      	ldr	r3, [pc, #68]	; (1234 <udd_sleep_mode+0xa4>)
    11f0:	5c9b      	ldrb	r3, [r3, r2]
    11f2:	2b00      	cmp	r3, #0
    11f4:	d100      	bne.n	11f8 <udd_sleep_mode+0x68>
    11f6:	e7fe      	b.n	11f6 <udd_sleep_mode+0x66>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    11f8:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    11fc:	b672      	cpsid	i
    11fe:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1202:	2000      	movs	r0, #0
    1204:	490c      	ldr	r1, [pc, #48]	; (1238 <udd_sleep_mode+0xa8>)
    1206:	7008      	strb	r0, [r1, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    1208:	480a      	ldr	r0, [pc, #40]	; (1234 <udd_sleep_mode+0xa4>)
    120a:	5c81      	ldrb	r1, [r0, r2]
    120c:	3901      	subs	r1, #1
    120e:	5481      	strb	r1, [r0, r2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1210:	2b00      	cmp	r3, #0
    1212:	d105      	bne.n	1220 <udd_sleep_mode+0x90>
		cpu_irq_enable();
    1214:	2201      	movs	r2, #1
    1216:	4b08      	ldr	r3, [pc, #32]	; (1238 <udd_sleep_mode+0xa8>)
    1218:	701a      	strb	r2, [r3, #0]
    121a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    121e:	b662      	cpsie	i
	}
	udd_state = new_state;
    1220:	4b03      	ldr	r3, [pc, #12]	; (1230 <udd_sleep_mode+0xa0>)
    1222:	701c      	strb	r4, [r3, #0]
}
    1224:	b002      	add	sp, #8
    1226:	bd10      	pop	{r4, pc}
    1228:	00003c14 	.word	0x00003c14
    122c:	00003bf1 	.word	0x00003bf1
    1230:	200006ee 	.word	0x200006ee
    1234:	20000730 	.word	0x20000730
    1238:	200000f7 	.word	0x200000f7

0000123c <udd_ep_get_job>:
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    123c:	230f      	movs	r3, #15
    123e:	4003      	ands	r3, r0
    1240:	005b      	lsls	r3, r3, #1
    1242:	09c0      	lsrs	r0, r0, #7
    1244:	1818      	adds	r0, r3, r0
    1246:	3802      	subs	r0, #2
    1248:	0083      	lsls	r3, r0, #2
    124a:	1818      	adds	r0, r3, r0
    124c:	0080      	lsls	r0, r0, #2
    124e:	4b01      	ldr	r3, [pc, #4]	; (1254 <udd_ep_get_job+0x18>)
    1250:	1818      	adds	r0, r3, r0
}
    1252:	4770      	bx	lr
    1254:	20000674 	.word	0x20000674

00001258 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    1258:	b5f0      	push	{r4, r5, r6, r7, lr}
    125a:	4657      	mov	r7, sl
    125c:	464e      	mov	r6, r9
    125e:	4645      	mov	r5, r8
    1260:	b4e0      	push	{r5, r6, r7}
    1262:	4689      	mov	r9, r1
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    1264:	798e      	ldrb	r6, [r1, #6]

	if (ep & USB_EP_DIR_IN) {
    1266:	b273      	sxtb	r3, r6
    1268:	2b00      	cmp	r3, #0
    126a:	da51      	bge.n	1310 <udd_ep_transfer_process+0xb8>
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    126c:	1c30      	adds	r0, r6, #0
    126e:	4b5d      	ldr	r3, [pc, #372]	; (13e4 <udd_ep_transfer_process+0x18c>)
    1270:	4798      	blx	r3
    1272:	1c04      	adds	r4, r0, #0
	ep_num = ep & USB_EP_ADDR_MASK;
    1274:	230f      	movs	r3, #15
    1276:	4033      	ands	r3, r6
    1278:	4698      	mov	r8, r3

	ep_size = ptr_job->ep_size;
    127a:	8a03      	ldrh	r3, [r0, #16]
    127c:	469a      	mov	sl, r3
	/* Update number of data transferred */
	nb_trans = ep_callback_para->sent_bytes;
	ptr_job->nb_trans += nb_trans;
    127e:	464b      	mov	r3, r9
    1280:	885f      	ldrh	r7, [r3, #2]
    1282:	68c3      	ldr	r3, [r0, #12]
    1284:	469c      	mov	ip, r3
    1286:	4467      	add	r7, ip
    1288:	60c7      	str	r7, [r0, #12]

	/* Need to send other data */
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    128a:	6885      	ldr	r5, [r0, #8]
    128c:	42af      	cmp	r7, r5
    128e:	d024      	beq.n	12da <udd_ep_transfer_process+0x82>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1290:	1bed      	subs	r5, r5, r7
    1292:	b2ad      	uxth	r5, r5
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1294:	4b54      	ldr	r3, [pc, #336]	; (13e8 <udd_ep_transfer_process+0x190>)
    1296:	429d      	cmp	r5, r3
    1298:	d906      	bls.n	12a8 <udd_ep_transfer_process+0x50>
		/* The USB hardware support a maximum
		 * transfer size of UDD_ENDPOINT_MAX_TRANS Bytes */
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    129a:	1c1d      	adds	r5, r3, #0
    129c:	1c18      	adds	r0, r3, #0
    129e:	4651      	mov	r1, sl
    12a0:	4b52      	ldr	r3, [pc, #328]	; (13ec <udd_ep_transfer_process+0x194>)
    12a2:	4798      	blx	r3
    12a4:	1a6d      	subs	r5, r5, r1
    12a6:	b2ad      	uxth	r5, r5
		}
		/* Need ZLP, if requested and last packet is not a short packet */
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    12a8:	7ca3      	ldrb	r3, [r4, #18]
    12aa:	2200      	movs	r2, #0
    12ac:	079b      	lsls	r3, r3, #30
    12ae:	d506      	bpl.n	12be <udd_ep_transfer_process+0x66>
    12b0:	1c28      	adds	r0, r5, #0
    12b2:	4651      	mov	r1, sl
    12b4:	4b4e      	ldr	r3, [pc, #312]	; (13f0 <udd_ep_transfer_process+0x198>)
    12b6:	4798      	blx	r3
    12b8:	b289      	uxth	r1, r1
    12ba:	424a      	negs	r2, r1
    12bc:	414a      	adcs	r2, r1
    12be:	0051      	lsls	r1, r2, #1
    12c0:	7ca3      	ldrb	r3, [r4, #18]
    12c2:	2202      	movs	r2, #2
    12c4:	4393      	bics	r3, r2
    12c6:	4319      	orrs	r1, r3
    12c8:	74a1      	strb	r1, [r4, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    12ca:	6862      	ldr	r2, [r4, #4]
    12cc:	19d2      	adds	r2, r2, r7
    12ce:	4849      	ldr	r0, [pc, #292]	; (13f4 <udd_ep_transfer_process+0x19c>)
    12d0:	4641      	mov	r1, r8
    12d2:	1c2b      	adds	r3, r5, #0
    12d4:	4c48      	ldr	r4, [pc, #288]	; (13f8 <udd_ep_transfer_process+0x1a0>)
    12d6:	47a0      	blx	r4
    12d8:	e07e      	b.n	13d8 <udd_ep_transfer_process+0x180>
		return;
	}

	/* Need to send a ZLP after all data transfer */
	if (ptr_job->b_shortpacket) {
    12da:	7c83      	ldrb	r3, [r0, #18]
    12dc:	079b      	lsls	r3, r3, #30
    12de:	d50b      	bpl.n	12f8 <udd_ep_transfer_process+0xa0>
		ptr_job->b_shortpacket = false;
    12e0:	7c83      	ldrb	r3, [r0, #18]
    12e2:	2202      	movs	r2, #2
    12e4:	4393      	bics	r3, r2
    12e6:	7483      	strb	r3, [r0, #18]
		/* Start new transfer */
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    12e8:	6842      	ldr	r2, [r0, #4]
    12ea:	19d2      	adds	r2, r2, r7
    12ec:	4841      	ldr	r0, [pc, #260]	; (13f4 <udd_ep_transfer_process+0x19c>)
    12ee:	4641      	mov	r1, r8
    12f0:	2300      	movs	r3, #0
    12f2:	4c41      	ldr	r4, [pc, #260]	; (13f8 <udd_ep_transfer_process+0x1a0>)
    12f4:	47a0      	blx	r4
    12f6:	e06f      	b.n	13d8 <udd_ep_transfer_process+0x180>
		return;
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    12f8:	7c83      	ldrb	r3, [r0, #18]
    12fa:	2201      	movs	r2, #1
    12fc:	4393      	bics	r3, r2
    12fe:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    1300:	6803      	ldr	r3, [r0, #0]
    1302:	2b00      	cmp	r3, #0
    1304:	d068      	beq.n	13d8 <udd_ep_transfer_process+0x180>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    1306:	2000      	movs	r0, #0
    1308:	1c39      	adds	r1, r7, #0
    130a:	1c32      	adds	r2, r6, #0
    130c:	4798      	blx	r3
    130e:	e063      	b.n	13d8 <udd_ep_transfer_process+0x180>
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    1310:	1c30      	adds	r0, r6, #0
    1312:	4b34      	ldr	r3, [pc, #208]	; (13e4 <udd_ep_transfer_process+0x18c>)
    1314:	4798      	blx	r3
    1316:	1c04      	adds	r4, r0, #0
	ep_num = ep & USB_EP_ADDR_MASK;
    1318:	270f      	movs	r7, #15
    131a:	4037      	ands	r7, r6
    131c:	46ba      	mov	sl, r7

	ep_size = ptr_job->ep_size;
    131e:	8a03      	ldrh	r3, [r0, #16]
    1320:	4698      	mov	r8, r3
	/* Update number of data transferred */
	nb_trans = ep_callback_para->received_bytes;
    1322:	464b      	mov	r3, r9
    1324:	881f      	ldrh	r7, [r3, #0]

	/* Can be necessary to copy data receive from cache buffer to user buffer */
	if (ptr_job->b_use_out_cache_buffer) {
    1326:	7c83      	ldrb	r3, [r0, #18]
    1328:	075b      	lsls	r3, r3, #29
    132a:	d511      	bpl.n	1350 <udd_ep_transfer_process+0xf8>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    132c:	6843      	ldr	r3, [r0, #4]
    132e:	68c2      	ldr	r2, [r0, #12]
    1330:	4694      	mov	ip, r2
    1332:	4463      	add	r3, ip
    1334:	1c1d      	adds	r5, r3, #0
    1336:	6880      	ldr	r0, [r0, #8]
    1338:	4641      	mov	r1, r8
    133a:	4b2d      	ldr	r3, [pc, #180]	; (13f0 <udd_ep_transfer_process+0x198>)
    133c:	4798      	blx	r3
    133e:	1c0a      	adds	r2, r1, #0
    1340:	4653      	mov	r3, sl
    1342:	1e59      	subs	r1, r3, #1
    1344:	0189      	lsls	r1, r1, #6
    1346:	4b2d      	ldr	r3, [pc, #180]	; (13fc <udd_ep_transfer_process+0x1a4>)
    1348:	18c9      	adds	r1, r1, r3
    134a:	1c28      	adds	r0, r5, #0
    134c:	4b2c      	ldr	r3, [pc, #176]	; (1400 <udd_ep_transfer_process+0x1a8>)
    134e:	4798      	blx	r3
	}

	/* Update number of data transferred */
	ptr_job->nb_trans += nb_trans;
    1350:	68e3      	ldr	r3, [r4, #12]
    1352:	18fd      	adds	r5, r7, r3
    1354:	60e5      	str	r5, [r4, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    1356:	68a3      	ldr	r3, [r4, #8]
    1358:	429d      	cmp	r5, r3
    135a:	d901      	bls.n	1360 <udd_ep_transfer_process+0x108>
		ptr_job->nb_trans = ptr_job->buf_size;
    135c:	60e3      	str	r3, [r4, #12]
    135e:	e030      	b.n	13c2 <udd_ep_transfer_process+0x16a>
	}

	/* If all previous data requested are received and user buffer not full
	 * then need to receive other data */
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    1360:	464a      	mov	r2, r9
    1362:	8892      	ldrh	r2, [r2, #4]
    1364:	42ba      	cmp	r2, r7
    1366:	d12c      	bne.n	13c2 <udd_ep_transfer_process+0x16a>
    1368:	429d      	cmp	r5, r3
    136a:	d02a      	beq.n	13c2 <udd_ep_transfer_process+0x16a>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    136c:	1b5b      	subs	r3, r3, r5
    136e:	b29e      	uxth	r6, r3
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1370:	4b1d      	ldr	r3, [pc, #116]	; (13e8 <udd_ep_transfer_process+0x190>)
    1372:	429e      	cmp	r6, r3
    1374:	d907      	bls.n	1386 <udd_ep_transfer_process+0x12e>
		/* The USB hardware support a maximum transfer size
		 * of UDD_ENDPOINT_MAX_TRANS Bytes */
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    1376:	1c1e      	adds	r6, r3, #0
    1378:	1c18      	adds	r0, r3, #0
    137a:	4641      	mov	r1, r8
    137c:	4b1b      	ldr	r3, [pc, #108]	; (13ec <udd_ep_transfer_process+0x194>)
    137e:	4798      	blx	r3
    1380:	1a73      	subs	r3, r6, r1
    1382:	b29b      	uxth	r3, r3
    1384:	e005      	b.n	1392 <udd_ep_transfer_process+0x13a>
		} else {
			next_trans -= next_trans % ep_size;
    1386:	1c30      	adds	r0, r6, #0
    1388:	4641      	mov	r1, r8
    138a:	4b19      	ldr	r3, [pc, #100]	; (13f0 <udd_ep_transfer_process+0x198>)
    138c:	4798      	blx	r3
    138e:	1a73      	subs	r3, r6, r1
    1390:	b29b      	uxth	r3, r3
		}

		if (next_trans < ep_size) {
    1392:	4598      	cmp	r8, r3
    1394:	d90e      	bls.n	13b4 <udd_ep_transfer_process+0x15c>
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
    1396:	7ca2      	ldrb	r2, [r4, #18]
    1398:	2304      	movs	r3, #4
    139a:	4313      	orrs	r3, r2
    139c:	74a3      	strb	r3, [r4, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    139e:	4653      	mov	r3, sl
    13a0:	1e5a      	subs	r2, r3, #1
    13a2:	0192      	lsls	r2, r2, #6
    13a4:	4b15      	ldr	r3, [pc, #84]	; (13fc <udd_ep_transfer_process+0x1a4>)
    13a6:	18d2      	adds	r2, r2, r3
    13a8:	4812      	ldr	r0, [pc, #72]	; (13f4 <udd_ep_transfer_process+0x19c>)
    13aa:	4651      	mov	r1, sl
    13ac:	4643      	mov	r3, r8
    13ae:	4c15      	ldr	r4, [pc, #84]	; (1404 <udd_ep_transfer_process+0x1ac>)
    13b0:	47a0      	blx	r4
    13b2:	e011      	b.n	13d8 <udd_ep_transfer_process+0x180>
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    13b4:	6862      	ldr	r2, [r4, #4]
    13b6:	1952      	adds	r2, r2, r5
    13b8:	480e      	ldr	r0, [pc, #56]	; (13f4 <udd_ep_transfer_process+0x19c>)
    13ba:	4651      	mov	r1, sl
    13bc:	4c11      	ldr	r4, [pc, #68]	; (1404 <udd_ep_transfer_process+0x1ac>)
    13be:	47a0      	blx	r4
    13c0:	e00a      	b.n	13d8 <udd_ep_transfer_process+0x180>
		}
		return;
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    13c2:	7ca3      	ldrb	r3, [r4, #18]
    13c4:	2201      	movs	r2, #1
    13c6:	4393      	bics	r3, r2
    13c8:	74a3      	strb	r3, [r4, #18]
	if (NULL != ptr_job->call_trans) {
    13ca:	6823      	ldr	r3, [r4, #0]
    13cc:	2b00      	cmp	r3, #0
    13ce:	d003      	beq.n	13d8 <udd_ep_transfer_process+0x180>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    13d0:	68e1      	ldr	r1, [r4, #12]
    13d2:	2000      	movs	r0, #0
    13d4:	1c32      	adds	r2, r6, #0
    13d6:	4798      	blx	r3
	if (ep & USB_EP_DIR_IN) {
		udd_ep_trans_in_next(pointer);
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    13d8:	bc1c      	pop	{r2, r3, r4}
    13da:	4690      	mov	r8, r2
    13dc:	4699      	mov	r9, r3
    13de:	46a2      	mov	sl, r4
    13e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13e2:	46c0      	nop			; (mov r8, r8)
    13e4:	0000123d 	.word	0x0000123d
    13e8:	00001fff 	.word	0x00001fff
    13ec:	00003b4d 	.word	0x00003b4d
    13f0:	0000396d 	.word	0x0000396d
    13f4:	20000848 	.word	0x20000848
    13f8:	000024c9 	.word	0x000024c9
    13fc:	20000788 	.word	0x20000788
    1400:	00003bf1 	.word	0x00003bf1
    1404:	00002519 	.word	0x00002519

00001408 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    1408:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    140a:	2205      	movs	r2, #5
    140c:	4b05      	ldr	r3, [pc, #20]	; (1424 <udd_ctrl_stall_data+0x1c>)
    140e:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    1410:	4c05      	ldr	r4, [pc, #20]	; (1428 <udd_ctrl_stall_data+0x20>)
    1412:	1c20      	adds	r0, r4, #0
    1414:	2180      	movs	r1, #128	; 0x80
    1416:	4b05      	ldr	r3, [pc, #20]	; (142c <udd_ctrl_stall_data+0x24>)
    1418:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    141a:	1c20      	adds	r0, r4, #0
    141c:	2100      	movs	r1, #0
    141e:	4b04      	ldr	r3, [pc, #16]	; (1430 <udd_ctrl_stall_data+0x28>)
    1420:	4798      	blx	r3
}
    1422:	bd10      	pop	{r4, pc}
    1424:	200006ef 	.word	0x200006ef
    1428:	20000848 	.word	0x20000848
    142c:	00002419 	.word	0x00002419
    1430:	00002441 	.word	0x00002441

00001434 <_usb_device_lpm_suspend>:
#endif
}

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    1434:	b570      	push	{r4, r5, r6, lr}
    1436:	1c0e      	adds	r6, r1, #0
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    1438:	4c0d      	ldr	r4, [pc, #52]	; (1470 <_usb_device_lpm_suspend+0x3c>)
    143a:	1c20      	adds	r0, r4, #0
    143c:	2106      	movs	r1, #6
    143e:	4d0d      	ldr	r5, [pc, #52]	; (1474 <_usb_device_lpm_suspend+0x40>)
    1440:	47a8      	blx	r5
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1442:	1c20      	adds	r0, r4, #0
    1444:	2104      	movs	r1, #4
    1446:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1448:	1c20      	adds	r0, r4, #0
    144a:	2102      	movs	r1, #2
    144c:	4b0a      	ldr	r3, [pc, #40]	; (1478 <_usb_device_lpm_suspend+0x44>)
    144e:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    1450:	2002      	movs	r0, #2
    1452:	4b0a      	ldr	r3, [pc, #40]	; (147c <_usb_device_lpm_suspend+0x48>)
    1454:	4798      	blx	r3
	if ((*lpm_wakeup_enable)) {
    1456:	6833      	ldr	r3, [r6, #0]
    1458:	2b00      	cmp	r3, #0
    145a:	d004      	beq.n	1466 <_usb_device_lpm_suspend+0x32>
		UDC_REMOTEWAKEUP_LPM_ENABLE();
    145c:	4b08      	ldr	r3, [pc, #32]	; (1480 <_usb_device_lpm_suspend+0x4c>)
    145e:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
    1460:	6833      	ldr	r3, [r6, #0]
    1462:	2b00      	cmp	r3, #0
    1464:	d101      	bne.n	146a <_usb_device_lpm_suspend+0x36>
		UDC_REMOTEWAKEUP_LPM_DISABLE();
    1466:	4b07      	ldr	r3, [pc, #28]	; (1484 <_usb_device_lpm_suspend+0x50>)
    1468:	4798      	blx	r3
	}
	UDC_SUSPEND_LPM_EVENT();
    146a:	4b07      	ldr	r3, [pc, #28]	; (1488 <_usb_device_lpm_suspend+0x54>)
    146c:	4798      	blx	r3
}
    146e:	bd70      	pop	{r4, r5, r6, pc}
    1470:	20000848 	.word	0x20000848
    1474:	00001f2d 	.word	0x00001f2d
    1478:	00001f0d 	.word	0x00001f0d
    147c:	00001191 	.word	0x00001191
    1480:	0000381d 	.word	0x0000381d
    1484:	00003811 	.word	0x00003811
    1488:	00003805 	.word	0x00003805

0000148c <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    148c:	b538      	push	{r3, r4, r5, lr}
#if (SAML21) || (SAML22)
#define DFLL_READY_FLAG (OSCCTRL_STATUS_DFLLRDY | \
		OSCCTRL_STATUS_DFLLLCKF | OSCCTRL_STATUS_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(OSCCTRL->DFLLCTRL.reg & OSCCTRL_DFLLCTRL_USBCRM)) {
    148e:	4b14      	ldr	r3, [pc, #80]	; (14e0 <_usb_on_wakeup+0x54>)
    1490:	8b1b      	ldrh	r3, [r3, #24]
    1492:	069b      	lsls	r3, r3, #26
    1494:	d407      	bmi.n	14a6 <_usb_on_wakeup+0x1a>
			while((OSCCTRL->STATUS.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    1496:	4912      	ldr	r1, [pc, #72]	; (14e0 <_usb_on_wakeup+0x54>)
    1498:	22d0      	movs	r2, #208	; 0xd0
    149a:	0112      	lsls	r2, r2, #4
    149c:	68cb      	ldr	r3, [r1, #12]
    149e:	4013      	ands	r3, r2
    14a0:	4293      	cmp	r3, r2
    14a2:	d1fb      	bne.n	149c <_usb_on_wakeup+0x10>
    14a4:	e005      	b.n	14b2 <_usb_on_wakeup+0x26>
		} else {
			while((OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY);
    14a6:	490e      	ldr	r1, [pc, #56]	; (14e0 <_usb_on_wakeup+0x54>)
    14a8:	2280      	movs	r2, #128	; 0x80
    14aa:	0052      	lsls	r2, r2, #1
    14ac:	68cb      	ldr	r3, [r1, #12]
    14ae:	4213      	tst	r3, r2
    14b0:	d0fc      	beq.n	14ac <_usb_on_wakeup+0x20>
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
	udd_wait_clock_ready();

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    14b2:	4c0c      	ldr	r4, [pc, #48]	; (14e4 <_usb_on_wakeup+0x58>)
    14b4:	1c20      	adds	r0, r4, #0
    14b6:	2102      	movs	r1, #2
    14b8:	4b0b      	ldr	r3, [pc, #44]	; (14e8 <_usb_on_wakeup+0x5c>)
    14ba:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    14bc:	1c20      	adds	r0, r4, #0
    14be:	2104      	movs	r1, #4
    14c0:	4d0a      	ldr	r5, [pc, #40]	; (14ec <_usb_on_wakeup+0x60>)
    14c2:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    14c4:	1c20      	adds	r0, r4, #0
    14c6:	2106      	movs	r1, #6
    14c8:	4a09      	ldr	r2, [pc, #36]	; (14f0 <_usb_on_wakeup+0x64>)
    14ca:	4b0a      	ldr	r3, [pc, #40]	; (14f4 <_usb_on_wakeup+0x68>)
    14cc:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    14ce:	1c20      	adds	r0, r4, #0
    14d0:	2106      	movs	r1, #6
    14d2:	47a8      	blx	r5
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    14d4:	2003      	movs	r0, #3
    14d6:	4b08      	ldr	r3, [pc, #32]	; (14f8 <_usb_on_wakeup+0x6c>)
    14d8:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    14da:	4b08      	ldr	r3, [pc, #32]	; (14fc <_usb_on_wakeup+0x70>)
    14dc:	4798      	blx	r3
#endif
}
    14de:	bd38      	pop	{r3, r4, r5, pc}
    14e0:	40000c00 	.word	0x40000c00
    14e4:	20000848 	.word	0x20000848
    14e8:	00001f2d 	.word	0x00001f2d
    14ec:	00001f0d 	.word	0x00001f0d
    14f0:	00001435 	.word	0x00001435
    14f4:	00001eed 	.word	0x00001eed
    14f8:	00001191 	.word	0x00001191
    14fc:	000037d9 	.word	0x000037d9

00001500 <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    1500:	b530      	push	{r4, r5, lr}
    1502:	b083      	sub	sp, #12
    1504:	1c04      	adds	r4, r0, #0
	// Reset USB Device Stack Core
	udc_reset();
    1506:	4b1e      	ldr	r3, [pc, #120]	; (1580 <_usb_on_bus_reset+0x80>)
    1508:	4798      	blx	r3
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    150a:	2380      	movs	r3, #128	; 0x80
    150c:	6822      	ldr	r2, [r4, #0]
    150e:	7293      	strb	r3, [r2, #10]
static void udd_ctrl_ep_enable(struct usb_module *module_inst)
{
	/* USB Device Endpoint0 Configuration */
	 struct usb_device_endpoint_config config_ep0;

	 usb_device_endpoint_get_config_defaults(&config_ep0);
    1510:	ad01      	add	r5, sp, #4
    1512:	1c28      	adds	r0, r5, #0
    1514:	4b1b      	ldr	r3, [pc, #108]	; (1584 <_usb_on_bus_reset+0x84>)
    1516:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    1518:	2303      	movs	r3, #3
    151a:	706b      	strb	r3, [r5, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    151c:	1c20      	adds	r0, r4, #0
    151e:	1c29      	adds	r1, r5, #0
    1520:	4b19      	ldr	r3, [pc, #100]	; (1588 <_usb_on_bus_reset+0x88>)
    1522:	4798      	blx	r3

	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    1524:	1c20      	adds	r0, r4, #0
    1526:	4919      	ldr	r1, [pc, #100]	; (158c <_usb_on_bus_reset+0x8c>)
    1528:	4b19      	ldr	r3, [pc, #100]	; (1590 <_usb_on_bus_reset+0x90>)
    152a:	4798      	blx	r3

	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    152c:	1c20      	adds	r0, r4, #0
    152e:	2100      	movs	r1, #0
    1530:	2202      	movs	r2, #2
    1532:	4b18      	ldr	r3, [pc, #96]	; (1594 <_usb_on_bus_reset+0x94>)
    1534:	4d18      	ldr	r5, [pc, #96]	; (1598 <_usb_on_bus_reset+0x98>)
    1536:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    1538:	1c20      	adds	r0, r4, #0
    153a:	2100      	movs	r1, #0
    153c:	2200      	movs	r2, #0
    153e:	4b17      	ldr	r3, [pc, #92]	; (159c <_usb_on_bus_reset+0x9c>)
    1540:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    1542:	1c20      	adds	r0, r4, #0
    1544:	2100      	movs	r1, #0
    1546:	2201      	movs	r2, #1
    1548:	4b15      	ldr	r3, [pc, #84]	; (15a0 <_usb_on_bus_reset+0xa0>)
    154a:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    154c:	1c20      	adds	r0, r4, #0
    154e:	2100      	movs	r1, #0
    1550:	2202      	movs	r2, #2
    1552:	4d14      	ldr	r5, [pc, #80]	; (15a4 <_usb_on_bus_reset+0xa4>)
    1554:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    1556:	1c20      	adds	r0, r4, #0
    1558:	2100      	movs	r1, #0
    155a:	2200      	movs	r2, #0
    155c:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    155e:	1c20      	adds	r0, r4, #0
    1560:	2100      	movs	r1, #0
    1562:	2201      	movs	r2, #1
    1564:	47a8      	blx	r5
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    1566:	6822      	ldr	r2, [r4, #0]
    1568:	8911      	ldrh	r1, [r2, #8]
    156a:	4b0f      	ldr	r3, [pc, #60]	; (15a8 <_usb_on_bus_reset+0xa8>)
    156c:	400b      	ands	r3, r1
    156e:	2180      	movs	r1, #128	; 0x80
    1570:	00c9      	lsls	r1, r1, #3
    1572:	430b      	orrs	r3, r1
    1574:	8113      	strh	r3, [r2, #8]
#ifdef  USB_DEVICE_LPM_SUPPORT
	 // Enable LPM feature
	 usb_device_set_lpm_mode(module_inst, USB_DEVICE_LPM_ACK);
#endif

	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    1576:	2200      	movs	r2, #0
    1578:	4b0c      	ldr	r3, [pc, #48]	; (15ac <_usb_on_bus_reset+0xac>)
    157a:	701a      	strb	r2, [r3, #0]
{
	// Reset USB Device Stack Core
	udc_reset();
	usb_device_set_address(module_inst,0);
	udd_ctrl_ep_enable(module_inst);
}
    157c:	b003      	add	sp, #12
    157e:	bd30      	pop	{r4, r5, pc}
    1580:	00000aad 	.word	0x00000aad
    1584:	00002151 	.word	0x00002151
    1588:	00002161 	.word	0x00002161
    158c:	200009c8 	.word	0x200009c8
    1590:	00002565 	.word	0x00002565
    1594:	000016e5 	.word	0x000016e5
    1598:	00001f49 	.word	0x00001f49
    159c:	00001a15 	.word	0x00001a15
    15a0:	000015ed 	.word	0x000015ed
    15a4:	00001f99 	.word	0x00001f99
    15a8:	fffff3ff 	.word	0xfffff3ff
    15ac:	200006ef 	.word	0x200006ef

000015b0 <udd_ctrl_send_zlp_in>:

/**
 * \brief Control Endpoint send out zero length packet
 */
static void udd_ctrl_send_zlp_in(void)
{
    15b0:	b510      	push	{r4, lr}
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    15b2:	2203      	movs	r2, #3
    15b4:	4b07      	ldr	r3, [pc, #28]	; (15d4 <udd_ctrl_send_zlp_in+0x24>)
    15b6:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    15b8:	4c07      	ldr	r4, [pc, #28]	; (15d8 <udd_ctrl_send_zlp_in+0x28>)
    15ba:	1c20      	adds	r0, r4, #0
    15bc:	4907      	ldr	r1, [pc, #28]	; (15dc <udd_ctrl_send_zlp_in+0x2c>)
    15be:	4b08      	ldr	r3, [pc, #32]	; (15e0 <udd_ctrl_send_zlp_in+0x30>)
    15c0:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    15c2:	4b08      	ldr	r3, [pc, #32]	; (15e4 <udd_ctrl_send_zlp_in+0x34>)
    15c4:	689a      	ldr	r2, [r3, #8]
    15c6:	1c20      	adds	r0, r4, #0
    15c8:	2100      	movs	r1, #0
    15ca:	2300      	movs	r3, #0
    15cc:	4c06      	ldr	r4, [pc, #24]	; (15e8 <udd_ctrl_send_zlp_in+0x38>)
    15ce:	47a0      	blx	r4
}
    15d0:	bd10      	pop	{r4, pc}
    15d2:	46c0      	nop			; (mov r8, r8)
    15d4:	200006ef 	.word	0x200006ef
    15d8:	20000848 	.word	0x20000848
    15dc:	200009c8 	.word	0x200009c8
    15e0:	00002565 	.word	0x00002565
    15e4:	200009b0 	.word	0x200009b0
    15e8:	000024c9 	.word	0x000024c9

000015ec <_usb_ep0_on_tansfer_fail>:
 * \brief Control endpoint transfer fail callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_fail(struct usb_module *module_inst, void* pointer)
{
    15ec:	b508      	push	{r3, lr}
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    15ee:	7989      	ldrb	r1, [r1, #6]
    15f0:	b24b      	sxtb	r3, r1
    15f2:	2b00      	cmp	r3, #0
    15f4:	da0c      	bge.n	1610 <_usb_ep0_on_tansfer_fail+0x24>
 */
static void udd_ctrl_underflow(void* pointer)
{
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    15f6:	4b0d      	ldr	r3, [pc, #52]	; (162c <_usb_ep0_on_tansfer_fail+0x40>)
    15f8:	781b      	ldrb	r3, [r3, #0]
    15fa:	2b01      	cmp	r3, #1
    15fc:	d102      	bne.n	1604 <_usb_ep0_on_tansfer_fail+0x18>
		/* Host want to stop OUT transaction
		 * then stop to wait OUT data phase and wait IN ZLP handshake */
		udd_ctrl_send_zlp_in();
    15fe:	4b0c      	ldr	r3, [pc, #48]	; (1630 <_usb_ep0_on_tansfer_fail+0x44>)
    1600:	4798      	blx	r3
    1602:	e012      	b.n	162a <_usb_ep0_on_tansfer_fail+0x3e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1604:	2b04      	cmp	r3, #4
    1606:	d110      	bne.n	162a <_usb_ep0_on_tansfer_fail+0x3e>
		/* A OUT handshake is waiting by device,
		 * but host want extra IN data then stall extra IN data */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    1608:	480a      	ldr	r0, [pc, #40]	; (1634 <_usb_ep0_on_tansfer_fail+0x48>)
    160a:	4b0b      	ldr	r3, [pc, #44]	; (1638 <_usb_ep0_on_tansfer_fail+0x4c>)
    160c:	4798      	blx	r3
    160e:	e00c      	b.n	162a <_usb_ep0_on_tansfer_fail+0x3e>
 */
static void udd_ctrl_overflow(void* pointer)
{
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1610:	4b06      	ldr	r3, [pc, #24]	; (162c <_usb_ep0_on_tansfer_fail+0x40>)
    1612:	781b      	ldrb	r3, [r3, #0]
    1614:	2b02      	cmp	r3, #2
    1616:	d103      	bne.n	1620 <_usb_ep0_on_tansfer_fail+0x34>
		/* Host want to stop IN transaction
		 * then stop to wait IN data phase and wait OUT ZLP handshake */
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1618:	2204      	movs	r2, #4
    161a:	4b04      	ldr	r3, [pc, #16]	; (162c <_usb_ep0_on_tansfer_fail+0x40>)
    161c:	701a      	strb	r2, [r3, #0]
    161e:	e004      	b.n	162a <_usb_ep0_on_tansfer_fail+0x3e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1620:	2b03      	cmp	r3, #3
    1622:	d102      	bne.n	162a <_usb_ep0_on_tansfer_fail+0x3e>
		/* A IN handshake is waiting by device,
		 * but host want extra OUT data then stall extra OUT data and following status stage */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    1624:	4803      	ldr	r0, [pc, #12]	; (1634 <_usb_ep0_on_tansfer_fail+0x48>)
    1626:	4b04      	ldr	r3, [pc, #16]	; (1638 <_usb_ep0_on_tansfer_fail+0x4c>)
    1628:	4798      	blx	r3
	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
		udd_ctrl_underflow(pointer);
	} else {
		udd_ctrl_overflow(pointer);
	}
}
    162a:	bd08      	pop	{r3, pc}
    162c:	200006ef 	.word	0x200006ef
    1630:	000015b1 	.word	0x000015b1
    1634:	20000848 	.word	0x20000848
    1638:	00002419 	.word	0x00002419

0000163c <udd_ctrl_in_sent>:

/**
 * \brief Process control endpoint IN transaction
 */
static void udd_ctrl_in_sent(void)
{
    163c:	b570      	push	{r4, r5, r6, lr}
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    163e:	4b20      	ldr	r3, [pc, #128]	; (16c0 <udd_ctrl_in_sent+0x84>)
    1640:	881a      	ldrh	r2, [r3, #0]
    1642:	4b20      	ldr	r3, [pc, #128]	; (16c4 <udd_ctrl_in_sent+0x88>)
    1644:	899c      	ldrh	r4, [r3, #12]
    1646:	1aa4      	subs	r4, r4, r2
    1648:	b2a4      	uxth	r4, r4

	if (0 == nb_remain) {
    164a:	2c00      	cmp	r4, #0
    164c:	d120      	bne.n	1690 <udd_ctrl_in_sent+0x54>
		/* All content of current buffer payload are sent Update number of total data sending by previous payload buffer */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    164e:	491e      	ldr	r1, [pc, #120]	; (16c8 <udd_ctrl_in_sent+0x8c>)
    1650:	880b      	ldrh	r3, [r1, #0]
    1652:	18d3      	adds	r3, r2, r3
    1654:	b29b      	uxth	r3, r3
    1656:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    1658:	4a1a      	ldr	r2, [pc, #104]	; (16c4 <udd_ctrl_in_sent+0x88>)
    165a:	88d2      	ldrh	r2, [r2, #6]
    165c:	429a      	cmp	r2, r3
    165e:	d003      	beq.n	1668 <udd_ctrl_in_sent+0x2c>
    1660:	4b1a      	ldr	r3, [pc, #104]	; (16cc <udd_ctrl_in_sent+0x90>)
    1662:	781b      	ldrb	r3, [r3, #0]
    1664:	2b00      	cmp	r3, #0
    1666:	d007      	beq.n	1678 <udd_ctrl_in_sent+0x3c>
			/* All data requested are transferred or a short packet has been sent, then it is the end of data phase.
			 * Generate an OUT ZLP for handshake phase */
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1668:	2204      	movs	r2, #4
    166a:	4b19      	ldr	r3, [pc, #100]	; (16d0 <udd_ctrl_in_sent+0x94>)
    166c:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    166e:	4819      	ldr	r0, [pc, #100]	; (16d4 <udd_ctrl_in_sent+0x98>)
    1670:	4919      	ldr	r1, [pc, #100]	; (16d8 <udd_ctrl_in_sent+0x9c>)
    1672:	4b1a      	ldr	r3, [pc, #104]	; (16dc <udd_ctrl_in_sent+0xa0>)
    1674:	4798      	blx	r3
			return;
    1676:	e022      	b.n	16be <udd_ctrl_in_sent+0x82>
		}
		/* Need of new buffer because the data phase is not complete */
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    1678:	4b12      	ldr	r3, [pc, #72]	; (16c4 <udd_ctrl_in_sent+0x88>)
    167a:	695b      	ldr	r3, [r3, #20]
    167c:	2b00      	cmp	r3, #0
    167e:	d00e      	beq.n	169e <udd_ctrl_in_sent+0x62>
    1680:	4798      	blx	r3
    1682:	2800      	cmp	r0, #0
    1684:	d00b      	beq.n	169e <udd_ctrl_in_sent+0x62>
			/* Under run then send zlp on IN
			 * Here nb_remain=0, this allows to send a IN ZLP */
		} else {
			/* A new payload buffer is given */
			udd_ctrl_payload_nb_trans = 0;
    1686:	2200      	movs	r2, #0
    1688:	4b0d      	ldr	r3, [pc, #52]	; (16c0 <udd_ctrl_in_sent+0x84>)
    168a:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    168c:	4b0d      	ldr	r3, [pc, #52]	; (16c4 <udd_ctrl_in_sent+0x88>)
    168e:	899c      	ldrh	r4, [r3, #12]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    1690:	2c3f      	cmp	r4, #63	; 0x3f
    1692:	d904      	bls.n	169e <udd_ctrl_in_sent+0x62>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
    1694:	2200      	movs	r2, #0
    1696:	4b0d      	ldr	r3, [pc, #52]	; (16cc <udd_ctrl_in_sent+0x90>)
    1698:	701a      	strb	r2, [r3, #0]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    169a:	2440      	movs	r4, #64	; 0x40
    169c:	e002      	b.n	16a4 <udd_ctrl_in_sent+0x68>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
    169e:	2201      	movs	r2, #1
    16a0:	4b0a      	ldr	r3, [pc, #40]	; (16cc <udd_ctrl_in_sent+0x90>)
    16a2:	701a      	strb	r2, [r3, #0]
	}

	/* Link payload buffer directly on USB hardware */
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    16a4:	4d06      	ldr	r5, [pc, #24]	; (16c0 <udd_ctrl_in_sent+0x84>)
    16a6:	882b      	ldrh	r3, [r5, #0]
    16a8:	4a06      	ldr	r2, [pc, #24]	; (16c4 <udd_ctrl_in_sent+0x88>)
    16aa:	6892      	ldr	r2, [r2, #8]
    16ac:	18d2      	adds	r2, r2, r3
    16ae:	4809      	ldr	r0, [pc, #36]	; (16d4 <udd_ctrl_in_sent+0x98>)
    16b0:	2100      	movs	r1, #0
    16b2:	1c23      	adds	r3, r4, #0
    16b4:	4e0a      	ldr	r6, [pc, #40]	; (16e0 <udd_ctrl_in_sent+0xa4>)
    16b6:	47b0      	blx	r6

	udd_ctrl_payload_nb_trans += nb_remain;
    16b8:	882b      	ldrh	r3, [r5, #0]
    16ba:	18e4      	adds	r4, r4, r3
    16bc:	802c      	strh	r4, [r5, #0]
}
    16be:	bd70      	pop	{r4, r5, r6, pc}
    16c0:	200006ec 	.word	0x200006ec
    16c4:	200009b0 	.word	0x200009b0
    16c8:	20000672 	.word	0x20000672
    16cc:	20000670 	.word	0x20000670
    16d0:	200006ef 	.word	0x200006ef
    16d4:	20000848 	.word	0x20000848
    16d8:	200009c8 	.word	0x200009c8
    16dc:	00002565 	.word	0x00002565
    16e0:	000024c9 	.word	0x000024c9

000016e4 <_usb_ep0_on_setup>:
 * \brief     Endpoint 0 (control) SETUP received callback
 * \param[in] module_inst pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_setup(struct usb_module *module_inst, void* pointer)
{
    16e4:	b510      	push	{r4, lr}
    16e6:	1c0c      	adds	r4, r1, #0
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    16e8:	4b2c      	ldr	r3, [pc, #176]	; (179c <_usb_ep0_on_setup+0xb8>)
    16ea:	781b      	ldrb	r3, [r3, #0]
    16ec:	2b00      	cmp	r3, #0
    16ee:	d007      	beq.n	1700 <_usb_ep0_on_setup+0x1c>
		if (NULL != udd_g_ctrlreq.callback) {
    16f0:	4b2b      	ldr	r3, [pc, #172]	; (17a0 <_usb_ep0_on_setup+0xbc>)
    16f2:	691b      	ldr	r3, [r3, #16]
    16f4:	2b00      	cmp	r3, #0
    16f6:	d000      	beq.n	16fa <_usb_ep0_on_setup+0x16>
			udd_g_ctrlreq.callback();
    16f8:	4798      	blx	r3
		}
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    16fa:	2200      	movs	r2, #0
    16fc:	4b27      	ldr	r3, [pc, #156]	; (179c <_usb_ep0_on_setup+0xb8>)
    16fe:	701a      	strb	r2, [r3, #0]
	}
	if ( 8 != ep_callback_para->received_bytes) {
    1700:	8823      	ldrh	r3, [r4, #0]
    1702:	2b08      	cmp	r3, #8
    1704:	d002      	beq.n	170c <_usb_ep0_on_setup+0x28>
		udd_ctrl_stall_data();
    1706:	4b27      	ldr	r3, [pc, #156]	; (17a4 <_usb_ep0_on_setup+0xc0>)
    1708:	4798      	blx	r3
		return;
    170a:	e045      	b.n	1798 <_usb_ep0_on_setup+0xb4>
/**
 * \brief Control Endpoint translate the data in buffer into Device Request Struct
 */
static void udd_ctrl_fetch_ram(void)
{
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    170c:	4a24      	ldr	r2, [pc, #144]	; (17a0 <_usb_ep0_on_setup+0xbc>)
    170e:	4b26      	ldr	r3, [pc, #152]	; (17a8 <_usb_ep0_on_setup+0xc4>)
    1710:	7819      	ldrb	r1, [r3, #0]
    1712:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    1714:	7859      	ldrb	r1, [r3, #1]
    1716:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    1718:	78d9      	ldrb	r1, [r3, #3]
    171a:	0209      	lsls	r1, r1, #8
    171c:	7898      	ldrb	r0, [r3, #2]
    171e:	1841      	adds	r1, r0, r1
    1720:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    1722:	7959      	ldrb	r1, [r3, #5]
    1724:	0209      	lsls	r1, r1, #8
    1726:	7918      	ldrb	r0, [r3, #4]
    1728:	1841      	adds	r1, r0, r1
    172a:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    172c:	79d9      	ldrb	r1, [r3, #7]
    172e:	0209      	lsls	r1, r1, #8
    1730:	799b      	ldrb	r3, [r3, #6]
    1732:	185b      	adds	r3, r3, r1
    1734:	80d3      	strh	r3, [r2, #6]
	if ( 8 != ep_callback_para->received_bytes) {
		udd_ctrl_stall_data();
		return;
	} else {
		udd_ctrl_fetch_ram();
		if (false == udc_process_setup()) {
    1736:	4b1d      	ldr	r3, [pc, #116]	; (17ac <_usb_ep0_on_setup+0xc8>)
    1738:	4798      	blx	r3
    173a:	2800      	cmp	r0, #0
    173c:	d102      	bne.n	1744 <_usb_ep0_on_setup+0x60>
			udd_ctrl_stall_data();
    173e:	4b19      	ldr	r3, [pc, #100]	; (17a4 <_usb_ep0_on_setup+0xc0>)
    1740:	4798      	blx	r3
			return;
    1742:	e029      	b.n	1798 <_usb_ep0_on_setup+0xb4>
		} else if (Udd_setup_is_in()) {
    1744:	4b16      	ldr	r3, [pc, #88]	; (17a0 <_usb_ep0_on_setup+0xbc>)
    1746:	781b      	ldrb	r3, [r3, #0]
    1748:	2b7f      	cmp	r3, #127	; 0x7f
    174a:	d910      	bls.n	176e <_usb_ep0_on_setup+0x8a>
			udd_ctrl_prev_payload_nb_trans = 0;
    174c:	2300      	movs	r3, #0
    174e:	4a18      	ldr	r2, [pc, #96]	; (17b0 <_usb_ep0_on_setup+0xcc>)
    1750:	8013      	strh	r3, [r2, #0]
			udd_ctrl_payload_nb_trans = 0;
    1752:	4a18      	ldr	r2, [pc, #96]	; (17b4 <_usb_ep0_on_setup+0xd0>)
    1754:	8013      	strh	r3, [r2, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    1756:	2202      	movs	r2, #2
    1758:	4b10      	ldr	r3, [pc, #64]	; (179c <_usb_ep0_on_setup+0xb8>)
    175a:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    175c:	4816      	ldr	r0, [pc, #88]	; (17b8 <_usb_ep0_on_setup+0xd4>)
    175e:	2100      	movs	r1, #0
    1760:	4a11      	ldr	r2, [pc, #68]	; (17a8 <_usb_ep0_on_setup+0xc4>)
    1762:	2340      	movs	r3, #64	; 0x40
    1764:	4c15      	ldr	r4, [pc, #84]	; (17bc <_usb_ep0_on_setup+0xd8>)
    1766:	47a0      	blx	r4
			udd_ctrl_in_sent();
    1768:	4b15      	ldr	r3, [pc, #84]	; (17c0 <_usb_ep0_on_setup+0xdc>)
    176a:	4798      	blx	r3
    176c:	e014      	b.n	1798 <_usb_ep0_on_setup+0xb4>
		} else {
			if(0 == udd_g_ctrlreq.req.wLength) {
    176e:	4b0c      	ldr	r3, [pc, #48]	; (17a0 <_usb_ep0_on_setup+0xbc>)
    1770:	88db      	ldrh	r3, [r3, #6]
    1772:	2b00      	cmp	r3, #0
    1774:	d102      	bne.n	177c <_usb_ep0_on_setup+0x98>
				udd_ctrl_send_zlp_in();
    1776:	4b13      	ldr	r3, [pc, #76]	; (17c4 <_usb_ep0_on_setup+0xe0>)
    1778:	4798      	blx	r3
				return;
    177a:	e00d      	b.n	1798 <_usb_ep0_on_setup+0xb4>
			} else {
				udd_ctrl_prev_payload_nb_trans = 0;
    177c:	2300      	movs	r3, #0
    177e:	4a0c      	ldr	r2, [pc, #48]	; (17b0 <_usb_ep0_on_setup+0xcc>)
    1780:	8013      	strh	r3, [r2, #0]
				udd_ctrl_payload_nb_trans = 0;
    1782:	4a0c      	ldr	r2, [pc, #48]	; (17b4 <_usb_ep0_on_setup+0xd0>)
    1784:	8013      	strh	r3, [r2, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    1786:	2201      	movs	r2, #1
    1788:	4b04      	ldr	r3, [pc, #16]	; (179c <_usb_ep0_on_setup+0xb8>)
    178a:	701a      	strb	r2, [r3, #0]
				/* Initialize buffer size and enable OUT bank */
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    178c:	480a      	ldr	r0, [pc, #40]	; (17b8 <_usb_ep0_on_setup+0xd4>)
    178e:	2100      	movs	r1, #0
    1790:	4a05      	ldr	r2, [pc, #20]	; (17a8 <_usb_ep0_on_setup+0xc4>)
    1792:	2340      	movs	r3, #64	; 0x40
    1794:	4c09      	ldr	r4, [pc, #36]	; (17bc <_usb_ep0_on_setup+0xd8>)
    1796:	47a0      	blx	r4
			}
		}
	}
}
    1798:	bd10      	pop	{r4, pc}
    179a:	46c0      	nop			; (mov r8, r8)
    179c:	200006ef 	.word	0x200006ef
    17a0:	200009b0 	.word	0x200009b0
    17a4:	00001409 	.word	0x00001409
    17a8:	200009c8 	.word	0x200009c8
    17ac:	00000b39 	.word	0x00000b39
    17b0:	20000672 	.word	0x20000672
    17b4:	200006ec 	.word	0x200006ec
    17b8:	20000848 	.word	0x20000848
    17bc:	00002519 	.word	0x00002519
    17c0:	0000163d 	.word	0x0000163d
    17c4:	000015b1 	.word	0x000015b1

000017c8 <_usb_on_sof_notify>:
 * \brief Control endpoint SOF callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_sof_notify(struct usb_module *module_inst, void *pointer)
{
    17c8:	b508      	push	{r3, lr}
	udc_sof_notify();
    17ca:	4b02      	ldr	r3, [pc, #8]	; (17d4 <_usb_on_sof_notify+0xc>)
    17cc:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
	UDC_SOF_EVENT();
    17ce:	4b02      	ldr	r3, [pc, #8]	; (17d8 <_usb_on_sof_notify+0x10>)
    17d0:	4798      	blx	r3
#endif
}
    17d2:	bd08      	pop	{r3, pc}
    17d4:	00000af9 	.word	0x00000af9
    17d8:	000037e5 	.word	0x000037e5

000017dc <_usb_on_suspend>:
 * \brief Control endpoint Suspend callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_suspend(struct usb_module *module_inst, void *pointer)
{
    17dc:	b510      	push	{r4, lr}
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    17de:	4c07      	ldr	r4, [pc, #28]	; (17fc <_usb_on_suspend+0x20>)
    17e0:	1c20      	adds	r0, r4, #0
    17e2:	2104      	movs	r1, #4
    17e4:	4b06      	ldr	r3, [pc, #24]	; (1800 <_usb_on_suspend+0x24>)
    17e6:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    17e8:	1c20      	adds	r0, r4, #0
    17ea:	2102      	movs	r1, #2
    17ec:	4b05      	ldr	r3, [pc, #20]	; (1804 <_usb_on_suspend+0x28>)
    17ee:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    17f0:	2001      	movs	r0, #1
    17f2:	4b05      	ldr	r3, [pc, #20]	; (1808 <_usb_on_suspend+0x2c>)
    17f4:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
	UDC_SUSPEND_EVENT();
    17f6:	4b05      	ldr	r3, [pc, #20]	; (180c <_usb_on_suspend+0x30>)
    17f8:	4798      	blx	r3
#endif
}
    17fa:	bd10      	pop	{r4, pc}
    17fc:	20000848 	.word	0x20000848
    1800:	00001f2d 	.word	0x00001f2d
    1804:	00001f0d 	.word	0x00001f0d
    1808:	00001191 	.word	0x00001191
    180c:	000037cd 	.word	0x000037cd

00001810 <udd_ep_abort>:
		udd_ep_trans_out_next(pointer);
	}
}

void udd_ep_abort(udd_ep_id_t ep)
{
    1810:	b510      	push	{r4, lr}
    1812:	1c04      	adds	r4, r0, #0
	udd_ep_job_t *ptr_job;

	usb_device_endpoint_abort_job(&usb_device, ep);
    1814:	480a      	ldr	r0, [pc, #40]	; (1840 <udd_ep_abort+0x30>)
    1816:	1c21      	adds	r1, r4, #0
    1818:	4b0a      	ldr	r3, [pc, #40]	; (1844 <udd_ep_abort+0x34>)
    181a:	4798      	blx	r3

	/* Job complete then call callback */
	ptr_job = udd_ep_get_job(ep);
    181c:	1c20      	adds	r0, r4, #0
    181e:	4b0a      	ldr	r3, [pc, #40]	; (1848 <udd_ep_abort+0x38>)
    1820:	4798      	blx	r3
	if (!ptr_job->busy) {
    1822:	7c83      	ldrb	r3, [r0, #18]
    1824:	07db      	lsls	r3, r3, #31
    1826:	d50a      	bpl.n	183e <udd_ep_abort+0x2e>
		return;
	}
	ptr_job->busy = false;
    1828:	7c83      	ldrb	r3, [r0, #18]
    182a:	2201      	movs	r2, #1
    182c:	4393      	bics	r3, r2
    182e:	7483      	strb	r3, [r0, #18]
	if (NULL != ptr_job->call_trans) {
    1830:	6803      	ldr	r3, [r0, #0]
    1832:	2b00      	cmp	r3, #0
    1834:	d003      	beq.n	183e <udd_ep_abort+0x2e>
		/* It can be a Transfer or stall callback */
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    1836:	68c1      	ldr	r1, [r0, #12]
    1838:	2001      	movs	r0, #1
    183a:	1c22      	adds	r2, r4, #0
    183c:	4798      	blx	r3
	}
}
    183e:	bd10      	pop	{r4, pc}
    1840:	20000848 	.word	0x20000848
    1844:	000023b5 	.word	0x000023b5
    1848:	0000123d 	.word	0x0000123d

0000184c <udd_is_high_speed>:
bool udd_is_high_speed(void)
{
#if SAMD21 || SAMR21 || SAMD11 || SAML21  || SAML22 || SAMDA1
	return false;
#endif
}
    184c:	2000      	movs	r0, #0
    184e:	4770      	bx	lr

00001850 <udd_get_frame_number>:
 * \param module_inst Pointer to USB device module instance
 * \return USB device frame number value.
 */
static inline uint16_t usb_device_get_frame_number(struct usb_module *module_inst)
{
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    1850:	4b02      	ldr	r3, [pc, #8]	; (185c <udd_get_frame_number+0xc>)
    1852:	681b      	ldr	r3, [r3, #0]
    1854:	8a18      	ldrh	r0, [r3, #16]
    1856:	0480      	lsls	r0, r0, #18
    1858:	0d40      	lsrs	r0, r0, #21

uint16_t udd_get_frame_number(void)
{
	return usb_device_get_frame_number(&usb_device);
}
    185a:	4770      	bx	lr
    185c:	20000848 	.word	0x20000848

00001860 <udd_get_micro_frame_number>:
 * \param module_inst Pointer to USB device module instance
 * \return USB device micro-frame number value.
 */
static inline uint16_t usb_device_get_micro_frame_number(struct usb_module *module_inst)
{
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.reg));
    1860:	4b02      	ldr	r3, [pc, #8]	; (186c <udd_get_micro_frame_number+0xc>)
    1862:	681b      	ldr	r3, [r3, #0]
    1864:	8a18      	ldrh	r0, [r3, #16]
    1866:	b280      	uxth	r0, r0

uint16_t udd_get_micro_frame_number(void)
{
	return usb_device_get_micro_frame_number(&usb_device);
}
    1868:	4770      	bx	lr
    186a:	46c0      	nop			; (mov r8, r8)
    186c:	20000848 	.word	0x20000848

00001870 <udd_ep_free>:

void udd_ep_free(udd_ep_id_t ep)
{
    1870:	b570      	push	{r4, r5, r6, lr}
    1872:	b082      	sub	sp, #8
    1874:	1c04      	adds	r4, r0, #0
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    1876:	ad01      	add	r5, sp, #4
    1878:	1c28      	adds	r0, r5, #0
    187a:	4b0d      	ldr	r3, [pc, #52]	; (18b0 <udd_ep_free+0x40>)
    187c:	4798      	blx	r3

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
	udd_ep_abort(ep);
    187e:	1c20      	adds	r0, r4, #0
    1880:	4b0c      	ldr	r3, [pc, #48]	; (18b4 <udd_ep_free+0x44>)
    1882:	4798      	blx	r3

	config_ep.ep_address = ep;
    1884:	702c      	strb	r4, [r5, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    1886:	2300      	movs	r3, #0
    1888:	70eb      	strb	r3, [r5, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    188a:	4e0b      	ldr	r6, [pc, #44]	; (18b8 <udd_ep_free+0x48>)
    188c:	1c30      	adds	r0, r6, #0
    188e:	1c29      	adds	r1, r5, #0
    1890:	4b0a      	ldr	r3, [pc, #40]	; (18bc <udd_ep_free+0x4c>)
    1892:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    1894:	210f      	movs	r1, #15
    1896:	4021      	ands	r1, r4
    1898:	1c30      	adds	r0, r6, #0
    189a:	2200      	movs	r2, #0
    189c:	4b08      	ldr	r3, [pc, #32]	; (18c0 <udd_ep_free+0x50>)
    189e:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    18a0:	1c30      	adds	r0, r6, #0
    18a2:	1c21      	adds	r1, r4, #0
    18a4:	2200      	movs	r2, #0
    18a6:	4b07      	ldr	r3, [pc, #28]	; (18c4 <udd_ep_free+0x54>)
    18a8:	4798      	blx	r3
}
    18aa:	b002      	add	sp, #8
    18ac:	bd70      	pop	{r4, r5, r6, pc}
    18ae:	46c0      	nop			; (mov r8, r8)
    18b0:	00002151 	.word	0x00002151
    18b4:	00001811 	.word	0x00001811
    18b8:	20000848 	.word	0x20000848
    18bc:	00002161 	.word	0x00002161
    18c0:	00001f71 	.word	0x00001f71
    18c4:	00002075 	.word	0x00002075

000018c8 <udd_ep_alloc>:

bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes, uint16_t MaxEndpointSize)
{
    18c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    18ca:	b083      	sub	sp, #12
    18cc:	1c06      	adds	r6, r0, #0
    18ce:	1c0c      	adds	r4, r1, #0
    18d0:	1c15      	adds	r5, r2, #0
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    18d2:	af01      	add	r7, sp, #4
    18d4:	1c38      	adds	r0, r7, #0
    18d6:	4b36      	ldr	r3, [pc, #216]	; (19b0 <udd_ep_alloc+0xe8>)
    18d8:	4798      	blx	r3

	config_ep.ep_address = ep;
    18da:	703e      	strb	r6, [r7, #0]

	if(MaxEndpointSize <= 8) {
    18dc:	2d08      	cmp	r5, #8
    18de:	d803      	bhi.n	18e8 <udd_ep_alloc+0x20>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    18e0:	2200      	movs	r2, #0
    18e2:	ab01      	add	r3, sp, #4
    18e4:	705a      	strb	r2, [r3, #1]
    18e6:	e02e      	b.n	1946 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 16) {
    18e8:	2d10      	cmp	r5, #16
    18ea:	d803      	bhi.n	18f4 <udd_ep_alloc+0x2c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    18ec:	2201      	movs	r2, #1
    18ee:	ab01      	add	r3, sp, #4
    18f0:	705a      	strb	r2, [r3, #1]
    18f2:	e028      	b.n	1946 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 32) {
    18f4:	2d20      	cmp	r5, #32
    18f6:	d803      	bhi.n	1900 <udd_ep_alloc+0x38>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    18f8:	2202      	movs	r2, #2
    18fa:	ab01      	add	r3, sp, #4
    18fc:	705a      	strb	r2, [r3, #1]
    18fe:	e022      	b.n	1946 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 64) {
    1900:	2d40      	cmp	r5, #64	; 0x40
    1902:	d803      	bhi.n	190c <udd_ep_alloc+0x44>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    1904:	2203      	movs	r2, #3
    1906:	ab01      	add	r3, sp, #4
    1908:	705a      	strb	r2, [r3, #1]
    190a:	e01c      	b.n	1946 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 128) {
    190c:	2d80      	cmp	r5, #128	; 0x80
    190e:	d803      	bhi.n	1918 <udd_ep_alloc+0x50>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    1910:	2204      	movs	r2, #4
    1912:	ab01      	add	r3, sp, #4
    1914:	705a      	strb	r2, [r3, #1]
    1916:	e016      	b.n	1946 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 256) {
    1918:	2380      	movs	r3, #128	; 0x80
    191a:	005b      	lsls	r3, r3, #1
    191c:	429d      	cmp	r5, r3
    191e:	d803      	bhi.n	1928 <udd_ep_alloc+0x60>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    1920:	2205      	movs	r2, #5
    1922:	ab01      	add	r3, sp, #4
    1924:	705a      	strb	r2, [r3, #1]
    1926:	e00e      	b.n	1946 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 512) {
    1928:	2380      	movs	r3, #128	; 0x80
    192a:	009b      	lsls	r3, r3, #2
    192c:	429d      	cmp	r5, r3
    192e:	d803      	bhi.n	1938 <udd_ep_alloc+0x70>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    1930:	2206      	movs	r2, #6
    1932:	ab01      	add	r3, sp, #4
    1934:	705a      	strb	r2, [r3, #1]
    1936:	e006      	b.n	1946 <udd_ep_alloc+0x7e>
	} else if(MaxEndpointSize <= 1023) {
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
	} else {
		return false;
    1938:	2300      	movs	r3, #0
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
	} else if(MaxEndpointSize <= 256) {
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
	} else if(MaxEndpointSize <= 512) {
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
	} else if(MaxEndpointSize <= 1023) {
    193a:	4a1e      	ldr	r2, [pc, #120]	; (19b4 <udd_ep_alloc+0xec>)
    193c:	4295      	cmp	r5, r2
    193e:	d833      	bhi.n	19a8 <udd_ep_alloc+0xe0>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    1940:	2207      	movs	r2, #7
    1942:	ab01      	add	r3, sp, #4
    1944:	705a      	strb	r2, [r3, #1]
	} else {
		return false;
	}
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    1946:	1c30      	adds	r0, r6, #0
    1948:	4b1b      	ldr	r3, [pc, #108]	; (19b8 <udd_ep_alloc+0xf0>)
    194a:	4798      	blx	r3
	ptr_job->ep_size = MaxEndpointSize;
    194c:	8205      	strh	r5, [r0, #16]

	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    194e:	2103      	movs	r1, #3
    1950:	4021      	ands	r1, r4

	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    1952:	2901      	cmp	r1, #1
    1954:	d103      	bne.n	195e <udd_ep_alloc+0x96>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    1956:	2202      	movs	r2, #2
    1958:	ab01      	add	r3, sp, #4
    195a:	70da      	strb	r2, [r3, #3]
    195c:	e00b      	b.n	1976 <udd_ep_alloc+0xae>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    195e:	2902      	cmp	r1, #2
    1960:	d103      	bne.n	196a <udd_ep_alloc+0xa2>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    1962:	2203      	movs	r2, #3
    1964:	ab01      	add	r3, sp, #4
    1966:	70da      	strb	r2, [r3, #3]
    1968:	e005      	b.n	1976 <udd_ep_alloc+0xae>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
	} else {
		return false;
    196a:	2300      	movs	r3, #0
	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    196c:	2903      	cmp	r1, #3
    196e:	d11b      	bne.n	19a8 <udd_ep_alloc+0xe0>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    1970:	2204      	movs	r2, #4
    1972:	ab01      	add	r3, sp, #4
    1974:	70da      	strb	r2, [r3, #3]
		return false;
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    1976:	4811      	ldr	r0, [pc, #68]	; (19bc <udd_ep_alloc+0xf4>)
    1978:	a901      	add	r1, sp, #4
    197a:	4b11      	ldr	r3, [pc, #68]	; (19c0 <udd_ep_alloc+0xf8>)
    197c:	4798      	blx	r3
		return false;
    197e:	2300      	movs	r3, #0
		return false;
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    1980:	2800      	cmp	r0, #0
    1982:	d111      	bne.n	19a8 <udd_ep_alloc+0xe0>
		return false;
	}
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    1984:	4c0d      	ldr	r4, [pc, #52]	; (19bc <udd_ep_alloc+0xf4>)
    1986:	210f      	movs	r1, #15
    1988:	4031      	ands	r1, r6
    198a:	1c20      	adds	r0, r4, #0
    198c:	2200      	movs	r2, #0
    198e:	4b0d      	ldr	r3, [pc, #52]	; (19c4 <udd_ep_alloc+0xfc>)
    1990:	4d0d      	ldr	r5, [pc, #52]	; (19c8 <udd_ep_alloc+0x100>)
    1992:	47a8      	blx	r5
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    1994:	1c20      	adds	r0, r4, #0
    1996:	1c31      	adds	r1, r6, #0
    1998:	2200      	movs	r2, #0
    199a:	4d0c      	ldr	r5, [pc, #48]	; (19cc <udd_ep_alloc+0x104>)
    199c:	47a8      	blx	r5
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    199e:	1c20      	adds	r0, r4, #0
    19a0:	1c31      	adds	r1, r6, #0
    19a2:	2201      	movs	r2, #1
    19a4:	47a8      	blx	r5

	return true;
    19a6:	2301      	movs	r3, #1
}
    19a8:	1c18      	adds	r0, r3, #0
    19aa:	b003      	add	sp, #12
    19ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19ae:	46c0      	nop			; (mov r8, r8)
    19b0:	00002151 	.word	0x00002151
    19b4:	000003ff 	.word	0x000003ff
    19b8:	0000123d 	.word	0x0000123d
    19bc:	20000848 	.word	0x20000848
    19c0:	00002161 	.word	0x00002161
    19c4:	00001259 	.word	0x00001259
    19c8:	00001f49 	.word	0x00001f49
    19cc:	00001f99 	.word	0x00001f99

000019d0 <udd_ep_is_halted>:

bool udd_ep_is_halted(udd_ep_id_t ep)
{
    19d0:	b508      	push	{r3, lr}
    19d2:	1c01      	adds	r1, r0, #0
	return usb_device_endpoint_is_halted(&usb_device, ep);
    19d4:	4801      	ldr	r0, [pc, #4]	; (19dc <udd_ep_is_halted+0xc>)
    19d6:	4b02      	ldr	r3, [pc, #8]	; (19e0 <udd_ep_is_halted+0x10>)
    19d8:	4798      	blx	r3
}
    19da:	bd08      	pop	{r3, pc}
    19dc:	20000848 	.word	0x20000848
    19e0:	000023ed 	.word	0x000023ed

000019e4 <udd_ep_set_halt>:

bool udd_ep_set_halt(udd_ep_id_t ep)
{
    19e4:	b510      	push	{r4, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < ep_num) {
    19e6:	230f      	movs	r3, #15
    19e8:	4003      	ands	r3, r0
		return false;
    19ea:	2200      	movs	r2, #0

bool udd_ep_set_halt(udd_ep_id_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < ep_num) {
    19ec:	2b03      	cmp	r3, #3
    19ee:	d808      	bhi.n	1a02 <udd_ep_set_halt+0x1e>
    19f0:	1c04      	adds	r4, r0, #0
		return false;
	}

	usb_device_endpoint_set_halt(&usb_device, ep);
    19f2:	4805      	ldr	r0, [pc, #20]	; (1a08 <udd_ep_set_halt+0x24>)
    19f4:	1c21      	adds	r1, r4, #0
    19f6:	4b05      	ldr	r3, [pc, #20]	; (1a0c <udd_ep_set_halt+0x28>)
    19f8:	4798      	blx	r3

	udd_ep_abort(ep);
    19fa:	1c20      	adds	r0, r4, #0
    19fc:	4b04      	ldr	r3, [pc, #16]	; (1a10 <udd_ep_set_halt+0x2c>)
    19fe:	4798      	blx	r3
	return true;
    1a00:	2201      	movs	r2, #1
}
    1a02:	1c10      	adds	r0, r2, #0
    1a04:	bd10      	pop	{r4, pc}
    1a06:	46c0      	nop			; (mov r8, r8)
    1a08:	20000848 	.word	0x20000848
    1a0c:	00002419 	.word	0x00002419
    1a10:	00001811 	.word	0x00001811

00001a14 <_usb_ep0_on_tansfer_ok>:
 * \brief Control endpoint transfer complete callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
    1a14:	b538      	push	{r3, r4, r5, lr}
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    1a16:	4b34      	ldr	r3, [pc, #208]	; (1ae8 <_usb_ep0_on_tansfer_ok+0xd4>)
    1a18:	781b      	ldrb	r3, [r3, #0]
    1a1a:	2b01      	cmp	r3, #1
    1a1c:	d155      	bne.n	1aca <_usb_ep0_on_tansfer_ok+0xb6>
static void udd_ctrl_out_received(void* pointer)
{
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;

	uint16_t nb_data;
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    1a1e:	880d      	ldrh	r5, [r1, #0]

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    1a20:	4b32      	ldr	r3, [pc, #200]	; (1aec <_usb_ep0_on_tansfer_ok+0xd8>)
    1a22:	899b      	ldrh	r3, [r3, #12]
    1a24:	4a32      	ldr	r2, [pc, #200]	; (1af0 <_usb_ep0_on_tansfer_ok+0xdc>)
    1a26:	8814      	ldrh	r4, [r2, #0]
    1a28:	1962      	adds	r2, r4, r5
    1a2a:	4293      	cmp	r3, r2
    1a2c:	da01      	bge.n	1a32 <_usb_ep0_on_tansfer_ok+0x1e>
		/* Payload buffer too small */
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1a2e:	1b1d      	subs	r5, r3, r4
    1a30:	b2ad      	uxth	r5, r5
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    1a32:	4b2e      	ldr	r3, [pc, #184]	; (1aec <_usb_ep0_on_tansfer_ok+0xd8>)
    1a34:	6898      	ldr	r0, [r3, #8]
    1a36:	1900      	adds	r0, r0, r4
    1a38:	492e      	ldr	r1, [pc, #184]	; (1af4 <_usb_ep0_on_tansfer_ok+0xe0>)
    1a3a:	1c2a      	adds	r2, r5, #0
    1a3c:	4b2e      	ldr	r3, [pc, #184]	; (1af8 <_usb_ep0_on_tansfer_ok+0xe4>)
    1a3e:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    1a40:	192c      	adds	r4, r5, r4
    1a42:	b2a4      	uxth	r4, r4
    1a44:	4b2a      	ldr	r3, [pc, #168]	; (1af0 <_usb_ep0_on_tansfer_ok+0xdc>)
    1a46:	801c      	strh	r4, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    1a48:	2d40      	cmp	r5, #64	; 0x40
    1a4a:	d106      	bne.n	1a5a <_usb_ep0_on_tansfer_ok+0x46>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    1a4c:	4b27      	ldr	r3, [pc, #156]	; (1aec <_usb_ep0_on_tansfer_ok+0xd8>)
    1a4e:	88da      	ldrh	r2, [r3, #6]
    1a50:	4b2a      	ldr	r3, [pc, #168]	; (1afc <_usb_ep0_on_tansfer_ok+0xe8>)
    1a52:	881b      	ldrh	r3, [r3, #0]
    1a54:	191b      	adds	r3, r3, r4
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    1a56:	429a      	cmp	r2, r3
    1a58:	dc10      	bgt.n	1a7c <_usb_ep0_on_tansfer_ok+0x68>
		/* End of reception because it is a short packet
		 * or all data are transferred */

		/* Before send ZLP, call intermediate callback
		 * in case of data receive generate a stall */
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    1a5a:	4b24      	ldr	r3, [pc, #144]	; (1aec <_usb_ep0_on_tansfer_ok+0xd8>)
    1a5c:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    1a5e:	695b      	ldr	r3, [r3, #20]
    1a60:	2b00      	cmp	r3, #0
    1a62:	d008      	beq.n	1a76 <_usb_ep0_on_tansfer_ok+0x62>
			if (!udd_g_ctrlreq.over_under_run()) {
    1a64:	4798      	blx	r3
    1a66:	2800      	cmp	r0, #0
    1a68:	d105      	bne.n	1a76 <_usb_ep0_on_tansfer_ok+0x62>
				/* Stall ZLP */
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1a6a:	2205      	movs	r2, #5
    1a6c:	4b1e      	ldr	r3, [pc, #120]	; (1ae8 <_usb_ep0_on_tansfer_ok+0xd4>)
    1a6e:	701a      	strb	r2, [r3, #0]
				/* Stall all packets on IN & OUT control endpoint */
				udd_ep_set_halt(0);
    1a70:	4b23      	ldr	r3, [pc, #140]	; (1b00 <_usb_ep0_on_tansfer_ok+0xec>)
    1a72:	4798      	blx	r3
    1a74:	e036      	b.n	1ae4 <_usb_ep0_on_tansfer_ok+0xd0>
				/* Ack reception of OUT to replace NAK by a STALL */
				return;
			}
		}
		/* Send IN ZLP to ACK setup request */
		udd_ctrl_send_zlp_in();
    1a76:	4b23      	ldr	r3, [pc, #140]	; (1b04 <_usb_ep0_on_tansfer_ok+0xf0>)
    1a78:	4798      	blx	r3
    1a7a:	e033      	b.n	1ae4 <_usb_ep0_on_tansfer_ok+0xd0>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    1a7c:	4b1b      	ldr	r3, [pc, #108]	; (1aec <_usb_ep0_on_tansfer_ok+0xd8>)
    1a7e:	899b      	ldrh	r3, [r3, #12]
    1a80:	42a3      	cmp	r3, r4
    1a82:	d11b      	bne.n	1abc <_usb_ep0_on_tansfer_ok+0xa8>
		/* Overrun then request a new payload buffer */
		if (!udd_g_ctrlreq.over_under_run) {
    1a84:	4b19      	ldr	r3, [pc, #100]	; (1aec <_usb_ep0_on_tansfer_ok+0xd8>)
    1a86:	695b      	ldr	r3, [r3, #20]
    1a88:	2b00      	cmp	r3, #0
    1a8a:	d106      	bne.n	1a9a <_usb_ep0_on_tansfer_ok+0x86>
			/* No callback available to request a new payload buffer
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1a8c:	2205      	movs	r2, #5
    1a8e:	4b16      	ldr	r3, [pc, #88]	; (1ae8 <_usb_ep0_on_tansfer_ok+0xd4>)
    1a90:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    1a92:	2000      	movs	r0, #0
    1a94:	4b1a      	ldr	r3, [pc, #104]	; (1b00 <_usb_ep0_on_tansfer_ok+0xec>)
    1a96:	4798      	blx	r3
    1a98:	e024      	b.n	1ae4 <_usb_ep0_on_tansfer_ok+0xd0>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    1a9a:	4798      	blx	r3
    1a9c:	2800      	cmp	r0, #0
    1a9e:	d105      	bne.n	1aac <_usb_ep0_on_tansfer_ok+0x98>
			/* No new payload buffer delivered
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1aa0:	2205      	movs	r2, #5
    1aa2:	4b11      	ldr	r3, [pc, #68]	; (1ae8 <_usb_ep0_on_tansfer_ok+0xd4>)
    1aa4:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    1aa6:	4b16      	ldr	r3, [pc, #88]	; (1b00 <_usb_ep0_on_tansfer_ok+0xec>)
    1aa8:	4798      	blx	r3
    1aaa:	e01b      	b.n	1ae4 <_usb_ep0_on_tansfer_ok+0xd0>
			return;
		}
		/* New payload buffer available
		 * Update number of total data received */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1aac:	4913      	ldr	r1, [pc, #76]	; (1afc <_usb_ep0_on_tansfer_ok+0xe8>)
    1aae:	4a10      	ldr	r2, [pc, #64]	; (1af0 <_usb_ep0_on_tansfer_ok+0xdc>)
    1ab0:	8810      	ldrh	r0, [r2, #0]
    1ab2:	880b      	ldrh	r3, [r1, #0]
    1ab4:	18c3      	adds	r3, r0, r3
    1ab6:	800b      	strh	r3, [r1, #0]

		/* Reinitialize reception on payload buffer */
		udd_ctrl_payload_nb_trans = 0;
    1ab8:	2300      	movs	r3, #0
    1aba:	8013      	strh	r3, [r2, #0]
	}
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    1abc:	4812      	ldr	r0, [pc, #72]	; (1b08 <_usb_ep0_on_tansfer_ok+0xf4>)
    1abe:	2100      	movs	r1, #0
    1ac0:	4a0c      	ldr	r2, [pc, #48]	; (1af4 <_usb_ep0_on_tansfer_ok+0xe0>)
    1ac2:	2340      	movs	r3, #64	; 0x40
    1ac4:	4c11      	ldr	r4, [pc, #68]	; (1b0c <_usb_ep0_on_tansfer_ok+0xf8>)
    1ac6:	47a0      	blx	r4
    1ac8:	e00c      	b.n	1ae4 <_usb_ep0_on_tansfer_ok+0xd0>
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
			udd_ctrl_out_received(pointer);
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    1aca:	2b02      	cmp	r3, #2
    1acc:	d102      	bne.n	1ad4 <_usb_ep0_on_tansfer_ok+0xc0>
			udd_ctrl_in_sent();
    1ace:	4b10      	ldr	r3, [pc, #64]	; (1b10 <_usb_ep0_on_tansfer_ok+0xfc>)
    1ad0:	4798      	blx	r3
    1ad2:	e007      	b.n	1ae4 <_usb_ep0_on_tansfer_ok+0xd0>
		} else {
			if (NULL != udd_g_ctrlreq.callback) {
    1ad4:	4b05      	ldr	r3, [pc, #20]	; (1aec <_usb_ep0_on_tansfer_ok+0xd8>)
    1ad6:	691b      	ldr	r3, [r3, #16]
    1ad8:	2b00      	cmp	r3, #0
    1ada:	d000      	beq.n	1ade <_usb_ep0_on_tansfer_ok+0xca>
				udd_g_ctrlreq.callback();
    1adc:	4798      	blx	r3
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    1ade:	2200      	movs	r2, #0
    1ae0:	4b01      	ldr	r3, [pc, #4]	; (1ae8 <_usb_ep0_on_tansfer_ok+0xd4>)
    1ae2:	701a      	strb	r2, [r3, #0]
		}
}
    1ae4:	bd38      	pop	{r3, r4, r5, pc}
    1ae6:	46c0      	nop			; (mov r8, r8)
    1ae8:	200006ef 	.word	0x200006ef
    1aec:	200009b0 	.word	0x200009b0
    1af0:	200006ec 	.word	0x200006ec
    1af4:	200009c8 	.word	0x200009c8
    1af8:	00003bf1 	.word	0x00003bf1
    1afc:	20000672 	.word	0x20000672
    1b00:	000019e5 	.word	0x000019e5
    1b04:	000015b1 	.word	0x000015b1
    1b08:	20000848 	.word	0x20000848
    1b0c:	00002519 	.word	0x00002519
    1b10:	0000163d 	.word	0x0000163d

00001b14 <udd_ep_clear_halt>:
	udd_ep_abort(ep);
	return true;
}

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    1b14:	b538      	push	{r3, r4, r5, lr}
    1b16:	1c01      	adds	r1, r0, #0
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < ep_num) {
    1b18:	230f      	movs	r3, #15
    1b1a:	4003      	ands	r3, r0
		return false;
    1b1c:	2000      	movs	r0, #0
bool udd_ep_clear_halt(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < ep_num) {
    1b1e:	2b03      	cmp	r3, #3
    1b20:	d813      	bhi.n	1b4a <udd_ep_clear_halt+0x36>
    1b22:	1c0c      	adds	r4, r1, #0
		return false;
	}
	ptr_job = udd_ep_get_job(ep);
    1b24:	1c08      	adds	r0, r1, #0
    1b26:	4b09      	ldr	r3, [pc, #36]	; (1b4c <udd_ep_clear_halt+0x38>)
    1b28:	4798      	blx	r3
    1b2a:	1c05      	adds	r5, r0, #0

	usb_device_endpoint_clear_halt(&usb_device, ep);
    1b2c:	4808      	ldr	r0, [pc, #32]	; (1b50 <udd_ep_clear_halt+0x3c>)
    1b2e:	1c21      	adds	r1, r4, #0
    1b30:	4b08      	ldr	r3, [pc, #32]	; (1b54 <udd_ep_clear_halt+0x40>)
    1b32:	4798      	blx	r3

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    1b34:	7cab      	ldrb	r3, [r5, #18]
		ptr_job->busy = false;
		ptr_job->call_nohalt();
	}

	return true;
    1b36:	2001      	movs	r0, #1
	ptr_job = udd_ep_get_job(ep);

	usb_device_endpoint_clear_halt(&usb_device, ep);

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    1b38:	07db      	lsls	r3, r3, #31
    1b3a:	d506      	bpl.n	1b4a <udd_ep_clear_halt+0x36>
		ptr_job->busy = false;
    1b3c:	7cab      	ldrb	r3, [r5, #18]
    1b3e:	2201      	movs	r2, #1
    1b40:	4393      	bics	r3, r2
    1b42:	74ab      	strb	r3, [r5, #18]
		ptr_job->call_nohalt();
    1b44:	682b      	ldr	r3, [r5, #0]
    1b46:	4798      	blx	r3
	}

	return true;
    1b48:	2001      	movs	r0, #1
}
    1b4a:	bd38      	pop	{r3, r4, r5, pc}
    1b4c:	0000123d 	.word	0x0000123d
    1b50:	20000848 	.word	0x20000848
    1b54:	00002441 	.word	0x00002441

00001b58 <udd_ep_run>:
	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
}

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf, iram_size_t buf_size, udd_callback_trans_t callback)
{
    1b58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b5a:	b085      	sub	sp, #20
    1b5c:	1c05      	adds	r5, r0, #0
    1b5e:	9103      	str	r1, [sp, #12]
    1b60:	9202      	str	r2, [sp, #8]
    1b62:	9301      	str	r3, [sp, #4]
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
    1b64:	230f      	movs	r3, #15
    1b66:	4003      	ands	r3, r0
    1b68:	1c1e      	adds	r6, r3, #0

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
		return false;
    1b6a:	2400      	movs	r4, #0
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    1b6c:	2b03      	cmp	r3, #3
    1b6e:	d900      	bls.n	1b72 <udd_ep_run+0x1a>
    1b70:	e0c7      	b.n	1d02 <udd_ep_run+0x1aa>
    1b72:	4b65      	ldr	r3, [pc, #404]	; (1d08 <udd_ep_run+0x1b0>)
    1b74:	4798      	blx	r3
    1b76:	1e04      	subs	r4, r0, #0
    1b78:	d000      	beq.n	1b7c <udd_ep_run+0x24>
    1b7a:	e0bd      	b.n	1cf8 <udd_ep_run+0x1a0>
		return false;
	}

	ptr_job = udd_ep_get_job(ep);
    1b7c:	1c28      	adds	r0, r5, #0
    1b7e:	4b63      	ldr	r3, [pc, #396]	; (1d0c <udd_ep_run+0x1b4>)
    1b80:	4798      	blx	r3
    1b82:	1c07      	adds	r7, r0, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1b84:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    1b88:	4258      	negs	r0, r3
    1b8a:	4158      	adcs	r0, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1b8c:	b672      	cpsid	i
    1b8e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1b92:	2100      	movs	r1, #0
    1b94:	4a5e      	ldr	r2, [pc, #376]	; (1d10 <udd_ep_run+0x1b8>)
    1b96:	7011      	strb	r1, [r2, #0]

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
    1b98:	7cba      	ldrb	r2, [r7, #18]
    1b9a:	07d3      	lsls	r3, r2, #31
    1b9c:	d509      	bpl.n	1bb2 <udd_ep_run+0x5a>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1b9e:	2800      	cmp	r0, #0
    1ba0:	d100      	bne.n	1ba4 <udd_ep_run+0x4c>
    1ba2:	e0ae      	b.n	1d02 <udd_ep_run+0x1aa>
		cpu_irq_enable();
    1ba4:	2201      	movs	r2, #1
    1ba6:	4b5a      	ldr	r3, [pc, #360]	; (1d10 <udd_ep_run+0x1b8>)
    1ba8:	701a      	strb	r2, [r3, #0]
    1baa:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1bae:	b662      	cpsie	i
    1bb0:	e0a7      	b.n	1d02 <udd_ep_run+0x1aa>
		cpu_irq_restore(flags);
		return false; /* Job already on going */
	}
	ptr_job->busy = true;
    1bb2:	7cba      	ldrb	r2, [r7, #18]
    1bb4:	2301      	movs	r3, #1
    1bb6:	4313      	orrs	r3, r2
    1bb8:	74bb      	strb	r3, [r7, #18]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1bba:	2800      	cmp	r0, #0
    1bbc:	d005      	beq.n	1bca <udd_ep_run+0x72>
		cpu_irq_enable();
    1bbe:	2201      	movs	r2, #1
    1bc0:	4b53      	ldr	r3, [pc, #332]	; (1d10 <udd_ep_run+0x1b8>)
    1bc2:	701a      	strb	r2, [r3, #0]
    1bc4:	f3bf 8f5f 	dmb	sy
    1bc8:	b662      	cpsie	i
	cpu_irq_restore(flags);

	/* No job running, set up a new one */
	ptr_job->buf = buf;
    1bca:	9b02      	ldr	r3, [sp, #8]
    1bcc:	607b      	str	r3, [r7, #4]
	ptr_job->buf_size = buf_size;
    1bce:	9b01      	ldr	r3, [sp, #4]
    1bd0:	60bb      	str	r3, [r7, #8]
	ptr_job->nb_trans = 0;
    1bd2:	2300      	movs	r3, #0
    1bd4:	60fb      	str	r3, [r7, #12]
	ptr_job->call_trans = callback;
    1bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1bd8:	603b      	str	r3, [r7, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    1bda:	2301      	movs	r3, #1
    1bdc:	9a03      	ldr	r2, [sp, #12]
    1bde:	4013      	ands	r3, r2
    1be0:	005a      	lsls	r2, r3, #1
    1be2:	7cbb      	ldrb	r3, [r7, #18]
    1be4:	2102      	movs	r1, #2
    1be6:	438b      	bics	r3, r1
	ptr_job->b_use_out_cache_buffer = false;
    1be8:	4313      	orrs	r3, r2
    1bea:	2204      	movs	r2, #4
    1bec:	4393      	bics	r3, r2
    1bee:	74bb      	strb	r3, [r7, #18]

	/* Initialize value to simulate a empty transfer */
	uint16_t next_trans;

	if (ep & USB_EP_DIR_IN) {
    1bf0:	b26b      	sxtb	r3, r5
    1bf2:	2b00      	cmp	r3, #0
    1bf4:	da40      	bge.n	1c78 <udd_ep_run+0x120>
		if (0 != ptr_job->buf_size) {
    1bf6:	9b01      	ldr	r3, [sp, #4]
    1bf8:	2b00      	cmp	r3, #0
    1bfa:	d01d      	beq.n	1c38 <udd_ep_run+0xe0>
			next_trans = ptr_job->buf_size;
    1bfc:	466b      	mov	r3, sp
    1bfe:	889c      	ldrh	r4, [r3, #4]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1c00:	4b44      	ldr	r3, [pc, #272]	; (1d14 <udd_ep_run+0x1bc>)
    1c02:	429c      	cmp	r4, r3
    1c04:	d906      	bls.n	1c14 <udd_ep_run+0xbc>
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    1c06:	8a39      	ldrh	r1, [r7, #16]
    1c08:	1c1c      	adds	r4, r3, #0
    1c0a:	1c18      	adds	r0, r3, #0
    1c0c:	4b42      	ldr	r3, [pc, #264]	; (1d18 <udd_ep_run+0x1c0>)
    1c0e:	4798      	blx	r3

	if (ep & USB_EP_DIR_IN) {
		if (0 != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    1c10:	1a63      	subs	r3, r4, r1
    1c12:	b29c      	uxth	r4, r3
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    1c14:	7cba      	ldrb	r2, [r7, #18]
    1c16:	2300      	movs	r3, #0
    1c18:	0792      	lsls	r2, r2, #30
    1c1a:	d506      	bpl.n	1c2a <udd_ep_run+0xd2>
					(0 == (next_trans % ptr_job->ep_size));
    1c1c:	8a39      	ldrh	r1, [r7, #16]
    1c1e:	1c20      	adds	r0, r4, #0
    1c20:	4b3e      	ldr	r3, [pc, #248]	; (1d1c <udd_ep_run+0x1c4>)
    1c22:	4798      	blx	r3
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    1c24:	b289      	uxth	r1, r1
    1c26:	424b      	negs	r3, r1
    1c28:	414b      	adcs	r3, r1
    1c2a:	005b      	lsls	r3, r3, #1
    1c2c:	7cba      	ldrb	r2, [r7, #18]
    1c2e:	2102      	movs	r1, #2
    1c30:	438a      	bics	r2, r1
    1c32:	4313      	orrs	r3, r2
    1c34:	74bb      	strb	r3, [r7, #18]
    1c36:	e015      	b.n	1c64 <udd_ep_run+0x10c>
					(0 == (next_trans % ptr_job->ep_size));
		} else if (true == ptr_job->b_shortpacket) {
    1c38:	7cbb      	ldrb	r3, [r7, #18]
    1c3a:	079b      	lsls	r3, r3, #30
    1c3c:	d505      	bpl.n	1c4a <udd_ep_run+0xf2>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    1c3e:	7cbb      	ldrb	r3, [r7, #18]
    1c40:	2202      	movs	r2, #2
    1c42:	4393      	bics	r3, r2
    1c44:	74bb      	strb	r3, [r7, #18]
			next_trans = 0;
    1c46:	2400      	movs	r4, #0
    1c48:	e00c      	b.n	1c64 <udd_ep_run+0x10c>
		} else {
			ptr_job->busy = false;
    1c4a:	7cbb      	ldrb	r3, [r7, #18]
    1c4c:	2201      	movs	r2, #1
    1c4e:	4393      	bics	r3, r2
    1c50:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    1c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1c54:	2b00      	cmp	r3, #0
    1c56:	d051      	beq.n	1cfc <udd_ep_run+0x1a4>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    1c58:	2000      	movs	r0, #0
    1c5a:	2100      	movs	r1, #0
    1c5c:	1c2a      	adds	r2, r5, #0
    1c5e:	4798      	blx	r3
			}
			return true;
    1c60:	2401      	movs	r4, #1
    1c62:	e04e      	b.n	1d02 <udd_ep_run+0x1aa>
		}
		return (STATUS_OK ==
				usb_device_endpoint_write_buffer_job(&usb_device,
    1c64:	482e      	ldr	r0, [pc, #184]	; (1d20 <udd_ep_run+0x1c8>)
    1c66:	1c31      	adds	r1, r6, #0
    1c68:	9a02      	ldr	r2, [sp, #8]
    1c6a:	1c23      	adds	r3, r4, #0
    1c6c:	4c2d      	ldr	r4, [pc, #180]	; (1d24 <udd_ep_run+0x1cc>)
    1c6e:	47a0      	blx	r4
			if (NULL != ptr_job->call_trans) {
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
			}
			return true;
		}
		return (STATUS_OK ==
    1c70:	4244      	negs	r4, r0
    1c72:	4144      	adcs	r4, r0
    1c74:	b2e4      	uxtb	r4, r4
    1c76:	e044      	b.n	1d02 <udd_ep_run+0x1aa>
				usb_device_endpoint_write_buffer_job(&usb_device,
						ep_num,&ptr_job->buf[0],next_trans));
	} else {
		if (0 != ptr_job->buf_size) {
    1c78:	9b01      	ldr	r3, [sp, #4]
    1c7a:	2b00      	cmp	r3, #0
    1c7c:	d02f      	beq.n	1cde <udd_ep_run+0x186>
			next_trans = ptr_job->buf_size;
    1c7e:	466b      	mov	r3, sp
    1c80:	889c      	ldrh	r4, [r3, #4]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1c82:	4b24      	ldr	r3, [pc, #144]	; (1d14 <udd_ep_run+0x1bc>)
    1c84:	429c      	cmp	r4, r3
    1c86:	d907      	bls.n	1c98 <udd_ep_run+0x140>
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    1c88:	8a39      	ldrh	r1, [r7, #16]
    1c8a:	1c1c      	adds	r4, r3, #0
    1c8c:	1c18      	adds	r0, r3, #0
    1c8e:	4b22      	ldr	r3, [pc, #136]	; (1d18 <udd_ep_run+0x1c0>)
    1c90:	4798      	blx	r3
		if (0 != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    1c92:	1a63      	subs	r3, r4, r1
    1c94:	b29c      	uxth	r4, r3
    1c96:	e005      	b.n	1ca4 <udd_ep_run+0x14c>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
    1c98:	8a39      	ldrh	r1, [r7, #16]
    1c9a:	1c20      	adds	r0, r4, #0
    1c9c:	4b1f      	ldr	r3, [pc, #124]	; (1d1c <udd_ep_run+0x1c4>)
    1c9e:	4798      	blx	r3
    1ca0:	1a63      	subs	r3, r4, r1
    1ca2:	b29c      	uxth	r4, r3
			}
			if (next_trans < ptr_job->ep_size) {
    1ca4:	8a3b      	ldrh	r3, [r7, #16]
    1ca6:	429c      	cmp	r4, r3
    1ca8:	d20f      	bcs.n	1cca <udd_ep_run+0x172>
				ptr_job->b_use_out_cache_buffer = true;
    1caa:	7cb9      	ldrb	r1, [r7, #18]
    1cac:	2204      	movs	r2, #4
    1cae:	430a      	orrs	r2, r1
    1cb0:	74ba      	strb	r2, [r7, #18]
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
    1cb2:	1e72      	subs	r2, r6, #1
    1cb4:	0192      	lsls	r2, r2, #6
    1cb6:	491c      	ldr	r1, [pc, #112]	; (1d28 <udd_ep_run+0x1d0>)
    1cb8:	1852      	adds	r2, r2, r1
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    1cba:	4819      	ldr	r0, [pc, #100]	; (1d20 <udd_ep_run+0x1c8>)
    1cbc:	1c31      	adds	r1, r6, #0
    1cbe:	4c1b      	ldr	r4, [pc, #108]	; (1d2c <udd_ep_run+0x1d4>)
    1cc0:	47a0      	blx	r4
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
    1cc2:	4244      	negs	r4, r0
    1cc4:	4144      	adcs	r4, r0
    1cc6:	b2e4      	uxtb	r4, r4
    1cc8:	e01b      	b.n	1d02 <udd_ep_run+0x1aa>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    1cca:	4815      	ldr	r0, [pc, #84]	; (1d20 <udd_ep_run+0x1c8>)
    1ccc:	1c31      	adds	r1, r6, #0
    1cce:	9a02      	ldr	r2, [sp, #8]
    1cd0:	1c23      	adds	r3, r4, #0
    1cd2:	4c16      	ldr	r4, [pc, #88]	; (1d2c <udd_ep_run+0x1d4>)
    1cd4:	47a0      	blx	r4
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
    1cd6:	4244      	negs	r4, r0
    1cd8:	4144      	adcs	r4, r0
    1cda:	b2e4      	uxtb	r4, r4
    1cdc:	e011      	b.n	1d02 <udd_ep_run+0x1aa>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								&ptr_job->buf[0],next_trans));
			}
		} else {
			ptr_job->busy = false;
    1cde:	7cbb      	ldrb	r3, [r7, #18]
    1ce0:	2201      	movs	r2, #1
    1ce2:	4393      	bics	r3, r2
    1ce4:	74bb      	strb	r3, [r7, #18]
			if (NULL != ptr_job->call_trans) {
    1ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1ce8:	2b00      	cmp	r3, #0
    1cea:	d009      	beq.n	1d00 <udd_ep_run+0x1a8>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    1cec:	2000      	movs	r0, #0
    1cee:	2100      	movs	r1, #0
    1cf0:	1c2a      	adds	r2, r5, #0
    1cf2:	4798      	blx	r3
			}
			return true;
    1cf4:	2401      	movs	r4, #1
    1cf6:	e004      	b.n	1d02 <udd_ep_run+0x1aa>
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
		return false;
    1cf8:	2400      	movs	r4, #0
    1cfa:	e002      	b.n	1d02 <udd_ep_run+0x1aa>
		} else {
			ptr_job->busy = false;
			if (NULL != ptr_job->call_trans) {
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
			}
			return true;
    1cfc:	2401      	movs	r4, #1
    1cfe:	e000      	b.n	1d02 <udd_ep_run+0x1aa>
		} else {
			ptr_job->busy = false;
			if (NULL != ptr_job->call_trans) {
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
			}
			return true;
    1d00:	2401      	movs	r4, #1
		}
	}
}
    1d02:	1c20      	adds	r0, r4, #0
    1d04:	b005      	add	sp, #20
    1d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d08:	000019d1 	.word	0x000019d1
    1d0c:	0000123d 	.word	0x0000123d
    1d10:	200000f7 	.word	0x200000f7
    1d14:	00001fff 	.word	0x00001fff
    1d18:	00003b4d 	.word	0x00003b4d
    1d1c:	0000396d 	.word	0x0000396d
    1d20:	20000848 	.word	0x20000848
    1d24:	000024c9 	.word	0x000024c9
    1d28:	20000788 	.word	0x20000788
    1d2c:	00002519 	.word	0x00002519

00001d30 <udd_set_address>:
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    1d30:	4b02      	ldr	r3, [pc, #8]	; (1d3c <udd_set_address+0xc>)
    1d32:	681a      	ldr	r2, [r3, #0]
    1d34:	2380      	movs	r3, #128	; 0x80
    1d36:	4318      	orrs	r0, r3
    1d38:	7290      	strb	r0, [r2, #10]

void udd_set_address(uint8_t address)
{
	usb_device_set_address(&usb_device,address);
}
    1d3a:	4770      	bx	lr
    1d3c:	20000848 	.word	0x20000848

00001d40 <udd_getaddress>:
 * \param module_inst Pointer to USB device module instance
 * \return USB device address value.
 */
static inline uint8_t usb_device_get_address(struct usb_module *module_inst)
{
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    1d40:	4b02      	ldr	r3, [pc, #8]	; (1d4c <udd_getaddress+0xc>)
    1d42:	681b      	ldr	r3, [r3, #0]
    1d44:	7a9b      	ldrb	r3, [r3, #10]
    1d46:	207f      	movs	r0, #127	; 0x7f
    1d48:	4018      	ands	r0, r3

uint8_t udd_getaddress(void)
{
	return usb_device_get_address(&usb_device);
}
    1d4a:	4770      	bx	lr
    1d4c:	20000848 	.word	0x20000848

00001d50 <udd_set_setup_payload>:
	}
}

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
    1d50:	4b01      	ldr	r3, [pc, #4]	; (1d58 <udd_set_setup_payload+0x8>)
    1d52:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    1d54:	8199      	strh	r1, [r3, #12]
}
    1d56:	4770      	bx	lr
    1d58:	200009b0 	.word	0x200009b0

00001d5c <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    1d5c:	b570      	push	{r4, r5, r6, lr}
	udd_sleep_mode(UDD_STATE_IDLE);
    1d5e:	2003      	movs	r0, #3
    1d60:	4b16      	ldr	r3, [pc, #88]	; (1dbc <udd_attach+0x60>)
    1d62:	4798      	blx	r3
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_attach(struct usb_module *module_inst)
{
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    1d64:	4c16      	ldr	r4, [pc, #88]	; (1dc0 <udd_attach+0x64>)
    1d66:	6822      	ldr	r2, [r4, #0]
    1d68:	8913      	ldrh	r3, [r2, #8]
    1d6a:	2101      	movs	r1, #1
    1d6c:	438b      	bics	r3, r1
    1d6e:	8113      	strh	r3, [r2, #8]
	usb_device_attach(&usb_device);

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    1d70:	1c20      	adds	r0, r4, #0
    1d72:	3103      	adds	r1, #3
    1d74:	4a13      	ldr	r2, [pc, #76]	; (1dc4 <udd_attach+0x68>)
    1d76:	4e14      	ldr	r6, [pc, #80]	; (1dc8 <udd_attach+0x6c>)
    1d78:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    1d7a:	1c20      	adds	r0, r4, #0
    1d7c:	2100      	movs	r1, #0
    1d7e:	4a13      	ldr	r2, [pc, #76]	; (1dcc <udd_attach+0x70>)
    1d80:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    1d82:	1c20      	adds	r0, r4, #0
    1d84:	2101      	movs	r1, #1
    1d86:	4a12      	ldr	r2, [pc, #72]	; (1dd0 <udd_attach+0x74>)
    1d88:	47b0      	blx	r6
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    1d8a:	1c20      	adds	r0, r4, #0
    1d8c:	2102      	movs	r1, #2
    1d8e:	4a11      	ldr	r2, [pc, #68]	; (1dd4 <udd_attach+0x78>)
    1d90:	47b0      	blx	r6

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    1d92:	1c20      	adds	r0, r4, #0
    1d94:	2104      	movs	r1, #4
    1d96:	4d10      	ldr	r5, [pc, #64]	; (1dd8 <udd_attach+0x7c>)
    1d98:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    1d9a:	1c20      	adds	r0, r4, #0
    1d9c:	2100      	movs	r1, #0
    1d9e:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    1da0:	1c20      	adds	r0, r4, #0
    1da2:	2101      	movs	r1, #1
    1da4:	47a8      	blx	r5
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    1da6:	1c20      	adds	r0, r4, #0
    1da8:	2102      	movs	r1, #2
    1daa:	47a8      	blx	r5
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    1dac:	1c20      	adds	r0, r4, #0
    1dae:	2106      	movs	r1, #6
    1db0:	4a0a      	ldr	r2, [pc, #40]	; (1ddc <udd_attach+0x80>)
    1db2:	47b0      	blx	r6
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    1db4:	1c20      	adds	r0, r4, #0
    1db6:	2106      	movs	r1, #6
    1db8:	47a8      	blx	r5
#endif
}
    1dba:	bd70      	pop	{r4, r5, r6, pc}
    1dbc:	00001191 	.word	0x00001191
    1dc0:	20000848 	.word	0x20000848
    1dc4:	000017dd 	.word	0x000017dd
    1dc8:	00001eed 	.word	0x00001eed
    1dcc:	000017c9 	.word	0x000017c9
    1dd0:	00001501 	.word	0x00001501
    1dd4:	0000148d 	.word	0x0000148d
    1dd8:	00001f0d 	.word	0x00001f0d
    1ddc:	00001435 	.word	0x00001435

00001de0 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    1de0:	b570      	push	{r4, r5, r6, lr}
    1de2:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1de4:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1de8:	b672      	cpsid	i
    1dea:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1dee:	2200      	movs	r2, #0
    1df0:	4b19      	ldr	r3, [pc, #100]	; (1e58 <udd_enable+0x78>)
    1df2:	701a      	strb	r2, [r3, #0]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    1df4:	ad01      	add	r5, sp, #4
    1df6:	1c28      	adds	r0, r5, #0
    1df8:	4b18      	ldr	r3, [pc, #96]	; (1e5c <udd_enable+0x7c>)
    1dfa:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    1dfc:	2303      	movs	r3, #3
    1dfe:	70ab      	strb	r3, [r5, #2]
	usb_init(&usb_device, USB, &config_usb);
    1e00:	4e17      	ldr	r6, [pc, #92]	; (1e60 <udd_enable+0x80>)
    1e02:	1c30      	adds	r0, r6, #0
    1e04:	2182      	movs	r1, #130	; 0x82
    1e06:	05c9      	lsls	r1, r1, #23
    1e08:	1c2a      	adds	r2, r5, #0
    1e0a:	4b16      	ldr	r3, [pc, #88]	; (1e64 <udd_enable+0x84>)
    1e0c:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    1e0e:	1c30      	adds	r0, r6, #0
    1e10:	4b15      	ldr	r3, [pc, #84]	; (1e68 <udd_enable+0x88>)
    1e12:	4798      	blx	r3
#if (SAML21) || (SAML22)
#define DFLL_READY_FLAG (OSCCTRL_STATUS_DFLLRDY | \
		OSCCTRL_STATUS_DFLLLCKF | OSCCTRL_STATUS_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(OSCCTRL->DFLLCTRL.reg & OSCCTRL_DFLLCTRL_USBCRM)) {
    1e14:	4b15      	ldr	r3, [pc, #84]	; (1e6c <udd_enable+0x8c>)
    1e16:	8b1b      	ldrh	r3, [r3, #24]
    1e18:	069b      	lsls	r3, r3, #26
    1e1a:	d407      	bmi.n	1e2c <udd_enable+0x4c>
			while((OSCCTRL->STATUS.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    1e1c:	4913      	ldr	r1, [pc, #76]	; (1e6c <udd_enable+0x8c>)
    1e1e:	22d0      	movs	r2, #208	; 0xd0
    1e20:	0112      	lsls	r2, r2, #4
    1e22:	68cb      	ldr	r3, [r1, #12]
    1e24:	4013      	ands	r3, r2
    1e26:	4293      	cmp	r3, r2
    1e28:	d1fb      	bne.n	1e22 <udd_enable+0x42>
    1e2a:	e005      	b.n	1e38 <udd_enable+0x58>
		} else {
			while((OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY);
    1e2c:	490f      	ldr	r1, [pc, #60]	; (1e6c <udd_enable+0x8c>)
    1e2e:	2280      	movs	r2, #128	; 0x80
    1e30:	0052      	lsls	r2, r2, #1
    1e32:	68cb      	ldr	r3, [r1, #12]
    1e34:	4213      	tst	r3, r2
    1e36:	d0fc      	beq.n	1e32 <udd_enable+0x52>
	usb_enable(&usb_device);

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();

	udd_sleep_mode(UDD_STATE_SUSPEND);
    1e38:	2001      	movs	r0, #1
    1e3a:	4b0d      	ldr	r3, [pc, #52]	; (1e70 <udd_enable+0x90>)
    1e3c:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    1e3e:	4b0d      	ldr	r3, [pc, #52]	; (1e74 <udd_enable+0x94>)
    1e40:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1e42:	2c00      	cmp	r4, #0
    1e44:	d105      	bne.n	1e52 <udd_enable+0x72>
		cpu_irq_enable();
    1e46:	2201      	movs	r2, #1
    1e48:	4b03      	ldr	r3, [pc, #12]	; (1e58 <udd_enable+0x78>)
    1e4a:	701a      	strb	r2, [r3, #0]
    1e4c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1e50:	b662      	cpsie	i
# endif
#endif

	cpu_irq_restore(flags);
}
    1e52:	b002      	add	sp, #8
    1e54:	bd70      	pop	{r4, r5, r6, pc}
    1e56:	46c0      	nop			; (mov r8, r8)
    1e58:	200000f7 	.word	0x200000f7
    1e5c:	00002b49 	.word	0x00002b49
    1e60:	20000848 	.word	0x20000848
    1e64:	00002b59 	.word	0x00002b59
    1e68:	00002595 	.word	0x00002595
    1e6c:	40000c00 	.word	0x40000c00
    1e70:	00001191 	.word	0x00001191
    1e74:	00001d5d 	.word	0x00001d5d

00001e78 <vcp_echo>:
	vcp_echo(udi_cdc_getc());
	// Do something about it.
}

void vcp_echo(uint8_t data)
{
    1e78:	b508      	push	{r3, lr}
	udi_cdc_putc(data);
    1e7a:	4b09      	ldr	r3, [pc, #36]	; (1ea0 <vcp_echo+0x28>)
    1e7c:	4798      	blx	r3
	
	if(udi_cdc_is_rx_ready()){
    1e7e:	4b09      	ldr	r3, [pc, #36]	; (1ea4 <vcp_echo+0x2c>)
    1e80:	4798      	blx	r3
    1e82:	2800      	cmp	r0, #0
    1e84:	d00a      	beq.n	1e9c <vcp_echo+0x24>
		if (!udi_cdc_is_tx_ready()) {
    1e86:	4b08      	ldr	r3, [pc, #32]	; (1ea8 <vcp_echo+0x30>)
    1e88:	4798      	blx	r3
    1e8a:	2800      	cmp	r0, #0
    1e8c:	d102      	bne.n	1e94 <vcp_echo+0x1c>
			udi_cdc_signal_overrun();
    1e8e:	4b07      	ldr	r3, [pc, #28]	; (1eac <vcp_echo+0x34>)
    1e90:	4798      	blx	r3
    1e92:	e003      	b.n	1e9c <vcp_echo+0x24>
		} else {
			udi_cdc_putc(udi_cdc_getc());
    1e94:	4b06      	ldr	r3, [pc, #24]	; (1eb0 <vcp_echo+0x38>)
    1e96:	4798      	blx	r3
    1e98:	4b01      	ldr	r3, [pc, #4]	; (1ea0 <vcp_echo+0x28>)
    1e9a:	4798      	blx	r3
		}
	}
}
    1e9c:	bd08      	pop	{r3, pc}
    1e9e:	46c0      	nop			; (mov r8, r8)
    1ea0:	00000905 	.word	0x00000905
    1ea4:	000006dd 	.word	0x000006dd
    1ea8:	00000849 	.word	0x00000849
    1eac:	000004b5 	.word	0x000004b5
    1eb0:	000007b1 	.word	0x000007b1

00001eb4 <vcp_rx_notify>:
		udi_cdc_putc(data[i]);
	}
}

void vcp_rx_notify(uint8_t port)
{
    1eb4:	b508      	push	{r3, lr}
	
	vcp_echo(udi_cdc_getc());
    1eb6:	4b03      	ldr	r3, [pc, #12]	; (1ec4 <vcp_rx_notify+0x10>)
    1eb8:	4798      	blx	r3
    1eba:	b2c0      	uxtb	r0, r0
    1ebc:	4b02      	ldr	r3, [pc, #8]	; (1ec8 <vcp_rx_notify+0x14>)
    1ebe:	4798      	blx	r3
	// Do something about it.
}
    1ec0:	bd08      	pop	{r3, pc}
    1ec2:	46c0      	nop			; (mov r8, r8)
    1ec4:	000007b1 	.word	0x000007b1
    1ec8:	00001e79 	.word	0x00001e79

00001ecc <ui_init>:
}

void ui_init(void)
{

}
    1ecc:	4770      	bx	lr
    1ece:	46c0      	nop			; (mov r8, r8)

00001ed0 <ui_powerdown>:

void ui_powerdown(void)
{
}
    1ed0:	4770      	bx	lr
    1ed2:	46c0      	nop			; (mov r8, r8)

00001ed4 <ui_wakeup_enable>:

#ifdef USB_DEVICE_LPM_SUPPORT
void ui_wakeup_enable(void)
{
}
    1ed4:	4770      	bx	lr
    1ed6:	46c0      	nop			; (mov r8, r8)

00001ed8 <ui_wakeup_disable>:

void ui_wakeup_disable(void)
{
}
    1ed8:	4770      	bx	lr
    1eda:	46c0      	nop			; (mov r8, r8)

00001edc <ui_wakeup>:
#endif // #ifdef USB_DEVICE_LPM_SUPPORT

void ui_wakeup(void)
{
}
    1edc:	4770      	bx	lr
    1ede:	46c0      	nop			; (mov r8, r8)

00001ee0 <ui_com_open>:


void ui_com_open(uint8_t port)
{
	UNUSED(port);
}
    1ee0:	4770      	bx	lr
    1ee2:	46c0      	nop			; (mov r8, r8)

00001ee4 <ui_com_close>:


void ui_com_close(uint8_t port)
{
	UNUSED(port);
}
    1ee4:	4770      	bx	lr
    1ee6:	46c0      	nop			; (mov r8, r8)

00001ee8 <ui_process>:
}

void ui_process(uint16_t framenumber)
{

}
    1ee8:	4770      	bx	lr
    1eea:	46c0      	nop			; (mov r8, r8)

00001eec <usb_device_register_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    1eec:	1c0b      	adds	r3, r1, #0
    1eee:	332e      	adds	r3, #46	; 0x2e
    1ef0:	009b      	lsls	r3, r3, #2
    1ef2:	501a      	str	r2, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    1ef4:	0049      	lsls	r1, r1, #1
    1ef6:	22aa      	movs	r2, #170	; 0xaa
    1ef8:	0052      	lsls	r2, r2, #1
    1efa:	4b03      	ldr	r3, [pc, #12]	; (1f08 <usb_device_register_callback+0x1c>)
    1efc:	5ac9      	ldrh	r1, [r1, r3]
    1efe:	5a83      	ldrh	r3, [r0, r2]
    1f00:	430b      	orrs	r3, r1
    1f02:	5283      	strh	r3, [r0, r2]

	return STATUS_OK;
}
    1f04:	2000      	movs	r0, #0
    1f06:	4770      	bx	lr
    1f08:	00003c2c 	.word	0x00003c2c

00001f0c <usb_device_enable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    1f0c:	0049      	lsls	r1, r1, #1
    1f0e:	4b06      	ldr	r3, [pc, #24]	; (1f28 <usb_device_enable_callback+0x1c>)
    1f10:	5acb      	ldrh	r3, [r1, r3]
    1f12:	6802      	ldr	r2, [r0, #0]
    1f14:	8393      	strh	r3, [r2, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    1f16:	21ab      	movs	r1, #171	; 0xab
    1f18:	0049      	lsls	r1, r1, #1
    1f1a:	5a42      	ldrh	r2, [r0, r1]
    1f1c:	431a      	orrs	r2, r3
    1f1e:	5242      	strh	r2, [r0, r1]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    1f20:	6802      	ldr	r2, [r0, #0]
    1f22:	8313      	strh	r3, [r2, #24]

	return STATUS_OK;
}
    1f24:	2000      	movs	r0, #0
    1f26:	4770      	bx	lr
    1f28:	00003c2c 	.word	0x00003c2c

00001f2c <usb_device_disable_callback>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    1f2c:	0049      	lsls	r1, r1, #1
    1f2e:	4b05      	ldr	r3, [pc, #20]	; (1f44 <usb_device_disable_callback+0x18>)
    1f30:	5aca      	ldrh	r2, [r1, r3]
    1f32:	21ab      	movs	r1, #171	; 0xab
    1f34:	0049      	lsls	r1, r1, #1
    1f36:	5a43      	ldrh	r3, [r0, r1]
    1f38:	4393      	bics	r3, r2
    1f3a:	5243      	strh	r3, [r0, r1]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    1f3c:	6803      	ldr	r3, [r0, #0]
    1f3e:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
}
    1f40:	2000      	movs	r0, #0
    1f42:	4770      	bx	lr
    1f44:	00003c2c 	.word	0x00003c2c

00001f48 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    1f48:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    1f4a:	008c      	lsls	r4, r1, #2
    1f4c:	18a4      	adds	r4, r4, r2
    1f4e:	3434      	adds	r4, #52	; 0x34
    1f50:	00a4      	lsls	r4, r4, #2
    1f52:	1904      	adds	r4, r0, r4
    1f54:	6063      	str	r3, [r4, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    1f56:	1841      	adds	r1, r0, r1
    1f58:	3159      	adds	r1, #89	; 0x59
    1f5a:	31ff      	adds	r1, #255	; 0xff
    1f5c:	7808      	ldrb	r0, [r1, #0]
    1f5e:	4b03      	ldr	r3, [pc, #12]	; (1f6c <usb_device_endpoint_register_callback+0x24>)
    1f60:	5c9b      	ldrb	r3, [r3, r2]
    1f62:	4303      	orrs	r3, r0
    1f64:	700b      	strb	r3, [r1, #0]

	return STATUS_OK;
}
    1f66:	2000      	movs	r0, #0
    1f68:	bd10      	pop	{r4, pc}
    1f6a:	46c0      	nop			; (mov r8, r8)
    1f6c:	00003c3c 	.word	0x00003c3c

00001f70 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    1f70:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    1f72:	008b      	lsls	r3, r1, #2
    1f74:	189b      	adds	r3, r3, r2
    1f76:	3334      	adds	r3, #52	; 0x34
    1f78:	009b      	lsls	r3, r3, #2
    1f7a:	18c3      	adds	r3, r0, r3
    1f7c:	2400      	movs	r4, #0
    1f7e:	605c      	str	r4, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    1f80:	1841      	adds	r1, r0, r1
    1f82:	3159      	adds	r1, #89	; 0x59
    1f84:	31ff      	adds	r1, #255	; 0xff
    1f86:	4b03      	ldr	r3, [pc, #12]	; (1f94 <usb_device_endpoint_unregister_callback+0x24>)
    1f88:	5c9a      	ldrb	r2, [r3, r2]
    1f8a:	780b      	ldrb	r3, [r1, #0]
    1f8c:	4393      	bics	r3, r2
    1f8e:	700b      	strb	r3, [r1, #0]

	return STATUS_OK;
}
    1f90:	2000      	movs	r0, #0
    1f92:	bd10      	pop	{r4, pc}
    1f94:	00003c3c 	.word	0x00003c3c

00001f98 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    1f98:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    1f9a:	230f      	movs	r3, #15
    1f9c:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    1f9e:	18c4      	adds	r4, r0, r3
    1fa0:	3461      	adds	r4, #97	; 0x61
    1fa2:	34ff      	adds	r4, #255	; 0xff
    1fa4:	7826      	ldrb	r6, [r4, #0]
    1fa6:	4d32      	ldr	r5, [pc, #200]	; (2070 <STACK_SIZE+0x70>)
    1fa8:	5cad      	ldrb	r5, [r5, r2]
    1faa:	4335      	orrs	r5, r6
    1fac:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    1fae:	2a00      	cmp	r2, #0
    1fb0:	d11f      	bne.n	1ff2 <usb_device_endpoint_enable_callback+0x5a>
		if (ep_num == 0) { // control endpoint
    1fb2:	2b00      	cmp	r3, #0
    1fb4:	d108      	bne.n	1fc8 <usb_device_endpoint_enable_callback+0x30>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    1fb6:	015c      	lsls	r4, r3, #5
    1fb8:	6805      	ldr	r5, [r0, #0]
    1fba:	46ac      	mov	ip, r5
    1fbc:	4464      	add	r4, ip
    1fbe:	3409      	adds	r4, #9
    1fc0:	34ff      	adds	r4, #255	; 0xff
    1fc2:	2503      	movs	r5, #3
    1fc4:	7065      	strb	r5, [r4, #1]
    1fc6:	e03d      	b.n	2044 <STACK_SIZE+0x44>
		} else if (ep & USB_EP_DIR_IN) {
    1fc8:	b24c      	sxtb	r4, r1
    1fca:	2c00      	cmp	r4, #0
    1fcc:	da08      	bge.n	1fe0 <usb_device_endpoint_enable_callback+0x48>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    1fce:	015c      	lsls	r4, r3, #5
    1fd0:	6805      	ldr	r5, [r0, #0]
    1fd2:	46ac      	mov	ip, r5
    1fd4:	4464      	add	r4, ip
    1fd6:	3409      	adds	r4, #9
    1fd8:	34ff      	adds	r4, #255	; 0xff
    1fda:	2502      	movs	r5, #2
    1fdc:	7065      	strb	r5, [r4, #1]
    1fde:	e031      	b.n	2044 <STACK_SIZE+0x44>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    1fe0:	015c      	lsls	r4, r3, #5
    1fe2:	6805      	ldr	r5, [r0, #0]
    1fe4:	46ac      	mov	ip, r5
    1fe6:	4464      	add	r4, ip
    1fe8:	3409      	adds	r4, #9
    1fea:	34ff      	adds	r4, #255	; 0xff
    1fec:	2501      	movs	r5, #1
    1fee:	7065      	strb	r5, [r4, #1]
    1ff0:	e028      	b.n	2044 <STACK_SIZE+0x44>
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    1ff2:	2a01      	cmp	r2, #1
    1ff4:	d11c      	bne.n	2030 <STACK_SIZE+0x30>
		if (ep_num == 0) { // control endpoint
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d107      	bne.n	200a <STACK_SIZE+0xa>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    1ffa:	6802      	ldr	r2, [r0, #0]
    1ffc:	015b      	lsls	r3, r3, #5
    1ffe:	18d3      	adds	r3, r2, r3
    2000:	3309      	adds	r3, #9
    2002:	33ff      	adds	r3, #255	; 0xff
    2004:	220c      	movs	r2, #12
    2006:	705a      	strb	r2, [r3, #1]
    2008:	e030      	b.n	206c <STACK_SIZE+0x6c>
		} else if (ep & USB_EP_DIR_IN) {
    200a:	b249      	sxtb	r1, r1
    200c:	2900      	cmp	r1, #0
    200e:	da07      	bge.n	2020 <STACK_SIZE+0x20>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    2010:	6802      	ldr	r2, [r0, #0]
    2012:	015b      	lsls	r3, r3, #5
    2014:	18d3      	adds	r3, r2, r3
    2016:	3309      	adds	r3, #9
    2018:	33ff      	adds	r3, #255	; 0xff
    201a:	2208      	movs	r2, #8
    201c:	705a      	strb	r2, [r3, #1]
    201e:	e025      	b.n	206c <STACK_SIZE+0x6c>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    2020:	6802      	ldr	r2, [r0, #0]
    2022:	015b      	lsls	r3, r3, #5
    2024:	18d3      	adds	r3, r2, r3
    2026:	3309      	adds	r3, #9
    2028:	33ff      	adds	r3, #255	; 0xff
    202a:	2204      	movs	r2, #4
    202c:	705a      	strb	r2, [r3, #1]
    202e:	e01d      	b.n	206c <STACK_SIZE+0x6c>
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    2030:	2a02      	cmp	r2, #2
    2032:	d107      	bne.n	2044 <STACK_SIZE+0x44>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    2034:	6802      	ldr	r2, [r0, #0]
    2036:	015b      	lsls	r3, r3, #5
    2038:	18d3      	adds	r3, r2, r3
    203a:	3309      	adds	r3, #9
    203c:	33ff      	adds	r3, #255	; 0xff
    203e:	2210      	movs	r2, #16
    2040:	705a      	strb	r2, [r3, #1]
    2042:	e013      	b.n	206c <STACK_SIZE+0x6c>
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    2044:	2a03      	cmp	r2, #3
    2046:	d111      	bne.n	206c <STACK_SIZE+0x6c>
		if (ep & USB_EP_DIR_IN) {
    2048:	b249      	sxtb	r1, r1
    204a:	2900      	cmp	r1, #0
    204c:	da07      	bge.n	205e <STACK_SIZE+0x5e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    204e:	6802      	ldr	r2, [r0, #0]
    2050:	015b      	lsls	r3, r3, #5
    2052:	18d3      	adds	r3, r2, r3
    2054:	3309      	adds	r3, #9
    2056:	33ff      	adds	r3, #255	; 0xff
    2058:	2240      	movs	r2, #64	; 0x40
    205a:	705a      	strb	r2, [r3, #1]
    205c:	e006      	b.n	206c <STACK_SIZE+0x6c>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    205e:	6802      	ldr	r2, [r0, #0]
    2060:	015b      	lsls	r3, r3, #5
    2062:	18d3      	adds	r3, r2, r3
    2064:	3309      	adds	r3, #9
    2066:	33ff      	adds	r3, #255	; 0xff
    2068:	2220      	movs	r2, #32
    206a:	705a      	strb	r2, [r3, #1]
		}
	}

	return STATUS_OK;
}
    206c:	2000      	movs	r0, #0
    206e:	bd70      	pop	{r4, r5, r6, pc}
    2070:	00003c3c 	.word	0x00003c3c

00002074 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    2074:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2076:	230f      	movs	r3, #15
    2078:	400b      	ands	r3, r1
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    207a:	18c4      	adds	r4, r0, r3
    207c:	3461      	adds	r4, #97	; 0x61
    207e:	34ff      	adds	r4, #255	; 0xff
    2080:	4d32      	ldr	r5, [pc, #200]	; (214c <usb_device_endpoint_disable_callback+0xd8>)
    2082:	5cae      	ldrb	r6, [r5, r2]
    2084:	7825      	ldrb	r5, [r4, #0]
    2086:	43b5      	bics	r5, r6
    2088:	7025      	strb	r5, [r4, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    208a:	2a00      	cmp	r2, #0
    208c:	d11f      	bne.n	20ce <usb_device_endpoint_disable_callback+0x5a>
		if (ep_num == 0) { // control endpoint
    208e:	2b00      	cmp	r3, #0
    2090:	d108      	bne.n	20a4 <usb_device_endpoint_disable_callback+0x30>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    2092:	015c      	lsls	r4, r3, #5
    2094:	6805      	ldr	r5, [r0, #0]
    2096:	46ac      	mov	ip, r5
    2098:	4464      	add	r4, ip
    209a:	3409      	adds	r4, #9
    209c:	34ff      	adds	r4, #255	; 0xff
    209e:	2503      	movs	r5, #3
    20a0:	7025      	strb	r5, [r4, #0]
    20a2:	e03d      	b.n	2120 <usb_device_endpoint_disable_callback+0xac>
		} else if (ep & USB_EP_DIR_IN) {
    20a4:	b24c      	sxtb	r4, r1
    20a6:	2c00      	cmp	r4, #0
    20a8:	da08      	bge.n	20bc <usb_device_endpoint_disable_callback+0x48>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    20aa:	015c      	lsls	r4, r3, #5
    20ac:	6805      	ldr	r5, [r0, #0]
    20ae:	46ac      	mov	ip, r5
    20b0:	4464      	add	r4, ip
    20b2:	3409      	adds	r4, #9
    20b4:	34ff      	adds	r4, #255	; 0xff
    20b6:	2502      	movs	r5, #2
    20b8:	7025      	strb	r5, [r4, #0]
    20ba:	e031      	b.n	2120 <usb_device_endpoint_disable_callback+0xac>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    20bc:	015c      	lsls	r4, r3, #5
    20be:	6805      	ldr	r5, [r0, #0]
    20c0:	46ac      	mov	ip, r5
    20c2:	4464      	add	r4, ip
    20c4:	3409      	adds	r4, #9
    20c6:	34ff      	adds	r4, #255	; 0xff
    20c8:	2501      	movs	r5, #1
    20ca:	7025      	strb	r5, [r4, #0]
    20cc:	e028      	b.n	2120 <usb_device_endpoint_disable_callback+0xac>
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    20ce:	2a01      	cmp	r2, #1
    20d0:	d11c      	bne.n	210c <usb_device_endpoint_disable_callback+0x98>
		if (ep_num == 0) { // control endpoint
    20d2:	2b00      	cmp	r3, #0
    20d4:	d107      	bne.n	20e6 <usb_device_endpoint_disable_callback+0x72>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    20d6:	6802      	ldr	r2, [r0, #0]
    20d8:	015b      	lsls	r3, r3, #5
    20da:	18d3      	adds	r3, r2, r3
    20dc:	3309      	adds	r3, #9
    20de:	33ff      	adds	r3, #255	; 0xff
    20e0:	220c      	movs	r2, #12
    20e2:	701a      	strb	r2, [r3, #0]
    20e4:	e030      	b.n	2148 <usb_device_endpoint_disable_callback+0xd4>
		} else if (ep & USB_EP_DIR_IN) {
    20e6:	b249      	sxtb	r1, r1
    20e8:	2900      	cmp	r1, #0
    20ea:	da07      	bge.n	20fc <usb_device_endpoint_disable_callback+0x88>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    20ec:	6802      	ldr	r2, [r0, #0]
    20ee:	015b      	lsls	r3, r3, #5
    20f0:	18d3      	adds	r3, r2, r3
    20f2:	3309      	adds	r3, #9
    20f4:	33ff      	adds	r3, #255	; 0xff
    20f6:	2208      	movs	r2, #8
    20f8:	701a      	strb	r2, [r3, #0]
    20fa:	e025      	b.n	2148 <usb_device_endpoint_disable_callback+0xd4>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    20fc:	6802      	ldr	r2, [r0, #0]
    20fe:	015b      	lsls	r3, r3, #5
    2100:	18d3      	adds	r3, r2, r3
    2102:	3309      	adds	r3, #9
    2104:	33ff      	adds	r3, #255	; 0xff
    2106:	2204      	movs	r2, #4
    2108:	701a      	strb	r2, [r3, #0]
    210a:	e01d      	b.n	2148 <usb_device_endpoint_disable_callback+0xd4>
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    210c:	2a02      	cmp	r2, #2
    210e:	d107      	bne.n	2120 <usb_device_endpoint_disable_callback+0xac>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    2110:	6802      	ldr	r2, [r0, #0]
    2112:	015b      	lsls	r3, r3, #5
    2114:	18d3      	adds	r3, r2, r3
    2116:	3309      	adds	r3, #9
    2118:	33ff      	adds	r3, #255	; 0xff
    211a:	2210      	movs	r2, #16
    211c:	701a      	strb	r2, [r3, #0]
    211e:	e013      	b.n	2148 <usb_device_endpoint_disable_callback+0xd4>
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    2120:	2a03      	cmp	r2, #3
    2122:	d111      	bne.n	2148 <usb_device_endpoint_disable_callback+0xd4>
		if (ep & USB_EP_DIR_IN) {
    2124:	b249      	sxtb	r1, r1
    2126:	2900      	cmp	r1, #0
    2128:	da07      	bge.n	213a <usb_device_endpoint_disable_callback+0xc6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    212a:	6802      	ldr	r2, [r0, #0]
    212c:	015b      	lsls	r3, r3, #5
    212e:	18d3      	adds	r3, r2, r3
    2130:	3309      	adds	r3, #9
    2132:	33ff      	adds	r3, #255	; 0xff
    2134:	2240      	movs	r2, #64	; 0x40
    2136:	701a      	strb	r2, [r3, #0]
    2138:	e006      	b.n	2148 <usb_device_endpoint_disable_callback+0xd4>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    213a:	6802      	ldr	r2, [r0, #0]
    213c:	015b      	lsls	r3, r3, #5
    213e:	18d3      	adds	r3, r2, r3
    2140:	3309      	adds	r3, #9
    2142:	33ff      	adds	r3, #255	; 0xff
    2144:	2220      	movs	r2, #32
    2146:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
}
    2148:	2000      	movs	r0, #0
    214a:	bd70      	pop	{r4, r5, r6, pc}
    214c:	00003c3c 	.word	0x00003c3c

00002150 <usb_device_endpoint_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    2150:	2300      	movs	r3, #0
    2152:	7003      	strb	r3, [r0, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    2154:	7043      	strb	r3, [r0, #1]
	ep_config->auto_zlp = false;
    2156:	7083      	strb	r3, [r0, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    2158:	3301      	adds	r3, #1
    215a:	70c3      	strb	r3, [r0, #3]
}
    215c:	4770      	bx	lr
    215e:	46c0      	nop			; (mov r8, r8)

00002160 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    2160:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    2162:	780a      	ldrb	r2, [r1, #0]
    2164:	230f      	movs	r3, #15
    2166:	4013      	ands	r3, r2
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    2168:	09d4      	lsrs	r4, r2, #7

	switch (ep_config->ep_type) {
    216a:	78ca      	ldrb	r2, [r1, #3]
    216c:	2a04      	cmp	r2, #4
    216e:	d900      	bls.n	2172 <usb_device_endpoint_set_config+0x12>
    2170:	e0f0      	b.n	2354 <usb_device_endpoint_set_config+0x1f4>
    2172:	0092      	lsls	r2, r2, #2
    2174:	4e8c      	ldr	r6, [pc, #560]	; (23a8 <usb_device_endpoint_set_config+0x248>)
    2176:	58b2      	ldr	r2, [r6, r2]
    2178:	4697      	mov	pc, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    217a:	6802      	ldr	r2, [r0, #0]
    217c:	3308      	adds	r3, #8
    217e:	015b      	lsls	r3, r3, #5
    2180:	2100      	movs	r1, #0
    2182:	5499      	strb	r1, [r3, r2]
			return STATUS_OK;
    2184:	2200      	movs	r2, #0
    2186:	e10c      	b.n	23a2 <usb_device_endpoint_set_config+0x242>
    2188:	015c      	lsls	r4, r3, #5
    218a:	6802      	ldr	r2, [r0, #0]
    218c:	4694      	mov	ip, r2
    218e:	4464      	add	r4, ip

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    2190:	2280      	movs	r2, #128	; 0x80
    2192:	0052      	lsls	r2, r2, #1
    2194:	5ca5      	ldrb	r5, [r4, r2]
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    2196:	3ae4      	subs	r2, #228	; 0xe4
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    2198:	076d      	lsls	r5, r5, #29
    219a:	d000      	beq.n	219e <usb_device_endpoint_set_config+0x3e>
    219c:	e101      	b.n	23a2 <usb_device_endpoint_set_config+0x242>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    219e:	32e4      	adds	r2, #228	; 0xe4
    21a0:	5ca6      	ldrb	r6, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    21a2:	3ae4      	subs	r2, #228	; 0xe4
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    21a4:	2570      	movs	r5, #112	; 0x70
    21a6:	422e      	tst	r6, r5
    21a8:	d000      	beq.n	21ac <usb_device_endpoint_set_config+0x4c>
    21aa:	e0fa      	b.n	23a2 <usb_device_endpoint_set_config+0x242>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    21ac:	3d5f      	subs	r5, #95	; 0x5f
    21ae:	32e4      	adds	r2, #228	; 0xe4
    21b0:	54a5      	strb	r5, [r4, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    21b2:	1c1a      	adds	r2, r3, #0
    21b4:	3208      	adds	r2, #8
    21b6:	0152      	lsls	r2, r2, #5
    21b8:	6804      	ldr	r4, [r0, #0]
    21ba:	18a4      	adds	r4, r4, r2
    21bc:	352f      	adds	r5, #47	; 0x2f
    21be:	7165      	strb	r5, [r4, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    21c0:	6800      	ldr	r0, [r0, #0]
    21c2:	1882      	adds	r2, r0, r2
    21c4:	2080      	movs	r0, #128	; 0x80
    21c6:	7110      	strb	r0, [r2, #4]
			} else {
				return STATUS_ERR_DENIED;
			}
			if (true == ep_config->auto_zlp) {
    21c8:	788a      	ldrb	r2, [r1, #2]
    21ca:	2a00      	cmp	r2, #0
    21cc:	d00b      	beq.n	21e6 <usb_device_endpoint_set_config+0x86>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    21ce:	015a      	lsls	r2, r3, #5
    21d0:	4876      	ldr	r0, [pc, #472]	; (23ac <usb_device_endpoint_set_config+0x24c>)
    21d2:	1882      	adds	r2, r0, r2
    21d4:	6854      	ldr	r4, [r2, #4]
    21d6:	2580      	movs	r5, #128	; 0x80
    21d8:	062d      	lsls	r5, r5, #24
    21da:	432c      	orrs	r4, r5
    21dc:	6054      	str	r4, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    21de:	6950      	ldr	r0, [r2, #20]
    21e0:	4328      	orrs	r0, r5
    21e2:	6150      	str	r0, [r2, #20]
    21e4:	e00a      	b.n	21fc <usb_device_endpoint_set_config+0x9c>
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    21e6:	015a      	lsls	r2, r3, #5
    21e8:	4870      	ldr	r0, [pc, #448]	; (23ac <usb_device_endpoint_set_config+0x24c>)
    21ea:	1882      	adds	r2, r0, r2
    21ec:	6850      	ldr	r0, [r2, #4]
    21ee:	0040      	lsls	r0, r0, #1
    21f0:	0840      	lsrs	r0, r0, #1
    21f2:	6050      	str	r0, [r2, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    21f4:	6950      	ldr	r0, [r2, #20]
    21f6:	0040      	lsls	r0, r0, #1
    21f8:	0840      	lsrs	r0, r0, #1
    21fa:	6150      	str	r0, [r2, #20]
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    21fc:	2207      	movs	r2, #7
    21fe:	7848      	ldrb	r0, [r1, #1]
    2200:	015b      	lsls	r3, r3, #5
    2202:	4c6a      	ldr	r4, [pc, #424]	; (23ac <usb_device_endpoint_set_config+0x24c>)
    2204:	18e3      	adds	r3, r4, r3
    2206:	4010      	ands	r0, r2
    2208:	0704      	lsls	r4, r0, #28
    220a:	6858      	ldr	r0, [r3, #4]
    220c:	4d68      	ldr	r5, [pc, #416]	; (23b0 <usb_device_endpoint_set_config+0x250>)
    220e:	4028      	ands	r0, r5
    2210:	4320      	orrs	r0, r4
    2212:	6058      	str	r0, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    2214:	7849      	ldrb	r1, [r1, #1]
    2216:	400a      	ands	r2, r1
    2218:	0711      	lsls	r1, r2, #28
    221a:	695a      	ldr	r2, [r3, #20]
    221c:	402a      	ands	r2, r5
    221e:	430a      	orrs	r2, r1
    2220:	615a      	str	r2, [r3, #20]
			return STATUS_OK;
    2222:	2200      	movs	r2, #0
    2224:	e0bd      	b.n	23a2 <usb_device_endpoint_set_config+0x242>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    2226:	2c00      	cmp	r4, #0
    2228:	d018      	beq.n	225c <usb_device_endpoint_set_config+0xfc>
    222a:	015d      	lsls	r5, r3, #5
    222c:	6802      	ldr	r2, [r0, #0]
    222e:	4694      	mov	ip, r2
    2230:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2232:	2280      	movs	r2, #128	; 0x80
    2234:	0052      	lsls	r2, r2, #1
    2236:	5caf      	ldrb	r7, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
    2238:	3ae4      	subs	r2, #228	; 0xe4
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    223a:	2670      	movs	r6, #112	; 0x70
    223c:	4237      	tst	r7, r6
    223e:	d000      	beq.n	2242 <usb_device_endpoint_set_config+0xe2>
    2240:	e0af      	b.n	23a2 <usb_device_endpoint_set_config+0x242>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    2242:	3690      	adds	r6, #144	; 0x90
    2244:	5daf      	ldrb	r7, [r5, r6]
    2246:	3204      	adds	r2, #4
    2248:	433a      	orrs	r2, r7
    224a:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    224c:	6800      	ldr	r0, [r0, #0]
    224e:	1c1a      	adds	r2, r3, #0
    2250:	3208      	adds	r2, #8
    2252:	0152      	lsls	r2, r2, #5
    2254:	1882      	adds	r2, r0, r2
    2256:	2080      	movs	r0, #128	; 0x80
    2258:	7110      	strb	r0, [r2, #4]
    225a:	e07b      	b.n	2354 <usb_device_endpoint_set_config+0x1f4>
    225c:	015d      	lsls	r5, r3, #5
    225e:	6802      	ldr	r2, [r0, #0]
    2260:	4694      	mov	ip, r2
    2262:	4465      	add	r5, ip
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2264:	2280      	movs	r2, #128	; 0x80
    2266:	0052      	lsls	r2, r2, #1
    2268:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    226a:	3ae4      	subs	r2, #228	; 0xe4
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    226c:	0776      	lsls	r6, r6, #29
    226e:	d000      	beq.n	2272 <usb_device_endpoint_set_config+0x112>
    2270:	e097      	b.n	23a2 <usb_device_endpoint_set_config+0x242>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    2272:	2680      	movs	r6, #128	; 0x80
    2274:	0076      	lsls	r6, r6, #1
    2276:	5daf      	ldrb	r7, [r5, r6]
    2278:	3a1a      	subs	r2, #26
    227a:	433a      	orrs	r2, r7
    227c:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    227e:	6800      	ldr	r0, [r0, #0]
    2280:	1c1a      	adds	r2, r3, #0
    2282:	3208      	adds	r2, #8
    2284:	0152      	lsls	r2, r2, #5
    2286:	1882      	adds	r2, r0, r2
    2288:	2040      	movs	r0, #64	; 0x40
    228a:	7150      	strb	r0, [r2, #5]
    228c:	e062      	b.n	2354 <usb_device_endpoint_set_config+0x1f4>
				}
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
    228e:	2c00      	cmp	r4, #0
    2290:	d017      	beq.n	22c2 <usb_device_endpoint_set_config+0x162>
    2292:	015d      	lsls	r5, r3, #5
    2294:	6802      	ldr	r2, [r0, #0]
    2296:	4694      	mov	ip, r2
    2298:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    229a:	2280      	movs	r2, #128	; 0x80
    229c:	0052      	lsls	r2, r2, #1
    229e:	5caf      	ldrb	r7, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
    22a0:	3ae4      	subs	r2, #228	; 0xe4
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    22a2:	2670      	movs	r6, #112	; 0x70
    22a4:	4237      	tst	r7, r6
    22a6:	d17c      	bne.n	23a2 <usb_device_endpoint_set_config+0x242>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    22a8:	3690      	adds	r6, #144	; 0x90
    22aa:	5daf      	ldrb	r7, [r5, r6]
    22ac:	3214      	adds	r2, #20
    22ae:	433a      	orrs	r2, r7
    22b0:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    22b2:	6800      	ldr	r0, [r0, #0]
    22b4:	1c1a      	adds	r2, r3, #0
    22b6:	3208      	adds	r2, #8
    22b8:	0152      	lsls	r2, r2, #5
    22ba:	1882      	adds	r2, r0, r2
    22bc:	2080      	movs	r0, #128	; 0x80
    22be:	7110      	strb	r0, [r2, #4]
    22c0:	e048      	b.n	2354 <usb_device_endpoint_set_config+0x1f4>
    22c2:	015d      	lsls	r5, r3, #5
    22c4:	6802      	ldr	r2, [r0, #0]
    22c6:	4694      	mov	ip, r2
    22c8:	4465      	add	r5, ip
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    22ca:	2280      	movs	r2, #128	; 0x80
    22cc:	0052      	lsls	r2, r2, #1
    22ce:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    22d0:	3ae4      	subs	r2, #228	; 0xe4
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    22d2:	0776      	lsls	r6, r6, #29
    22d4:	d165      	bne.n	23a2 <usb_device_endpoint_set_config+0x242>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    22d6:	2680      	movs	r6, #128	; 0x80
    22d8:	0076      	lsls	r6, r6, #1
    22da:	5daf      	ldrb	r7, [r5, r6]
    22dc:	3a19      	subs	r2, #25
    22de:	433a      	orrs	r2, r7
    22e0:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    22e2:	6800      	ldr	r0, [r0, #0]
    22e4:	1c1a      	adds	r2, r3, #0
    22e6:	3208      	adds	r2, #8
    22e8:	0152      	lsls	r2, r2, #5
    22ea:	1882      	adds	r2, r0, r2
    22ec:	2040      	movs	r0, #64	; 0x40
    22ee:	7150      	strb	r0, [r2, #5]
    22f0:	e030      	b.n	2354 <usb_device_endpoint_set_config+0x1f4>
				}
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
    22f2:	2c00      	cmp	r4, #0
    22f4:	d017      	beq.n	2326 <usb_device_endpoint_set_config+0x1c6>
    22f6:	015d      	lsls	r5, r3, #5
    22f8:	6802      	ldr	r2, [r0, #0]
    22fa:	4694      	mov	ip, r2
    22fc:	4465      	add	r5, ip
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    22fe:	2280      	movs	r2, #128	; 0x80
    2300:	0052      	lsls	r2, r2, #1
    2302:	5caf      	ldrb	r7, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
    2304:	3ae4      	subs	r2, #228	; 0xe4
			}
			break;

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    2306:	2670      	movs	r6, #112	; 0x70
    2308:	4237      	tst	r7, r6
    230a:	d14a      	bne.n	23a2 <usb_device_endpoint_set_config+0x242>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    230c:	3690      	adds	r6, #144	; 0x90
    230e:	5daf      	ldrb	r7, [r5, r6]
    2310:	3224      	adds	r2, #36	; 0x24
    2312:	433a      	orrs	r2, r7
    2314:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    2316:	6800      	ldr	r0, [r0, #0]
    2318:	1c1a      	adds	r2, r3, #0
    231a:	3208      	adds	r2, #8
    231c:	0152      	lsls	r2, r2, #5
    231e:	1882      	adds	r2, r0, r2
    2320:	2080      	movs	r0, #128	; 0x80
    2322:	7110      	strb	r0, [r2, #4]
    2324:	e016      	b.n	2354 <usb_device_endpoint_set_config+0x1f4>
    2326:	015d      	lsls	r5, r3, #5
    2328:	6802      	ldr	r2, [r0, #0]
    232a:	4694      	mov	ip, r2
    232c:	4465      	add	r5, ip
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    232e:	2280      	movs	r2, #128	; 0x80
    2330:	0052      	lsls	r2, r2, #1
    2332:	5cae      	ldrb	r6, [r5, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
    2334:	3ae4      	subs	r2, #228	; 0xe4
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    2336:	0776      	lsls	r6, r6, #29
    2338:	d133      	bne.n	23a2 <usb_device_endpoint_set_config+0x242>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    233a:	2680      	movs	r6, #128	; 0x80
    233c:	0076      	lsls	r6, r6, #1
    233e:	5daf      	ldrb	r7, [r5, r6]
    2340:	3a18      	subs	r2, #24
    2342:	433a      	orrs	r2, r7
    2344:	55aa      	strb	r2, [r5, r6]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    2346:	6800      	ldr	r0, [r0, #0]
    2348:	1c1a      	adds	r2, r3, #0
    234a:	3208      	adds	r2, #8
    234c:	0152      	lsls	r2, r2, #5
    234e:	1882      	adds	r2, r0, r2
    2350:	2040      	movs	r0, #64	; 0x40
    2352:	7150      	strb	r0, [r2, #5]

		default:
			break;
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    2354:	7848      	ldrb	r0, [r1, #1]
    2356:	005a      	lsls	r2, r3, #1
    2358:	1912      	adds	r2, r2, r4
    235a:	0112      	lsls	r2, r2, #4
    235c:	4d13      	ldr	r5, [pc, #76]	; (23ac <usb_device_endpoint_set_config+0x24c>)
    235e:	18aa      	adds	r2, r5, r2
    2360:	2507      	movs	r5, #7
    2362:	4028      	ands	r0, r5
    2364:	0705      	lsls	r5, r0, #28
    2366:	6856      	ldr	r6, [r2, #4]
    2368:	4811      	ldr	r0, [pc, #68]	; (23b0 <usb_device_endpoint_set_config+0x250>)
    236a:	4030      	ands	r0, r6
    236c:	4328      	orrs	r0, r5
    236e:	6050      	str	r0, [r2, #4]

	if (true == ep_config->auto_zlp) {
    2370:	788a      	ldrb	r2, [r1, #2]
    2372:	2a00      	cmp	r2, #0
    2374:	d00b      	beq.n	238e <usb_device_endpoint_set_config+0x22e>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    2376:	005b      	lsls	r3, r3, #1
    2378:	191a      	adds	r2, r3, r4
    237a:	0112      	lsls	r2, r2, #4
    237c:	4c0b      	ldr	r4, [pc, #44]	; (23ac <usb_device_endpoint_set_config+0x24c>)
    237e:	18a2      	adds	r2, r4, r2
    2380:	6853      	ldr	r3, [r2, #4]
    2382:	2180      	movs	r1, #128	; 0x80
    2384:	0609      	lsls	r1, r1, #24
    2386:	430b      	orrs	r3, r1
    2388:	6053      	str	r3, [r2, #4]
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
	}

	return STATUS_OK;
    238a:	2200      	movs	r2, #0
    238c:	e009      	b.n	23a2 <usb_device_endpoint_set_config+0x242>
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;

	if (true == ep_config->auto_zlp) {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    238e:	005b      	lsls	r3, r3, #1
    2390:	191b      	adds	r3, r3, r4
    2392:	011b      	lsls	r3, r3, #4
    2394:	4a05      	ldr	r2, [pc, #20]	; (23ac <usb_device_endpoint_set_config+0x24c>)
    2396:	18d3      	adds	r3, r2, r3
    2398:	685a      	ldr	r2, [r3, #4]
    239a:	0052      	lsls	r2, r2, #1
    239c:	0852      	lsrs	r2, r2, #1
    239e:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    23a0:	2200      	movs	r2, #0
}
    23a2:	1c10      	adds	r0, r2, #0
    23a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23a6:	46c0      	nop			; (mov r8, r8)
    23a8:	00003c18 	.word	0x00003c18
    23ac:	20000a08 	.word	0x20000a08
    23b0:	8fffffff 	.word	0x8fffffff

000023b4 <usb_device_endpoint_abort_job>:
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    23b4:	230f      	movs	r3, #15
    23b6:	400b      	ands	r3, r1

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    23b8:	b249      	sxtb	r1, r1
    23ba:	2900      	cmp	r1, #0
    23bc:	da0a      	bge.n	23d4 <usb_device_endpoint_abort_job+0x20>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    23be:	3308      	adds	r3, #8
    23c0:	015b      	lsls	r3, r3, #5
    23c2:	6802      	ldr	r2, [r0, #0]
    23c4:	18d2      	adds	r2, r2, r3
    23c6:	2180      	movs	r1, #128	; 0x80
    23c8:	7111      	strb	r1, [r2, #4]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    23ca:	6802      	ldr	r2, [r0, #0]
    23cc:	18d3      	adds	r3, r2, r3
    23ce:	2202      	movs	r2, #2
    23d0:	71da      	strb	r2, [r3, #7]
    23d2:	e009      	b.n	23e8 <usb_device_endpoint_abort_job+0x34>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    23d4:	3308      	adds	r3, #8
    23d6:	015b      	lsls	r3, r3, #5
    23d8:	6802      	ldr	r2, [r0, #0]
    23da:	18d2      	adds	r2, r2, r3
    23dc:	2140      	movs	r1, #64	; 0x40
    23de:	7151      	strb	r1, [r2, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    23e0:	6802      	ldr	r2, [r0, #0]
    23e2:	18d3      	adds	r3, r2, r3
    23e4:	2201      	movs	r2, #1
    23e6:	71da      	strb	r2, [r3, #7]
	}
}
    23e8:	4770      	bx	lr
    23ea:	46c0      	nop			; (mov r8, r8)

000023ec <usb_device_endpoint_is_halted>:
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    23ec:	230f      	movs	r3, #15
    23ee:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    23f0:	b249      	sxtb	r1, r1
    23f2:	2900      	cmp	r1, #0
    23f4:	da07      	bge.n	2406 <usb_device_endpoint_is_halted+0x1a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    23f6:	6802      	ldr	r2, [r0, #0]
    23f8:	3308      	adds	r3, #8
    23fa:	015b      	lsls	r3, r3, #5
    23fc:	18d3      	adds	r3, r2, r3
    23fe:	7998      	ldrb	r0, [r3, #6]
    2400:	0680      	lsls	r0, r0, #26
    2402:	0fc0      	lsrs	r0, r0, #31
    2404:	e006      	b.n	2414 <usb_device_endpoint_is_halted+0x28>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    2406:	6802      	ldr	r2, [r0, #0]
    2408:	3308      	adds	r3, #8
    240a:	015b      	lsls	r3, r3, #5
    240c:	18d3      	adds	r3, r2, r3
    240e:	7998      	ldrb	r0, [r3, #6]
    2410:	06c0      	lsls	r0, r0, #27
    2412:	0fc0      	lsrs	r0, r0, #31
	}
}
    2414:	4770      	bx	lr
    2416:	46c0      	nop			; (mov r8, r8)

00002418 <usb_device_endpoint_set_halt>:
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2418:	230f      	movs	r3, #15
    241a:	400b      	ands	r3, r1

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    241c:	b249      	sxtb	r1, r1
    241e:	2900      	cmp	r1, #0
    2420:	da06      	bge.n	2430 <usb_device_endpoint_set_halt+0x18>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    2422:	6802      	ldr	r2, [r0, #0]
    2424:	3308      	adds	r3, #8
    2426:	015b      	lsls	r3, r3, #5
    2428:	18d3      	adds	r3, r2, r3
    242a:	2220      	movs	r2, #32
    242c:	715a      	strb	r2, [r3, #5]
    242e:	e005      	b.n	243c <usb_device_endpoint_set_halt+0x24>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    2430:	6802      	ldr	r2, [r0, #0]
    2432:	3308      	adds	r3, #8
    2434:	015b      	lsls	r3, r3, #5
    2436:	18d3      	adds	r3, r2, r3
    2438:	2210      	movs	r2, #16
    243a:	715a      	strb	r2, [r3, #5]
	}
}
    243c:	4770      	bx	lr
    243e:	46c0      	nop			; (mov r8, r8)

00002440 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    2440:	b530      	push	{r4, r5, lr}
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2442:	230f      	movs	r3, #15
    2444:	400b      	ands	r3, r1

	if (ep & USB_EP_DIR_IN) {
    2446:	b249      	sxtb	r1, r1
    2448:	2900      	cmp	r1, #0
    244a:	da1e      	bge.n	248a <usb_device_endpoint_clear_halt+0x4a>
    244c:	0159      	lsls	r1, r3, #5
    244e:	6802      	ldr	r2, [r0, #0]
    2450:	1852      	adds	r2, r2, r1
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    2452:	2483      	movs	r4, #131	; 0x83
    2454:	0064      	lsls	r4, r4, #1
    2456:	5d14      	ldrb	r4, [r2, r4]
    2458:	06a4      	lsls	r4, r4, #26
    245a:	d534      	bpl.n	24c6 <usb_device_endpoint_clear_halt+0x86>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    245c:	2520      	movs	r5, #32
    245e:	2482      	movs	r4, #130	; 0x82
    2460:	0064      	lsls	r4, r4, #1
    2462:	5515      	strb	r5, [r2, r4]
    2464:	6802      	ldr	r2, [r0, #0]
    2466:	4694      	mov	ip, r2
    2468:	4461      	add	r1, ip
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    246a:	2208      	movs	r2, #8
    246c:	32ff      	adds	r2, #255	; 0xff
    246e:	5c8a      	ldrb	r2, [r1, r2]
    2470:	0652      	lsls	r2, r2, #25
    2472:	d528      	bpl.n	24c6 <usb_device_endpoint_clear_halt+0x86>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    2474:	3cc4      	subs	r4, #196	; 0xc4
    2476:	2208      	movs	r2, #8
    2478:	32ff      	adds	r2, #255	; 0xff
    247a:	548c      	strb	r4, [r1, r2]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    247c:	6802      	ldr	r2, [r0, #0]
    247e:	3308      	adds	r3, #8
    2480:	015b      	lsls	r3, r3, #5
    2482:	18d3      	adds	r3, r2, r3
    2484:	2202      	movs	r2, #2
    2486:	711a      	strb	r2, [r3, #4]
    2488:	e01d      	b.n	24c6 <usb_device_endpoint_clear_halt+0x86>
    248a:	0159      	lsls	r1, r3, #5
    248c:	6802      	ldr	r2, [r0, #0]
    248e:	1852      	adds	r2, r2, r1
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    2490:	2483      	movs	r4, #131	; 0x83
    2492:	0064      	lsls	r4, r4, #1
    2494:	5d14      	ldrb	r4, [r2, r4]
    2496:	06e4      	lsls	r4, r4, #27
    2498:	d515      	bpl.n	24c6 <usb_device_endpoint_clear_halt+0x86>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    249a:	2510      	movs	r5, #16
    249c:	2482      	movs	r4, #130	; 0x82
    249e:	0064      	lsls	r4, r4, #1
    24a0:	5515      	strb	r5, [r2, r4]
    24a2:	6802      	ldr	r2, [r0, #0]
    24a4:	4694      	mov	ip, r2
    24a6:	4461      	add	r1, ip
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    24a8:	2208      	movs	r2, #8
    24aa:	32ff      	adds	r2, #255	; 0xff
    24ac:	5c8a      	ldrb	r2, [r1, r2]
    24ae:	0692      	lsls	r2, r2, #26
    24b0:	d509      	bpl.n	24c6 <usb_device_endpoint_clear_halt+0x86>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    24b2:	3ce4      	subs	r4, #228	; 0xe4
    24b4:	2208      	movs	r2, #8
    24b6:	32ff      	adds	r2, #255	; 0xff
    24b8:	548c      	strb	r4, [r1, r2]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    24ba:	6802      	ldr	r2, [r0, #0]
    24bc:	3308      	adds	r3, #8
    24be:	015b      	lsls	r3, r3, #5
    24c0:	18d3      	adds	r3, r2, r3
    24c2:	2201      	movs	r2, #1
    24c4:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    24c6:	bd30      	pop	{r4, r5, pc}

000024c8 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    24c8:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    24ca:	1c0c      	adds	r4, r1, #0
    24cc:	3408      	adds	r4, #8
    24ce:	0164      	lsls	r4, r4, #5
    24d0:	6805      	ldr	r5, [r0, #0]
    24d2:	5d64      	ldrb	r4, [r4, r5]
    24d4:	0664      	lsls	r4, r4, #25
    24d6:	0f64      	lsrs	r4, r4, #29
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    24d8:	251c      	movs	r5, #28
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    24da:	2c00      	cmp	r4, #0
    24dc:	d016      	beq.n	250c <usb_device_endpoint_write_buffer_job+0x44>
		return STATUS_ERR_DENIED;
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    24de:	014c      	lsls	r4, r1, #5
    24e0:	4d0b      	ldr	r5, [pc, #44]	; (2510 <usb_device_endpoint_write_buffer_job+0x48>)
    24e2:	192d      	adds	r5, r5, r4
    24e4:	1c2c      	adds	r4, r5, #0
    24e6:	612a      	str	r2, [r5, #16]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    24e8:	696d      	ldr	r5, [r5, #20]
    24ea:	4a0a      	ldr	r2, [pc, #40]	; (2514 <usb_device_endpoint_write_buffer_job+0x4c>)
    24ec:	402a      	ands	r2, r5
    24ee:	6162      	str	r2, [r4, #20]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    24f0:	049b      	lsls	r3, r3, #18
    24f2:	0c9a      	lsrs	r2, r3, #18
    24f4:	6963      	ldr	r3, [r4, #20]
    24f6:	0b9b      	lsrs	r3, r3, #14
    24f8:	039b      	lsls	r3, r3, #14
    24fa:	4313      	orrs	r3, r2
    24fc:	6163      	str	r3, [r4, #20]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    24fe:	6803      	ldr	r3, [r0, #0]
    2500:	3108      	adds	r1, #8
    2502:	0149      	lsls	r1, r1, #5
    2504:	1859      	adds	r1, r3, r1
    2506:	2380      	movs	r3, #128	; 0x80
    2508:	714b      	strb	r3, [r1, #5]

	return STATUS_OK;
    250a:	2500      	movs	r5, #0
}
    250c:	1c28      	adds	r0, r5, #0
    250e:	bd30      	pop	{r4, r5, pc}
    2510:	20000a08 	.word	0x20000a08
    2514:	f0003fff 	.word	0xf0003fff

00002518 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    2518:	b530      	push	{r4, r5, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    251a:	1c0c      	adds	r4, r1, #0
    251c:	3408      	adds	r4, #8
    251e:	0164      	lsls	r4, r4, #5
    2520:	6805      	ldr	r5, [r0, #0]
    2522:	5d65      	ldrb	r5, [r4, r5]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
		return STATUS_ERR_DENIED;
    2524:	241c      	movs	r4, #28
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    2526:	076d      	lsls	r5, r5, #29
    2528:	d015      	beq.n	2556 <usb_device_endpoint_read_buffer_job+0x3e>
		return STATUS_ERR_DENIED;
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    252a:	4d0c      	ldr	r5, [pc, #48]	; (255c <usb_device_endpoint_read_buffer_job+0x44>)
    252c:	014c      	lsls	r4, r1, #5
    252e:	5162      	str	r2, [r4, r5]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    2530:	192c      	adds	r4, r5, r4
    2532:	049b      	lsls	r3, r3, #18
    2534:	091a      	lsrs	r2, r3, #4
    2536:	6865      	ldr	r5, [r4, #4]
    2538:	4b09      	ldr	r3, [pc, #36]	; (2560 <usb_device_endpoint_read_buffer_job+0x48>)
    253a:	402b      	ands	r3, r5
    253c:	4313      	orrs	r3, r2
    253e:	6063      	str	r3, [r4, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    2540:	6863      	ldr	r3, [r4, #4]
    2542:	0b9b      	lsrs	r3, r3, #14
    2544:	039b      	lsls	r3, r3, #14
    2546:	6063      	str	r3, [r4, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    2548:	6803      	ldr	r3, [r0, #0]
    254a:	3108      	adds	r1, #8
    254c:	0149      	lsls	r1, r1, #5
    254e:	1859      	adds	r1, r3, r1
    2550:	2340      	movs	r3, #64	; 0x40
    2552:	710b      	strb	r3, [r1, #4]

	return STATUS_OK;
    2554:	2400      	movs	r4, #0
}
    2556:	1c20      	adds	r0, r4, #0
    2558:	bd30      	pop	{r4, r5, pc}
    255a:	46c0      	nop			; (mov r8, r8)
    255c:	20000a08 	.word	0x20000a08
    2560:	f0003fff 	.word	0xf0003fff

00002564 <usb_device_endpoint_setup_buffer_job>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    2564:	4b09      	ldr	r3, [pc, #36]	; (258c <usb_device_endpoint_setup_buffer_job+0x28>)
    2566:	6019      	str	r1, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    2568:	6859      	ldr	r1, [r3, #4]
    256a:	4a09      	ldr	r2, [pc, #36]	; (2590 <usb_device_endpoint_setup_buffer_job+0x2c>)
    256c:	400a      	ands	r2, r1
    256e:	2180      	movs	r1, #128	; 0x80
    2570:	0289      	lsls	r1, r1, #10
    2572:	430a      	orrs	r2, r1
    2574:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    2576:	685a      	ldr	r2, [r3, #4]
    2578:	0b92      	lsrs	r2, r2, #14
    257a:	0392      	lsls	r2, r2, #14
    257c:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    257e:	6802      	ldr	r2, [r0, #0]
    2580:	2140      	movs	r1, #64	; 0x40
    2582:	2382      	movs	r3, #130	; 0x82
    2584:	005b      	lsls	r3, r3, #1
    2586:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
}
    2588:	2000      	movs	r0, #0
    258a:	4770      	bx	lr
    258c:	20000a08 	.word	0x20000a08
    2590:	f0003fff 	.word	0xf0003fff

00002594 <usb_enable>:
void usb_enable(struct usb_module *module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    2594:	6802      	ldr	r2, [r0, #0]
    2596:	7811      	ldrb	r1, [r2, #0]
    2598:	2302      	movs	r3, #2
    259a:	430b      	orrs	r3, r1
    259c:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    259e:	6802      	ldr	r2, [r0, #0]
    25a0:	7893      	ldrb	r3, [r2, #2]
    25a2:	2b02      	cmp	r3, #2
    25a4:	d0fc      	beq.n	25a0 <usb_enable+0xc>
}
    25a6:	4770      	bx	lr

000025a8 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    25a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    25aa:	465f      	mov	r7, fp
    25ac:	4656      	mov	r6, sl
    25ae:	464d      	mov	r5, r9
    25b0:	4644      	mov	r4, r8
    25b2:	b4f0      	push	{r4, r5, r6, r7}
    25b4:	b083      	sub	sp, #12
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    25b6:	4bc8      	ldr	r3, [pc, #800]	; (28d8 <USB_Handler+0x330>)
    25b8:	681f      	ldr	r7, [r3, #0]
    25ba:	683d      	ldr	r5, [r7, #0]
    25bc:	782b      	ldrb	r3, [r5, #0]
    25be:	09db      	lsrs	r3, r3, #7
    25c0:	d100      	bne.n	25c4 <USB_Handler+0x1c>
    25c2:	e154      	b.n	286e <USB_Handler+0x2c6>
{
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    25c4:	8c28      	ldrh	r0, [r5, #32]
    25c6:	b280      	uxth	r0, r0
    25c8:	4bc4      	ldr	r3, [pc, #784]	; (28dc <USB_Handler+0x334>)
    25ca:	4798      	blx	r3
    25cc:	1e04      	subs	r4, r0, #0
	if (pipe_int < 32) {
    25ce:	2c1f      	cmp	r4, #31
    25d0:	d900      	bls.n	25d4 <USB_Handler+0x2c>
    25d2:	e0d2      	b.n	277a <USB_Handler+0x1d2>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    25d4:	1c03      	adds	r3, r0, #0
    25d6:	3308      	adds	r3, #8
    25d8:	015b      	lsls	r3, r3, #5
    25da:	18ed      	adds	r5, r5, r3
    25dc:	79ed      	ldrb	r5, [r5, #7]
    25de:	b2ed      	uxtb	r5, r5

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    25e0:	07ab      	lsls	r3, r5, #30
    25e2:	d050      	beq.n	2686 <USB_Handler+0xde>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    25e4:	4abe      	ldr	r2, [pc, #760]	; (28e0 <USB_Handler+0x338>)
    25e6:	2301      	movs	r3, #1
    25e8:	4083      	lsls	r3, r0
    25ea:	6811      	ldr	r1, [r2, #0]
    25ec:	4399      	bics	r1, r3
    25ee:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    25f0:	1c03      	adds	r3, r0, #0
    25f2:	3308      	adds	r3, #8
    25f4:	015b      	lsls	r3, r3, #5
    25f6:	683a      	ldr	r2, [r7, #0]
    25f8:	4694      	mov	ip, r2
    25fa:	4463      	add	r3, ip
    25fc:	2203      	movs	r2, #3
    25fe:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    2600:	183b      	adds	r3, r7, r0
    2602:	33a8      	adds	r3, #168	; 0xa8
    2604:	799b      	ldrb	r3, [r3, #6]
    2606:	07db      	lsls	r3, r3, #31
    2608:	d53d      	bpl.n	2686 <USB_Handler+0xde>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
    260a:	4bb6      	ldr	r3, [pc, #728]	; (28e4 <USB_Handler+0x33c>)
    260c:	7018      	strb	r0, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    260e:	683a      	ldr	r2, [r7, #0]
    2610:	1c03      	adds	r3, r0, #0
    2612:	3308      	adds	r3, #8
    2614:	015b      	lsls	r3, r3, #5
    2616:	5c9b      	ldrb	r3, [r3, r2]
    2618:	2203      	movs	r2, #3
    261a:	4013      	ands	r3, r2
    261c:	2b01      	cmp	r3, #1
    261e:	d110      	bne.n	2642 <USB_Handler+0x9a>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    2620:	0142      	lsls	r2, r0, #5
    2622:	4bb1      	ldr	r3, [pc, #708]	; (28e8 <USB_Handler+0x340>)
    2624:	189b      	adds	r3, r3, r2
    2626:	685a      	ldr	r2, [r3, #4]
    2628:	0492      	lsls	r2, r2, #18
    262a:	0c92      	lsrs	r2, r2, #18
    262c:	49ad      	ldr	r1, [pc, #692]	; (28e4 <USB_Handler+0x33c>)
    262e:	804a      	strh	r2, [r1, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    2630:	685a      	ldr	r2, [r3, #4]
    2632:	0112      	lsls	r2, r2, #4
    2634:	0c92      	lsrs	r2, r2, #18
    2636:	808a      	strh	r2, [r1, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    2638:	685a      	ldr	r2, [r3, #4]
    263a:	0b92      	lsrs	r2, r2, #14
    263c:	0392      	lsls	r2, r2, #14
    263e:	605a      	str	r2, [r3, #4]
    2640:	e019      	b.n	2676 <USB_Handler+0xce>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    2642:	0143      	lsls	r3, r0, #5
    2644:	4aa8      	ldr	r2, [pc, #672]	; (28e8 <USB_Handler+0x340>)
    2646:	18d3      	adds	r3, r2, r3
    2648:	685a      	ldr	r2, [r3, #4]
    264a:	0112      	lsls	r2, r2, #4
    264c:	0c92      	lsrs	r2, r2, #18
    264e:	48a5      	ldr	r0, [pc, #660]	; (28e4 <USB_Handler+0x33c>)
    2650:	8042      	strh	r2, [r0, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    2652:	6859      	ldr	r1, [r3, #4]
    2654:	0489      	lsls	r1, r1, #18
    2656:	0c89      	lsrs	r1, r1, #18
    2658:	8081      	strh	r1, [r0, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    265a:	6858      	ldr	r0, [r3, #4]
    265c:	49a3      	ldr	r1, [pc, #652]	; (28ec <USB_Handler+0x344>)
    265e:	4001      	ands	r1, r0
    2660:	6059      	str	r1, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    2662:	2a00      	cmp	r2, #0
    2664:	d107      	bne.n	2676 <USB_Handler+0xce>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    2666:	0163      	lsls	r3, r4, #5
    2668:	4a9f      	ldr	r2, [pc, #636]	; (28e8 <USB_Handler+0x340>)
    266a:	18d3      	adds	r3, r2, r3
    266c:	685b      	ldr	r3, [r3, #4]
    266e:	049b      	lsls	r3, r3, #18
    2670:	0c9b      	lsrs	r3, r3, #18
    2672:	4a9c      	ldr	r2, [pc, #624]	; (28e4 <USB_Handler+0x33c>)
    2674:	8053      	strh	r3, [r2, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    2676:	4b98      	ldr	r3, [pc, #608]	; (28d8 <USB_Handler+0x330>)
    2678:	6818      	ldr	r0, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    267a:	1ca3      	adds	r3, r4, #2
    267c:	011b      	lsls	r3, r3, #4
    267e:	18c3      	adds	r3, r0, r3
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
					if (0 == pipe_callback_para.transfered_size) {
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    2680:	685b      	ldr	r3, [r3, #4]
    2682:	4998      	ldr	r1, [pc, #608]	; (28e4 <USB_Handler+0x33c>)
    2684:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    2686:	076b      	lsls	r3, r5, #29
    2688:	d50e      	bpl.n	26a8 <USB_Handler+0x100>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    268a:	4a95      	ldr	r2, [pc, #596]	; (28e0 <USB_Handler+0x338>)
    268c:	2301      	movs	r3, #1
    268e:	40a3      	lsls	r3, r4
    2690:	6811      	ldr	r1, [r2, #0]
    2692:	4399      	bics	r1, r3
    2694:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2696:	4b90      	ldr	r3, [pc, #576]	; (28d8 <USB_Handler+0x330>)
    2698:	681b      	ldr	r3, [r3, #0]
    269a:	681a      	ldr	r2, [r3, #0]
    269c:	1c23      	adds	r3, r4, #0
    269e:	3308      	adds	r3, #8
    26a0:	015b      	lsls	r3, r3, #5
    26a2:	18d3      	adds	r3, r2, r3
    26a4:	2204      	movs	r2, #4
    26a6:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    26a8:	072b      	lsls	r3, r5, #28
    26aa:	d521      	bpl.n	26f0 <USB_Handler+0x148>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    26ac:	4a8c      	ldr	r2, [pc, #560]	; (28e0 <USB_Handler+0x338>)
    26ae:	2301      	movs	r3, #1
    26b0:	40a3      	lsls	r3, r4
    26b2:	6811      	ldr	r1, [r2, #0]
    26b4:	4399      	bics	r1, r3
    26b6:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    26b8:	4b87      	ldr	r3, [pc, #540]	; (28d8 <USB_Handler+0x330>)
    26ba:	6818      	ldr	r0, [r3, #0]
    26bc:	1c23      	adds	r3, r4, #0
    26be:	3308      	adds	r3, #8
    26c0:	015b      	lsls	r3, r3, #5
    26c2:	6802      	ldr	r2, [r0, #0]
    26c4:	4694      	mov	ip, r2
    26c6:	4463      	add	r3, ip
    26c8:	2208      	movs	r2, #8
    26ca:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    26cc:	1903      	adds	r3, r0, r4
    26ce:	33a8      	adds	r3, #168	; 0xa8
    26d0:	799b      	ldrb	r3, [r3, #6]
    26d2:	079b      	lsls	r3, r3, #30
    26d4:	d50c      	bpl.n	26f0 <USB_Handler+0x148>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    26d6:	4983      	ldr	r1, [pc, #524]	; (28e4 <USB_Handler+0x33c>)
    26d8:	700c      	strb	r4, [r1, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    26da:	0163      	lsls	r3, r4, #5
    26dc:	4a82      	ldr	r2, [pc, #520]	; (28e8 <USB_Handler+0x340>)
    26de:	18d3      	adds	r3, r2, r3
    26e0:	89da      	ldrh	r2, [r3, #14]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
    26e2:	231f      	movs	r3, #31
    26e4:	4013      	ands	r3, r2
    26e6:	704b      	strb	r3, [r1, #1]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    26e8:	0123      	lsls	r3, r4, #4
    26ea:	18c3      	adds	r3, r0, r3
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    26ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26ee:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    26f0:	06eb      	lsls	r3, r5, #27
    26f2:	d522      	bpl.n	273a <USB_Handler+0x192>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    26f4:	4a7a      	ldr	r2, [pc, #488]	; (28e0 <USB_Handler+0x338>)
    26f6:	2301      	movs	r3, #1
    26f8:	40a3      	lsls	r3, r4
    26fa:	6811      	ldr	r1, [r2, #0]
    26fc:	4399      	bics	r1, r3
    26fe:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    2700:	4b75      	ldr	r3, [pc, #468]	; (28d8 <USB_Handler+0x330>)
    2702:	6818      	ldr	r0, [r3, #0]
    2704:	1c23      	adds	r3, r4, #0
    2706:	3308      	adds	r3, #8
    2708:	015b      	lsls	r3, r3, #5
    270a:	6802      	ldr	r2, [r0, #0]
    270c:	4694      	mov	ip, r2
    270e:	4463      	add	r3, ip
    2710:	2210      	movs	r2, #16
    2712:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    2714:	1903      	adds	r3, r0, r4
    2716:	33a8      	adds	r3, #168	; 0xa8
    2718:	799b      	ldrb	r3, [r3, #6]
    271a:	075b      	lsls	r3, r3, #29
    271c:	d50d      	bpl.n	273a <USB_Handler+0x192>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    271e:	4a71      	ldr	r2, [pc, #452]	; (28e4 <USB_Handler+0x33c>)
    2720:	7014      	strb	r4, [r2, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    2722:	0163      	lsls	r3, r4, #5
    2724:	4970      	ldr	r1, [pc, #448]	; (28e8 <USB_Handler+0x340>)
    2726:	18cb      	adds	r3, r1, r3
    2728:	685b      	ldr	r3, [r3, #4]
    272a:	011b      	lsls	r3, r3, #4
    272c:	0c9b      	lsrs	r3, r3, #18
    272e:	8053      	strh	r3, [r2, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    2730:	0123      	lsls	r3, r4, #4
    2732:	18c3      	adds	r3, r0, r3
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
				(_usb_instances->host_pipe_callback[pipe_int]
    2734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2736:	2100      	movs	r1, #0
    2738:	4798      	blx	r3
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    273a:	06ab      	lsls	r3, r5, #26
    273c:	d400      	bmi.n	2740 <USB_Handler+0x198>
    273e:	e1f8      	b.n	2b32 <USB_Handler+0x58a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    2740:	4a67      	ldr	r2, [pc, #412]	; (28e0 <USB_Handler+0x338>)
    2742:	2301      	movs	r3, #1
    2744:	40a3      	lsls	r3, r4
    2746:	6811      	ldr	r1, [r2, #0]
    2748:	4399      	bics	r1, r3
    274a:	6011      	str	r1, [r2, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    274c:	4b62      	ldr	r3, [pc, #392]	; (28d8 <USB_Handler+0x330>)
    274e:	6818      	ldr	r0, [r3, #0]
    2750:	1c23      	adds	r3, r4, #0
    2752:	3308      	adds	r3, #8
    2754:	015b      	lsls	r3, r3, #5
    2756:	6802      	ldr	r2, [r0, #0]
    2758:	4694      	mov	ip, r2
    275a:	4463      	add	r3, ip
    275c:	2220      	movs	r2, #32
    275e:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    2760:	1903      	adds	r3, r0, r4
    2762:	33a8      	adds	r3, #168	; 0xa8
    2764:	799b      	ldrb	r3, [r3, #6]
    2766:	071b      	lsls	r3, r3, #28
    2768:	d400      	bmi.n	276c <USB_Handler+0x1c4>
    276a:	e1e2      	b.n	2b32 <USB_Handler+0x58a>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    276c:	495d      	ldr	r1, [pc, #372]	; (28e4 <USB_Handler+0x33c>)
    276e:	700c      	strb	r4, [r1, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    2770:	0124      	lsls	r4, r4, #4
    2772:	1904      	adds	r4, r0, r4
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
				(_usb_instances->host_pipe_callback[pipe_int]
    2774:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2776:	4798      	blx	r3
    2778:	e1db      	b.n	2b32 <USB_Handler+0x58a>

	} else {
		/* host interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    277a:	8bac      	ldrh	r4, [r5, #28]
    277c:	b2a4      	uxth	r4, r4

		/* host SOF interrupt */
		if (flags & USB_HOST_INTFLAG_HSOF) {
    277e:	0763      	lsls	r3, r4, #29
    2780:	d508      	bpl.n	2794 <USB_Handler+0x1ec>
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    2782:	2304      	movs	r3, #4
    2784:	83ab      	strh	r3, [r5, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    2786:	33a1      	adds	r3, #161	; 0xa1
    2788:	5cfb      	ldrb	r3, [r7, r3]
    278a:	07db      	lsls	r3, r3, #31
    278c:	d502      	bpl.n	2794 <USB_Handler+0x1ec>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    278e:	687b      	ldr	r3, [r7, #4]
    2790:	1c38      	adds	r0, r7, #0
    2792:	4798      	blx	r3
			}
		}

		/* host reset interrupt */
		if (flags & USB_HOST_INTFLAG_RST) {
    2794:	0723      	lsls	r3, r4, #28
    2796:	d50d      	bpl.n	27b4 <USB_Handler+0x20c>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    2798:	2200      	movs	r2, #0
    279a:	4b51      	ldr	r3, [pc, #324]	; (28e0 <USB_Handler+0x338>)
    279c:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    279e:	4b4e      	ldr	r3, [pc, #312]	; (28d8 <USB_Handler+0x330>)
    27a0:	6818      	ldr	r0, [r3, #0]
    27a2:	2308      	movs	r3, #8
    27a4:	6802      	ldr	r2, [r0, #0]
    27a6:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    27a8:	339d      	adds	r3, #157	; 0x9d
    27aa:	5cc3      	ldrb	r3, [r0, r3]
    27ac:	079b      	lsls	r3, r3, #30
    27ae:	d501      	bpl.n	27b4 <USB_Handler+0x20c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    27b0:	6883      	ldr	r3, [r0, #8]
    27b2:	4798      	blx	r3
			}
		}

		/* host upstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    27b4:	0663      	lsls	r3, r4, #25
    27b6:	d50a      	bpl.n	27ce <USB_Handler+0x226>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    27b8:	4b47      	ldr	r3, [pc, #284]	; (28d8 <USB_Handler+0x330>)
    27ba:	6818      	ldr	r0, [r3, #0]
    27bc:	2340      	movs	r3, #64	; 0x40
    27be:	6802      	ldr	r2, [r0, #0]
    27c0:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    27c2:	3365      	adds	r3, #101	; 0x65
    27c4:	5cc3      	ldrb	r3, [r0, r3]
    27c6:	06db      	lsls	r3, r3, #27
    27c8:	d501      	bpl.n	27ce <USB_Handler+0x226>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    27ca:	6943      	ldr	r3, [r0, #20]
    27cc:	4798      	blx	r3
			}
		}

		/* host downstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    27ce:	06a3      	lsls	r3, r4, #26
    27d0:	d50a      	bpl.n	27e8 <USB_Handler+0x240>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    27d2:	4b41      	ldr	r3, [pc, #260]	; (28d8 <USB_Handler+0x330>)
    27d4:	6818      	ldr	r0, [r3, #0]
    27d6:	2320      	movs	r3, #32
    27d8:	6802      	ldr	r2, [r0, #0]
    27da:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    27dc:	3385      	adds	r3, #133	; 0x85
    27de:	5cc3      	ldrb	r3, [r0, r3]
    27e0:	071b      	lsls	r3, r3, #28
    27e2:	d501      	bpl.n	27e8 <USB_Handler+0x240>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    27e4:	6903      	ldr	r3, [r0, #16]
    27e6:	4798      	blx	r3
			}
		}

		/* host wakeup interrupts */
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    27e8:	06e3      	lsls	r3, r4, #27
    27ea:	d50a      	bpl.n	2802 <USB_Handler+0x25a>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    27ec:	4b3a      	ldr	r3, [pc, #232]	; (28d8 <USB_Handler+0x330>)
    27ee:	6818      	ldr	r0, [r3, #0]
    27f0:	2310      	movs	r3, #16
    27f2:	6802      	ldr	r2, [r0, #0]
    27f4:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    27f6:	3395      	adds	r3, #149	; 0x95
    27f8:	5cc3      	ldrb	r3, [r0, r3]
    27fa:	075b      	lsls	r3, r3, #29
    27fc:	d501      	bpl.n	2802 <USB_Handler+0x25a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    27fe:	68c3      	ldr	r3, [r0, #12]
    2800:	4798      	blx	r3
			}
		}

		/* host ram access interrupt  */
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    2802:	0623      	lsls	r3, r4, #24
    2804:	d50d      	bpl.n	2822 <USB_Handler+0x27a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    2806:	2200      	movs	r2, #0
    2808:	4b35      	ldr	r3, [pc, #212]	; (28e0 <USB_Handler+0x338>)
    280a:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    280c:	4b32      	ldr	r3, [pc, #200]	; (28d8 <USB_Handler+0x330>)
    280e:	6818      	ldr	r0, [r3, #0]
    2810:	2380      	movs	r3, #128	; 0x80
    2812:	6802      	ldr	r2, [r0, #0]
    2814:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    2816:	3325      	adds	r3, #37	; 0x25
    2818:	5cc3      	ldrb	r3, [r0, r3]
    281a:	069b      	lsls	r3, r3, #26
    281c:	d501      	bpl.n	2822 <USB_Handler+0x27a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    281e:	6983      	ldr	r3, [r0, #24]
    2820:	4798      	blx	r3
			}
		}

		/* host connect interrupt */
		if (flags & USB_HOST_INTFLAG_DCONN) {
    2822:	05e3      	lsls	r3, r4, #23
    2824:	d50e      	bpl.n	2844 <USB_Handler+0x29c>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    2826:	2200      	movs	r2, #0
    2828:	4b2d      	ldr	r3, [pc, #180]	; (28e0 <USB_Handler+0x338>)
    282a:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    282c:	4b2a      	ldr	r3, [pc, #168]	; (28d8 <USB_Handler+0x330>)
    282e:	6818      	ldr	r0, [r3, #0]
    2830:	2380      	movs	r3, #128	; 0x80
    2832:	005b      	lsls	r3, r3, #1
    2834:	6802      	ldr	r2, [r0, #0]
    2836:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    2838:	3b5b      	subs	r3, #91	; 0x5b
    283a:	5cc3      	ldrb	r3, [r0, r3]
    283c:	065b      	lsls	r3, r3, #25
    283e:	d501      	bpl.n	2844 <USB_Handler+0x29c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    2840:	69c3      	ldr	r3, [r0, #28]
    2842:	4798      	blx	r3
			}
		}

		/* host disconnect interrupt 	*/
		if (flags & USB_HOST_INTFLAG_DDISC) {
    2844:	05a3      	lsls	r3, r4, #22
    2846:	d400      	bmi.n	284a <USB_Handler+0x2a2>
    2848:	e173      	b.n	2b32 <USB_Handler+0x58a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    284a:	2200      	movs	r2, #0
    284c:	4b24      	ldr	r3, [pc, #144]	; (28e0 <USB_Handler+0x338>)
    284e:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    2850:	4b21      	ldr	r3, [pc, #132]	; (28d8 <USB_Handler+0x330>)
    2852:	6818      	ldr	r0, [r3, #0]
    2854:	2380      	movs	r3, #128	; 0x80
    2856:	009b      	lsls	r3, r3, #2
    2858:	6802      	ldr	r2, [r0, #0]
    285a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    285c:	3b5c      	subs	r3, #92	; 0x5c
    285e:	3bff      	subs	r3, #255	; 0xff
    2860:	5cc3      	ldrb	r3, [r0, r3]
    2862:	2b7f      	cmp	r3, #127	; 0x7f
    2864:	d800      	bhi.n	2868 <USB_Handler+0x2c0>
    2866:	e164      	b.n	2b32 <USB_Handler+0x58a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    2868:	6a03      	ldr	r3, [r0, #32]
    286a:	4798      	blx	r3
    286c:	e161      	b.n	2b32 <USB_Handler+0x58a>

static void _usb_device_interrupt_handler(void)
{
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    286e:	8c2e      	ldrh	r6, [r5, #32]
    2870:	b2b6      	uxth	r6, r6

	/* device interrupt */
	if (0 == ep_inst) {
    2872:	2e00      	cmp	r6, #0
    2874:	d140      	bne.n	28f8 <USB_Handler+0x350>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    2876:	8bae      	ldrh	r6, [r5, #28]
    2878:	b2b6      	uxth	r6, r6
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    287a:	23ab      	movs	r3, #171	; 0xab
    287c:	005b      	lsls	r3, r3, #1
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    287e:	5afd      	ldrh	r5, [r7, r3]
    2880:	4035      	ands	r5, r6
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;
    2882:	3b02      	subs	r3, #2
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    2884:	5afb      	ldrh	r3, [r7, r3]
    2886:	401d      	ands	r5, r3
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    2888:	2400      	movs	r4, #0
			if (flags & _usb_device_irq_bits[i]) {
    288a:	4f19      	ldr	r7, [pc, #100]	; (28f0 <USB_Handler+0x348>)
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    288c:	4b12      	ldr	r3, [pc, #72]	; (28d8 <USB_Handler+0x330>)
    288e:	4699      	mov	r9, r3
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    2890:	4698      	mov	r8, r3
    2892:	0063      	lsls	r3, r4, #1
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
			if (flags & _usb_device_irq_bits[i]) {
    2894:	5bdb      	ldrh	r3, [r3, r7]
    2896:	421e      	tst	r6, r3
    2898:	d003      	beq.n	28a2 <USB_Handler+0x2fa>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    289a:	464a      	mov	r2, r9
    289c:	6812      	ldr	r2, [r2, #0]
    289e:	6812      	ldr	r2, [r2, #0]
    28a0:	8393      	strh	r3, [r2, #28]
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    28a2:	421d      	tst	r5, r3
    28a4:	d013      	beq.n	28ce <USB_Handler+0x326>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    28a6:	2c06      	cmp	r4, #6
    28a8:	d107      	bne.n	28ba <USB_Handler+0x312>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    28aa:	4b0f      	ldr	r3, [pc, #60]	; (28e8 <USB_Handler+0x340>)
    28ac:	891b      	ldrh	r3, [r3, #8]
    28ae:	091a      	lsrs	r2, r3, #4
				_usb_instances->hw->DEVICE.INTFLAG.reg =
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
    28b0:	2380      	movs	r3, #128	; 0x80
    28b2:	005b      	lsls	r3, r3, #1
    28b4:	4013      	ands	r3, r2
    28b6:	4a0f      	ldr	r2, [pc, #60]	; (28f4 <USB_Handler+0x34c>)
    28b8:	6013      	str	r3, [r2, #0]
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    28ba:	1c23      	adds	r3, r4, #0
    28bc:	332e      	adds	r3, #46	; 0x2e
    28be:	009b      	lsls	r3, r3, #2
    28c0:	4642      	mov	r2, r8
    28c2:	6812      	ldr	r2, [r2, #0]
    28c4:	589b      	ldr	r3, [r3, r2]
    28c6:	4642      	mov	r2, r8
    28c8:	6810      	ldr	r0, [r2, #0]
    28ca:	490a      	ldr	r1, [pc, #40]	; (28f4 <USB_Handler+0x34c>)
    28cc:	4798      	blx	r3
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    28ce:	3401      	adds	r4, #1
    28d0:	2c07      	cmp	r4, #7
    28d2:	d1de      	bne.n	2892 <USB_Handler+0x2ea>
    28d4:	e12d      	b.n	2b32 <USB_Handler+0x58a>
    28d6:	46c0      	nop			; (mov r8, r8)
    28d8:	20000708 	.word	0x20000708
    28dc:	00003b65 	.word	0x00003b65
    28e0:	200006fc 	.word	0x200006fc
    28e4:	200006f4 	.word	0x200006f4
    28e8:	20000a08 	.word	0x20000a08
    28ec:	f0003fff 	.word	0xf0003fff
    28f0:	00003c2c 	.word	0x00003c2c
    28f4:	200006f0 	.word	0x200006f0
    28f8:	1c3c      	adds	r4, r7, #0
    28fa:	3459      	adds	r4, #89	; 0x59
    28fc:	34ff      	adds	r4, #255	; 0xff
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;

	/* device interrupt */
	if (0 == ep_inst) {
    28fe:	2300      	movs	r3, #0
	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
    2900:	2201      	movs	r2, #1
    2902:	4694      	mov	ip, r2
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    2904:	325f      	adds	r2, #95	; 0x5f
    2906:	4691      	mov	r9, r2
					}
					return;
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2908:	3a50      	subs	r2, #80	; 0x50
    290a:	4692      	mov	sl, r2
					}
					return;
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    290c:	3a04      	subs	r2, #4
    290e:	4693      	mov	fp, r2
					}
					return;
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    2910:	46b8      	mov	r8, r7
    2912:	1c2f      	adds	r7, r5, #0
    2914:	b2d8      	uxtb	r0, r3
	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
    2916:	9301      	str	r3, [sp, #4]
    2918:	1c32      	adds	r2, r6, #0
    291a:	411a      	asrs	r2, r3
    291c:	4661      	mov	r1, ip
    291e:	4211      	tst	r1, r2
    2920:	d100      	bne.n	2924 <USB_Handler+0x37c>
    2922:	e101      	b.n	2b28 <USB_Handler+0x580>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    2924:	1c1a      	adds	r2, r3, #0
    2926:	3208      	adds	r2, #8
    2928:	0152      	lsls	r2, r2, #5
    292a:	18ba      	adds	r2, r7, r2
    292c:	79d2      	ldrb	r2, [r2, #7]
    292e:	b2d2      	uxtb	r2, r2
    2930:	7a21      	ldrb	r1, [r4, #8]
    2932:	7825      	ldrb	r5, [r4, #0]
    2934:	4029      	ands	r1, r5
				flags_run = flags &
    2936:	4011      	ands	r1, r2
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    2938:	464d      	mov	r5, r9
    293a:	4215      	tst	r5, r2
    293c:	d02a      	beq.n	2994 <USB_Handler+0x3ec>
    293e:	1c3d      	adds	r5, r7, #0
    2940:	4647      	mov	r7, r8
    2942:	015b      	lsls	r3, r3, #5
    2944:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    2946:	2308      	movs	r3, #8
    2948:	33ff      	adds	r3, #255	; 0xff
    294a:	5ceb      	ldrb	r3, [r5, r3]
    294c:	065b      	lsls	r3, r3, #25
    294e:	d509      	bpl.n	2964 <USB_Handler+0x3bc>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    2950:	2240      	movs	r2, #64	; 0x40
    2952:	2308      	movs	r3, #8
    2954:	33ff      	adds	r3, #255	; 0xff
    2956:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    2958:	3b88      	subs	r3, #136	; 0x88
    295a:	3bff      	subs	r3, #255	; 0xff
    295c:	4303      	orrs	r3, r0
    295e:	4a78      	ldr	r2, [pc, #480]	; (2b40 <USB_Handler+0x598>)
    2960:	7193      	strb	r3, [r2, #6]
    2962:	e00a      	b.n	297a <USB_Handler+0x3d2>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    2964:	2308      	movs	r3, #8
    2966:	33ff      	adds	r3, #255	; 0xff
    2968:	5ceb      	ldrb	r3, [r5, r3]
    296a:	069b      	lsls	r3, r3, #26
    296c:	d505      	bpl.n	297a <USB_Handler+0x3d2>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    296e:	2220      	movs	r2, #32
    2970:	2308      	movs	r3, #8
    2972:	33ff      	adds	r3, #255	; 0xff
    2974:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    2976:	4b72      	ldr	r3, [pc, #456]	; (2b40 <USB_Handler+0x598>)
    2978:	7198      	strb	r0, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    297a:	2360      	movs	r3, #96	; 0x60
    297c:	420b      	tst	r3, r1
    297e:	d100      	bne.n	2982 <USB_Handler+0x3da>
    2980:	e0d7      	b.n	2b32 <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    2982:	9b01      	ldr	r3, [sp, #4]
    2984:	011b      	lsls	r3, r3, #4
    2986:	18fb      	adds	r3, r7, r3
    2988:	33dc      	adds	r3, #220	; 0xdc
    298a:	685b      	ldr	r3, [r3, #4]
    298c:	1c38      	adds	r0, r7, #0
    298e:	496c      	ldr	r1, [pc, #432]	; (2b40 <USB_Handler+0x598>)
    2990:	4798      	blx	r3
    2992:	e0ce      	b.n	2b32 <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    2994:	4655      	mov	r5, sl
    2996:	4215      	tst	r5, r2
    2998:	d01f      	beq.n	29da <USB_Handler+0x432>
    299a:	1c3d      	adds	r5, r7, #0
    299c:	4647      	mov	r7, r8
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    299e:	9a01      	ldr	r2, [sp, #4]
    29a0:	1c13      	adds	r3, r2, #0
    29a2:	3308      	adds	r3, #8
    29a4:	015b      	lsls	r3, r3, #5
    29a6:	18ed      	adds	r5, r5, r3
    29a8:	2310      	movs	r3, #16
    29aa:	71eb      	strb	r3, [r5, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    29ac:	18bb      	adds	r3, r7, r2
    29ae:	3361      	adds	r3, #97	; 0x61
    29b0:	33ff      	adds	r3, #255	; 0xff
    29b2:	781b      	ldrb	r3, [r3, #0]
    29b4:	06db      	lsls	r3, r3, #27
    29b6:	d400      	bmi.n	29ba <USB_Handler+0x412>
    29b8:	e0bb      	b.n	2b32 <USB_Handler+0x58a>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    29ba:	1c10      	adds	r0, r2, #0
    29bc:	0153      	lsls	r3, r2, #5
    29be:	4a61      	ldr	r2, [pc, #388]	; (2b44 <USB_Handler+0x59c>)
    29c0:	18d3      	adds	r3, r2, r3
    29c2:	685b      	ldr	r3, [r3, #4]
    29c4:	049b      	lsls	r3, r3, #18
    29c6:	0c9b      	lsrs	r3, r3, #18
    29c8:	495d      	ldr	r1, [pc, #372]	; (2b40 <USB_Handler+0x598>)
    29ca:	800b      	strh	r3, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    29cc:	0103      	lsls	r3, r0, #4
    29ce:	18fb      	adds	r3, r7, r3
    29d0:	33d8      	adds	r3, #216	; 0xd8
    29d2:	685b      	ldr	r3, [r3, #4]
    29d4:	4640      	mov	r0, r8
    29d6:	4798      	blx	r3
    29d8:	e0ab      	b.n	2b32 <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    29da:	465d      	mov	r5, fp
    29dc:	4215      	tst	r5, r2
    29de:	d05f      	beq.n	2aa0 <USB_Handler+0x4f8>
    29e0:	1c3d      	adds	r5, r7, #0
    29e2:	4647      	mov	r7, r8
    29e4:	4680      	mov	r8, r0
    29e6:	9b01      	ldr	r3, [sp, #4]
    29e8:	015b      	lsls	r3, r3, #5
    29ea:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    29ec:	2308      	movs	r3, #8
    29ee:	33ff      	adds	r3, #255	; 0xff
    29f0:	5ceb      	ldrb	r3, [r5, r3]
    29f2:	071b      	lsls	r3, r3, #28
    29f4:	d523      	bpl.n	2a3e <USB_Handler+0x496>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    29f6:	2208      	movs	r2, #8
    29f8:	2308      	movs	r3, #8
    29fa:	33ff      	adds	r3, #255	; 0xff
    29fc:	54ea      	strb	r2, [r5, r3]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    29fe:	9b01      	ldr	r3, [sp, #4]
    2a00:	015b      	lsls	r3, r3, #5
    2a02:	4a50      	ldr	r2, [pc, #320]	; (2b44 <USB_Handler+0x59c>)
    2a04:	18d3      	adds	r3, r2, r3
    2a06:	3318      	adds	r3, #24
    2a08:	789b      	ldrb	r3, [r3, #2]
    2a0a:	079b      	lsls	r3, r3, #30
    2a0c:	d507      	bpl.n	2a1e <USB_Handler+0x476>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    2a0e:	9b01      	ldr	r3, [sp, #4]
    2a10:	015a      	lsls	r2, r3, #5
    2a12:	4b4c      	ldr	r3, [pc, #304]	; (2b44 <USB_Handler+0x59c>)
    2a14:	189b      	adds	r3, r3, r2
    2a16:	7e9a      	ldrb	r2, [r3, #26]
    2a18:	2002      	movs	r0, #2
    2a1a:	4382      	bics	r2, r0
    2a1c:	769a      	strb	r2, [r3, #26]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    2a1e:	2380      	movs	r3, #128	; 0x80
    2a20:	425b      	negs	r3, r3
    2a22:	4642      	mov	r2, r8
    2a24:	4313      	orrs	r3, r2
    2a26:	4a46      	ldr	r2, [pc, #280]	; (2b40 <USB_Handler+0x598>)
    2a28:	7193      	strb	r3, [r2, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2a2a:	9b01      	ldr	r3, [sp, #4]
    2a2c:	3308      	adds	r3, #8
    2a2e:	015b      	lsls	r3, r3, #5
    2a30:	683a      	ldr	r2, [r7, #0]
    2a32:	4694      	mov	ip, r2
    2a34:	4463      	add	r3, ip
    2a36:	79db      	ldrb	r3, [r3, #7]
    2a38:	079b      	lsls	r3, r3, #30
    2a3a:	d525      	bpl.n	2a88 <USB_Handler+0x4e0>
    2a3c:	e079      	b.n	2b32 <USB_Handler+0x58a>
							return;
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    2a3e:	2308      	movs	r3, #8
    2a40:	33ff      	adds	r3, #255	; 0xff
    2a42:	5ceb      	ldrb	r3, [r5, r3]
    2a44:	075b      	lsls	r3, r3, #29
    2a46:	d51f      	bpl.n	2a88 <USB_Handler+0x4e0>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    2a48:	2204      	movs	r2, #4
    2a4a:	2308      	movs	r3, #8
    2a4c:	33ff      	adds	r3, #255	; 0xff
    2a4e:	54ea      	strb	r2, [r5, r3]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    2a50:	9b01      	ldr	r3, [sp, #4]
    2a52:	015b      	lsls	r3, r3, #5
    2a54:	4a3b      	ldr	r2, [pc, #236]	; (2b44 <USB_Handler+0x59c>)
    2a56:	18d3      	adds	r3, r2, r3
    2a58:	3308      	adds	r3, #8
    2a5a:	789b      	ldrb	r3, [r3, #2]
    2a5c:	079b      	lsls	r3, r3, #30
    2a5e:	d507      	bpl.n	2a70 <USB_Handler+0x4c8>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    2a60:	9b01      	ldr	r3, [sp, #4]
    2a62:	015a      	lsls	r2, r3, #5
    2a64:	4b37      	ldr	r3, [pc, #220]	; (2b44 <USB_Handler+0x59c>)
    2a66:	189b      	adds	r3, r3, r2
    2a68:	7a9a      	ldrb	r2, [r3, #10]
    2a6a:	2002      	movs	r0, #2
    2a6c:	4382      	bics	r2, r0
    2a6e:	729a      	strb	r2, [r3, #10]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    2a70:	4b33      	ldr	r3, [pc, #204]	; (2b40 <USB_Handler+0x598>)
    2a72:	4642      	mov	r2, r8
    2a74:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2a76:	9b01      	ldr	r3, [sp, #4]
    2a78:	3308      	adds	r3, #8
    2a7a:	015b      	lsls	r3, r3, #5
    2a7c:	683a      	ldr	r2, [r7, #0]
    2a7e:	4694      	mov	ip, r2
    2a80:	4463      	add	r3, ip
    2a82:	79db      	ldrb	r3, [r3, #7]
    2a84:	07db      	lsls	r3, r3, #31
    2a86:	d454      	bmi.n	2b32 <USB_Handler+0x58a>
							return;
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    2a88:	230c      	movs	r3, #12
    2a8a:	420b      	tst	r3, r1
    2a8c:	d051      	beq.n	2b32 <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    2a8e:	9b01      	ldr	r3, [sp, #4]
    2a90:	011b      	lsls	r3, r3, #4
    2a92:	18fb      	adds	r3, r7, r3
    2a94:	33d4      	adds	r3, #212	; 0xd4
    2a96:	685b      	ldr	r3, [r3, #4]
    2a98:	1c38      	adds	r0, r7, #0
    2a9a:	4929      	ldr	r1, [pc, #164]	; (2b40 <USB_Handler+0x598>)
    2a9c:	4798      	blx	r3
    2a9e:	e048      	b.n	2b32 <USB_Handler+0x58a>
					}
					return;
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    2aa0:	2503      	movs	r5, #3
    2aa2:	4215      	tst	r5, r2
    2aa4:	d040      	beq.n	2b28 <USB_Handler+0x580>
    2aa6:	1c3d      	adds	r5, r7, #0
    2aa8:	4647      	mov	r7, r8
    2aaa:	4680      	mov	r8, r0
    2aac:	9b01      	ldr	r3, [sp, #4]
    2aae:	015b      	lsls	r3, r3, #5
    2ab0:	18ed      	adds	r5, r5, r3
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    2ab2:	2308      	movs	r3, #8
    2ab4:	33ff      	adds	r3, #255	; 0xff
    2ab6:	5ceb      	ldrb	r3, [r5, r3]
    2ab8:	079b      	lsls	r3, r3, #30
    2aba:	d512      	bpl.n	2ae2 <USB_Handler+0x53a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    2abc:	2202      	movs	r2, #2
    2abe:	2308      	movs	r3, #8
    2ac0:	33ff      	adds	r3, #255	; 0xff
    2ac2:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    2ac4:	4a1e      	ldr	r2, [pc, #120]	; (2b40 <USB_Handler+0x598>)
    2ac6:	3b88      	subs	r3, #136	; 0x88
    2ac8:	3bff      	subs	r3, #255	; 0xff
    2aca:	4303      	orrs	r3, r0
    2acc:	7193      	strb	r3, [r2, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    2ace:	9b01      	ldr	r3, [sp, #4]
    2ad0:	015b      	lsls	r3, r3, #5
    2ad2:	481c      	ldr	r0, [pc, #112]	; (2b44 <USB_Handler+0x59c>)
    2ad4:	18c3      	adds	r3, r0, r3
    2ad6:	3310      	adds	r3, #16
    2ad8:	685b      	ldr	r3, [r3, #4]
    2ada:	049b      	lsls	r3, r3, #18
    2adc:	0c9b      	lsrs	r3, r3, #18
    2ade:	8053      	strh	r3, [r2, #2]
    2ae0:	e017      	b.n	2b12 <USB_Handler+0x56a>

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    2ae2:	2308      	movs	r3, #8
    2ae4:	33ff      	adds	r3, #255	; 0xff
    2ae6:	5ceb      	ldrb	r3, [r5, r3]
    2ae8:	07db      	lsls	r3, r3, #31
    2aea:	d512      	bpl.n	2b12 <USB_Handler+0x56a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    2aec:	2201      	movs	r2, #1
    2aee:	2308      	movs	r3, #8
    2af0:	33ff      	adds	r3, #255	; 0xff
    2af2:	54ea      	strb	r2, [r5, r3]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    2af4:	4812      	ldr	r0, [pc, #72]	; (2b40 <USB_Handler+0x598>)
    2af6:	4643      	mov	r3, r8
    2af8:	7183      	strb	r3, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    2afa:	9b01      	ldr	r3, [sp, #4]
    2afc:	015a      	lsls	r2, r3, #5
    2afe:	4b11      	ldr	r3, [pc, #68]	; (2b44 <USB_Handler+0x59c>)
    2b00:	189b      	adds	r3, r3, r2
    2b02:	685a      	ldr	r2, [r3, #4]
    2b04:	0492      	lsls	r2, r2, #18
    2b06:	0c92      	lsrs	r2, r2, #18
    2b08:	8002      	strh	r2, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    2b0a:	685b      	ldr	r3, [r3, #4]
    2b0c:	011b      	lsls	r3, r3, #4
    2b0e:	0c9b      	lsrs	r3, r3, #18
    2b10:	8083      	strh	r3, [r0, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    2b12:	078b      	lsls	r3, r1, #30
    2b14:	d00d      	beq.n	2b32 <USB_Handler+0x58a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    2b16:	9b01      	ldr	r3, [sp, #4]
    2b18:	330d      	adds	r3, #13
    2b1a:	011b      	lsls	r3, r3, #4
    2b1c:	18fb      	adds	r3, r7, r3
    2b1e:	685b      	ldr	r3, [r3, #4]
    2b20:	1c38      	adds	r0, r7, #0
    2b22:	4907      	ldr	r1, [pc, #28]	; (2b40 <USB_Handler+0x598>)
    2b24:	4798      	blx	r3
    2b26:	e004      	b.n	2b32 <USB_Handler+0x58a>
    2b28:	3301      	adds	r3, #1
    2b2a:	3401      	adds	r4, #1
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    2b2c:	2b08      	cmp	r3, #8
    2b2e:	d000      	beq.n	2b32 <USB_Handler+0x58a>
    2b30:	e6f0      	b.n	2914 <USB_Handler+0x36c>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    2b32:	b003      	add	sp, #12
    2b34:	bc3c      	pop	{r2, r3, r4, r5}
    2b36:	4690      	mov	r8, r2
    2b38:	4699      	mov	r9, r3
    2b3a:	46a2      	mov	sl, r4
    2b3c:	46ab      	mov	fp, r5
    2b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b40:	20000700 	.word	0x20000700
    2b44:	20000a08 	.word	0x20000a08

00002b48 <usb_get_config_defaults>:
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    2b48:	2300      	movs	r3, #0
    2b4a:	7003      	strb	r3, [r0, #0]
	module_config->run_in_standby = 1;
    2b4c:	3301      	adds	r3, #1
    2b4e:	7043      	strb	r3, [r0, #1]
	module_config->source_generator = GCLK_GENERATOR_3;
    2b50:	2203      	movs	r2, #3
    2b52:	7082      	strb	r2, [r0, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    2b54:	70c3      	strb	r3, [r0, #3]
}
    2b56:	4770      	bx	lr

00002b58 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    2b58:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b5a:	464f      	mov	r7, r9
    2b5c:	4646      	mov	r6, r8
    2b5e:	b4c0      	push	{r6, r7}
    2b60:	b083      	sub	sp, #12
    2b62:	1c04      	adds	r4, r0, #0
    2b64:	1c0d      	adds	r5, r1, #0
    2b66:	1c16      	adds	r6, r2, #0
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAML22
	host_pipe_job_busy_status = 0;
    2b68:	2300      	movs	r3, #0
    2b6a:	4a65      	ldr	r2, [pc, #404]	; (2d00 <usb_init+0x1a8>)
    2b6c:	6013      	str	r3, [r2, #0]
#endif

	_usb_instances = module_inst;
    2b6e:	4a65      	ldr	r2, [pc, #404]	; (2d04 <usb_init+0x1ac>)
    2b70:	6010      	str	r0, [r2, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    2b72:	6021      	str	r1, [r4, #0]
			break;

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    2b74:	4864      	ldr	r0, [pc, #400]	; (2d08 <usb_init+0x1b0>)
    2b76:	6982      	ldr	r2, [r0, #24]
    2b78:	2101      	movs	r1, #1
    2b7a:	430a      	orrs	r2, r1
    2b7c:	6182      	str	r2, [r0, #24]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2b7e:	af01      	add	r7, sp, #4
    2b80:	707b      	strb	r3, [r7, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2b82:	70b9      	strb	r1, [r7, #2]
	config->powersave    = false;
    2b84:	70fb      	strb	r3, [r7, #3]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_USB);

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
	pin_config.mux_position = MUX_PA24G_USB_DM;
    2b86:	3306      	adds	r3, #6
    2b88:	4699      	mov	r9, r3
    2b8a:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    2b8c:	2018      	movs	r0, #24
    2b8e:	1c39      	adds	r1, r7, #0
    2b90:	4b5e      	ldr	r3, [pc, #376]	; (2d0c <usb_init+0x1b4>)
    2b92:	4698      	mov	r8, r3
    2b94:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    2b96:	464b      	mov	r3, r9
    2b98:	703b      	strb	r3, [r7, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    2b9a:	2019      	movs	r0, #25
    2b9c:	1c39      	adds	r1, r7, #0
    2b9e:	47c0      	blx	r8

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = module_config->source_generator;
    2ba0:	78b3      	ldrb	r3, [r6, #2]
    2ba2:	466a      	mov	r2, sp
    2ba4:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    2ba6:	2004      	movs	r0, #4
    2ba8:	4669      	mov	r1, sp
    2baa:	4b59      	ldr	r3, [pc, #356]	; (2d10 <usb_init+0x1b8>)
    2bac:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    2bae:	2004      	movs	r0, #4
    2bb0:	4b58      	ldr	r3, [pc, #352]	; (2d14 <usb_init+0x1bc>)
    2bb2:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    2bb4:	782a      	ldrb	r2, [r5, #0]
    2bb6:	2301      	movs	r3, #1
    2bb8:	4313      	orrs	r3, r2
    2bba:	702b      	strb	r3, [r5, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    2bbc:	2201      	movs	r2, #1
    2bbe:	78ab      	ldrb	r3, [r5, #2]
    2bc0:	421a      	tst	r2, r3
    2bc2:	d1fc      	bne.n	2bbe <usb_init+0x66>
		/* Sync wait */
	}

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    2bc4:	4b54      	ldr	r3, [pc, #336]	; (2d18 <usb_init+0x1c0>)
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    2bc6:	681b      	ldr	r3, [r3, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
		/* Sync wait */
	}

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    2bc8:	039b      	lsls	r3, r3, #14
    2bca:	0edb      	lsrs	r3, r3, #27
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    2bcc:	2b1f      	cmp	r3, #31
    2bce:	d100      	bne.n	2bd2 <usb_init+0x7a>
		pad_transn = 5;
    2bd0:	3b1a      	subs	r3, #26
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    2bd2:	019a      	lsls	r2, r3, #6
    2bd4:	8d29      	ldrh	r1, [r5, #40]	; 0x28
    2bd6:	4b51      	ldr	r3, [pc, #324]	; (2d1c <usb_init+0x1c4>)
    2bd8:	400b      	ands	r3, r1
    2bda:	4313      	orrs	r3, r2
    2bdc:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    2bde:	4b4e      	ldr	r3, [pc, #312]	; (2d18 <usb_init+0x1c0>)
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    2be0:	681b      	ldr	r3, [r3, #0]
    2be2:	025b      	lsls	r3, r3, #9
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    2be4:	0edb      	lsrs	r3, r3, #27
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    2be6:	2b1f      	cmp	r3, #31
    2be8:	d100      	bne.n	2bec <usb_init+0x94>
		pad_transp = 29;
    2bea:	3b02      	subs	r3, #2
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    2bec:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    2bee:	211f      	movs	r1, #31
    2bf0:	438a      	bics	r2, r1
    2bf2:	4313      	orrs	r3, r2
    2bf4:	852b      	strh	r3, [r5, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    2bf6:	4b48      	ldr	r3, [pc, #288]	; (2d18 <usb_init+0x1c0>)
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    2bf8:	681b      	ldr	r3, [r3, #0]
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    2bfa:	019b      	lsls	r3, r3, #6
    2bfc:	0f5b      	lsrs	r3, r3, #29
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    2bfe:	2b07      	cmp	r3, #7
    2c00:	d100      	bne.n	2c04 <usb_init+0xac>
		pad_trim = 3;
    2c02:	3b04      	subs	r3, #4
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    2c04:	031a      	lsls	r2, r3, #12
    2c06:	8d29      	ldrh	r1, [r5, #40]	; 0x28
    2c08:	4b45      	ldr	r3, [pc, #276]	; (2d20 <usb_init+0x1c8>)
    2c0a:	400b      	ands	r3, r1
    2c0c:	4313      	orrs	r3, r2
    2c0e:	852b      	strh	r3, [r5, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    2c10:	7833      	ldrb	r3, [r6, #0]
    2c12:	01da      	lsls	r2, r3, #7
    2c14:	782b      	ldrb	r3, [r5, #0]
    2c16:	217f      	movs	r1, #127	; 0x7f
    2c18:	400b      	ands	r3, r1
    2c1a:	4313      	orrs	r3, r2
    2c1c:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    2c1e:	7873      	ldrb	r3, [r6, #1]
    2c20:	2201      	movs	r2, #1
    2c22:	4013      	ands	r3, r2
    2c24:	009a      	lsls	r2, r3, #2
    2c26:	782b      	ldrb	r3, [r5, #0]
    2c28:	397b      	subs	r1, #123	; 0x7b
    2c2a:	438b      	bics	r3, r1
    2c2c:	4313      	orrs	r3, r2
    2c2e:	702b      	strb	r3, [r5, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    2c30:	4b3c      	ldr	r3, [pc, #240]	; (2d24 <usb_init+0x1cc>)
    2c32:	626b      	str	r3, [r5, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    2c34:	78f3      	ldrb	r3, [r6, #3]
    2c36:	2b01      	cmp	r3, #1
    2c38:	d105      	bne.n	2c46 <usb_init+0xee>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    2c3a:	6822      	ldr	r2, [r4, #0]
    2c3c:	8913      	ldrh	r3, [r2, #8]
    2c3e:	3108      	adds	r1, #8
    2c40:	438b      	bics	r3, r1
    2c42:	8113      	strh	r3, [r2, #8]
    2c44:	e008      	b.n	2c58 <usb_init+0x100>
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    2c46:	2b00      	cmp	r3, #0
    2c48:	d106      	bne.n	2c58 <usb_init+0x100>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    2c4a:	6821      	ldr	r1, [r4, #0]
    2c4c:	890b      	ldrh	r3, [r1, #8]
    2c4e:	220c      	movs	r2, #12
    2c50:	4393      	bics	r3, r2
    2c52:	2204      	movs	r2, #4
    2c54:	4313      	orrs	r3, r2
    2c56:	810b      	strh	r3, [r1, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    2c58:	4832      	ldr	r0, [pc, #200]	; (2d24 <usb_init+0x1cc>)
    2c5a:	2100      	movs	r1, #0
    2c5c:	2280      	movs	r2, #128	; 0x80
    2c5e:	0052      	lsls	r2, r2, #1
    2c60:	4b31      	ldr	r3, [pc, #196]	; (2d28 <usb_init+0x1d0>)
    2c62:	4798      	blx	r3
    2c64:	1d22      	adds	r2, r4, #4
    2c66:	1c23      	adds	r3, r4, #0
    2c68:	3324      	adds	r3, #36	; 0x24
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAML22
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
    2c6a:	2100      	movs	r1, #0
    2c6c:	c202      	stmia	r2!, {r1}
	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAML22
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    2c6e:	429a      	cmp	r2, r3
    2c70:	d1fc      	bne.n	2c6c <usb_init+0x114>
    2c72:	1c21      	adds	r1, r4, #0
    2c74:	31a4      	adds	r1, #164	; 0xa4
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
    2c76:	2200      	movs	r2, #0
    2c78:	601a      	str	r2, [r3, #0]
    2c7a:	605a      	str	r2, [r3, #4]
    2c7c:	609a      	str	r2, [r3, #8]
    2c7e:	60da      	str	r2, [r3, #12]
    2c80:	3310      	adds	r3, #16
#if !SAML22
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    2c82:	428b      	cmp	r3, r1
    2c84:	d1f8      	bne.n	2c78 <usb_init+0x120>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
    2c86:	2300      	movs	r3, #0
    2c88:	22a4      	movs	r2, #164	; 0xa4
    2c8a:	54a3      	strb	r3, [r4, r2]
	module_inst->host_enabled_callback_mask = 0;
    2c8c:	3201      	adds	r2, #1
    2c8e:	54a3      	strb	r3, [r4, r2]
    2c90:	1c23      	adds	r3, r4, #0
    2c92:	33a6      	adds	r3, #166	; 0xa6
    2c94:	1c21      	adds	r1, r4, #0
    2c96:	31ae      	adds	r1, #174	; 0xae
	for (i = 0; i < USB_PIPE_NUM; i++) {
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    2c98:	2200      	movs	r2, #0
    2c9a:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    2c9c:	721a      	strb	r2, [r3, #8]
    2c9e:	3301      	adds	r3, #1
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
	module_inst->host_enabled_callback_mask = 0;
	for (i = 0; i < USB_PIPE_NUM; i++) {
    2ca0:	428b      	cmp	r3, r1
    2ca2:	d1fa      	bne.n	2c9a <usb_init+0x142>
    2ca4:	1c22      	adds	r2, r4, #0
    2ca6:	32b8      	adds	r2, #184	; 0xb8
    2ca8:	1c23      	adds	r3, r4, #0
    2caa:	33d4      	adds	r3, #212	; 0xd4
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
    2cac:	2100      	movs	r1, #0
    2cae:	c202      	stmia	r2!, {r1}
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    2cb0:	429a      	cmp	r2, r3
    2cb2:	d1fc      	bne.n	2cae <usb_init+0x156>
    2cb4:	1c21      	adds	r1, r4, #0
    2cb6:	3155      	adds	r1, #85	; 0x55
    2cb8:	31ff      	adds	r1, #255	; 0xff
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
    2cba:	2200      	movs	r2, #0
    2cbc:	601a      	str	r2, [r3, #0]
    2cbe:	605a      	str	r2, [r3, #4]
    2cc0:	609a      	str	r2, [r3, #8]
    2cc2:	60da      	str	r2, [r3, #12]
    2cc4:	3310      	adds	r3, #16

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    2cc6:	428b      	cmp	r3, r1
    2cc8:	d1f8      	bne.n	2cbc <usb_init+0x164>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
    2cca:	2300      	movs	r3, #0
    2ccc:	22aa      	movs	r2, #170	; 0xaa
    2cce:	0052      	lsls	r2, r2, #1
    2cd0:	52a3      	strh	r3, [r4, r2]
	module_inst->device_enabled_callback_mask = 0;
    2cd2:	3202      	adds	r2, #2
    2cd4:	52a3      	strh	r3, [r4, r2]
    2cd6:	1c23      	adds	r3, r4, #0
    2cd8:	3359      	adds	r3, #89	; 0x59
    2cda:	33ff      	adds	r3, #255	; 0xff
    2cdc:	3461      	adds	r4, #97	; 0x61
    2cde:	34ff      	adds	r4, #255	; 0xff
	for (j = 0; j < USB_EPT_NUM; j++) {
		module_inst->deivce_endpoint_registered_callback_mask[j] = 0;
    2ce0:	2200      	movs	r2, #0
    2ce2:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    2ce4:	721a      	strb	r2, [r3, #8]
    2ce6:	3301      	adds	r3, #1
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
	module_inst->device_enabled_callback_mask = 0;
	for (j = 0; j < USB_EPT_NUM; j++) {
    2ce8:	42a3      	cmp	r3, r4
    2cea:	d1fa      	bne.n	2ce2 <usb_init+0x18a>
    2cec:	2240      	movs	r2, #64	; 0x40
    2cee:	4b0f      	ldr	r3, [pc, #60]	; (2d2c <usb_init+0x1d4>)
    2cf0:	601a      	str	r2, [r3, #0]

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);

	return STATUS_OK;
}
    2cf2:	2000      	movs	r0, #0
    2cf4:	b003      	add	sp, #12
    2cf6:	bc0c      	pop	{r2, r3}
    2cf8:	4690      	mov	r8, r2
    2cfa:	4699      	mov	r9, r3
    2cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cfe:	46c0      	nop			; (mov r8, r8)
    2d00:	200006fc 	.word	0x200006fc
    2d04:	20000708 	.word	0x20000708
    2d08:	40000400 	.word	0x40000400
    2d0c:	00003659 	.word	0x00003659
    2d10:	0000355d 	.word	0x0000355d
    2d14:	000034f5 	.word	0x000034f5
    2d18:	0080601c 	.word	0x0080601c
    2d1c:	fffff83f 	.word	0xfffff83f
    2d20:	ffff8fff 	.word	0xffff8fff
    2d24:	20000a08 	.word	0x20000a08
    2d28:	00003c03 	.word	0x00003c03
    2d2c:	e000e100 	.word	0xe000e100

00002d30 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    2d30:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2d32:	2200      	movs	r2, #0
    2d34:	4b15      	ldr	r3, [pc, #84]	; (2d8c <EIC_Handler+0x5c>)
    2d36:	701a      	strb	r2, [r3, #0]
    2d38:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    2d3a:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    2d3c:	4e14      	ldr	r6, [pc, #80]	; (2d90 <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2d3e:	4c13      	ldr	r4, [pc, #76]	; (2d8c <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    2d40:	2b1f      	cmp	r3, #31
    2d42:	d919      	bls.n	2d78 <EIC_Handler+0x48>
    2d44:	e00f      	b.n	2d66 <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    2d46:	2100      	movs	r1, #0
    2d48:	e000      	b.n	2d4c <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    2d4a:	4912      	ldr	r1, [pc, #72]	; (2d94 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    2d4c:	614a      	str	r2, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    2d4e:	009b      	lsls	r3, r3, #2
    2d50:	599b      	ldr	r3, [r3, r6]
    2d52:	2b00      	cmp	r3, #0
    2d54:	d000      	beq.n	2d58 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    2d56:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2d58:	7823      	ldrb	r3, [r4, #0]
    2d5a:	3301      	adds	r3, #1
    2d5c:	b2db      	uxtb	r3, r3
    2d5e:	7023      	strb	r3, [r4, #0]
    2d60:	2b0f      	cmp	r3, #15
    2d62:	d9ed      	bls.n	2d40 <EIC_Handler+0x10>
    2d64:	e011      	b.n	2d8a <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    2d66:	1c29      	adds	r1, r5, #0
    2d68:	4019      	ands	r1, r3
    2d6a:	2201      	movs	r2, #1
    2d6c:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    2d6e:	2100      	movs	r1, #0
    2d70:	6949      	ldr	r1, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    2d72:	4211      	tst	r1, r2
    2d74:	d1e7      	bne.n	2d46 <EIC_Handler+0x16>
    2d76:	e7ef      	b.n	2d58 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    2d78:	1c29      	adds	r1, r5, #0
    2d7a:	4019      	ands	r1, r3
    2d7c:	2201      	movs	r2, #1
    2d7e:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    2d80:	4904      	ldr	r1, [pc, #16]	; (2d94 <EIC_Handler+0x64>)
    2d82:	6949      	ldr	r1, [r1, #20]
    2d84:	4211      	tst	r1, r2
    2d86:	d1e0      	bne.n	2d4a <EIC_Handler+0x1a>
    2d88:	e7e6      	b.n	2d58 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    2d8a:	bd70      	pop	{r4, r5, r6, pc}
    2d8c:	20000b08 	.word	0x20000b08
    2d90:	20000738 	.word	0x20000738
    2d94:	40002400 	.word	0x40002400

00002d98 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    2d98:	4770      	bx	lr
    2d9a:	46c0      	nop			; (mov r8, r8)

00002d9c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2d9c:	4b0c      	ldr	r3, [pc, #48]	; (2dd0 <cpu_irq_enter_critical+0x34>)
    2d9e:	681b      	ldr	r3, [r3, #0]
    2da0:	2b00      	cmp	r3, #0
    2da2:	d110      	bne.n	2dc6 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2da4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2da8:	2b00      	cmp	r3, #0
    2daa:	d109      	bne.n	2dc0 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2dac:	b672      	cpsid	i
    2dae:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2db2:	2200      	movs	r2, #0
    2db4:	4b07      	ldr	r3, [pc, #28]	; (2dd4 <cpu_irq_enter_critical+0x38>)
    2db6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2db8:	3201      	adds	r2, #1
    2dba:	4b07      	ldr	r3, [pc, #28]	; (2dd8 <cpu_irq_enter_critical+0x3c>)
    2dbc:	701a      	strb	r2, [r3, #0]
    2dbe:	e002      	b.n	2dc6 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2dc0:	2200      	movs	r2, #0
    2dc2:	4b05      	ldr	r3, [pc, #20]	; (2dd8 <cpu_irq_enter_critical+0x3c>)
    2dc4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2dc6:	4a02      	ldr	r2, [pc, #8]	; (2dd0 <cpu_irq_enter_critical+0x34>)
    2dc8:	6813      	ldr	r3, [r2, #0]
    2dca:	3301      	adds	r3, #1
    2dcc:	6013      	str	r3, [r2, #0]
}
    2dce:	4770      	bx	lr
    2dd0:	2000070c 	.word	0x2000070c
    2dd4:	200000f7 	.word	0x200000f7
    2dd8:	20000710 	.word	0x20000710

00002ddc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2ddc:	4b08      	ldr	r3, [pc, #32]	; (2e00 <cpu_irq_leave_critical+0x24>)
    2dde:	681a      	ldr	r2, [r3, #0]
    2de0:	3a01      	subs	r2, #1
    2de2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2de4:	681b      	ldr	r3, [r3, #0]
    2de6:	2b00      	cmp	r3, #0
    2de8:	d109      	bne.n	2dfe <cpu_irq_leave_critical+0x22>
    2dea:	4b06      	ldr	r3, [pc, #24]	; (2e04 <cpu_irq_leave_critical+0x28>)
    2dec:	781b      	ldrb	r3, [r3, #0]
    2dee:	2b00      	cmp	r3, #0
    2df0:	d005      	beq.n	2dfe <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2df2:	2201      	movs	r2, #1
    2df4:	4b04      	ldr	r3, [pc, #16]	; (2e08 <cpu_irq_leave_critical+0x2c>)
    2df6:	701a      	strb	r2, [r3, #0]
    2df8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2dfc:	b662      	cpsie	i
	}
}
    2dfe:	4770      	bx	lr
    2e00:	2000070c 	.word	0x2000070c
    2e04:	20000710 	.word	0x20000710
    2e08:	200000f7 	.word	0x200000f7

00002e0c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2e0c:	b508      	push	{r3, lr}
	switch (clock_source) {
    2e0e:	2808      	cmp	r0, #8
    2e10:	d803      	bhi.n	2e1a <system_clock_source_get_hz+0xe>
    2e12:	0080      	lsls	r0, r0, #2
    2e14:	4b1c      	ldr	r3, [pc, #112]	; (2e88 <system_clock_source_get_hz+0x7c>)
    2e16:	581b      	ldr	r3, [r3, r0]
    2e18:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    2e1a:	2000      	movs	r0, #0
    2e1c:	e032      	b.n	2e84 <system_clock_source_get_hz+0x78>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    2e1e:	4b1b      	ldr	r3, [pc, #108]	; (2e8c <system_clock_source_get_hz+0x80>)
    2e20:	6918      	ldr	r0, [r3, #16]
    2e22:	e02f      	b.n	2e84 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    2e24:	4b1a      	ldr	r3, [pc, #104]	; (2e90 <system_clock_source_get_hz+0x84>)
    2e26:	7d18      	ldrb	r0, [r3, #20]
    2e28:	0700      	lsls	r0, r0, #28
    2e2a:	0f80      	lsrs	r0, r0, #30
    2e2c:	3001      	adds	r0, #1
    2e2e:	4b19      	ldr	r3, [pc, #100]	; (2e94 <system_clock_source_get_hz+0x88>)
    2e30:	4358      	muls	r0, r3
    2e32:	e027      	b.n	2e84 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    2e34:	4b15      	ldr	r3, [pc, #84]	; (2e8c <system_clock_source_get_hz+0x80>)
    2e36:	6958      	ldr	r0, [r3, #20]
    2e38:	e024      	b.n	2e84 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    2e3a:	4b14      	ldr	r3, [pc, #80]	; (2e8c <system_clock_source_get_hz+0x80>)
    2e3c:	681b      	ldr	r3, [r3, #0]
    2e3e:	2002      	movs	r0, #2
    2e40:	4018      	ands	r0, r3
    2e42:	d01f      	beq.n	2e84 <system_clock_source_get_hz+0x78>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    2e44:	4912      	ldr	r1, [pc, #72]	; (2e90 <system_clock_source_get_hz+0x84>)
    2e46:	2280      	movs	r2, #128	; 0x80
    2e48:	0052      	lsls	r2, r2, #1
    2e4a:	68cb      	ldr	r3, [r1, #12]
    2e4c:	4213      	tst	r3, r2
    2e4e:	d0fc      	beq.n	2e4a <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    2e50:	4b0e      	ldr	r3, [pc, #56]	; (2e8c <system_clock_source_get_hz+0x80>)
    2e52:	681b      	ldr	r3, [r3, #0]
    2e54:	075b      	lsls	r3, r3, #29
    2e56:	d514      	bpl.n	2e82 <system_clock_source_get_hz+0x76>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    2e58:	2000      	movs	r0, #0
    2e5a:	4b0f      	ldr	r3, [pc, #60]	; (2e98 <system_clock_source_get_hz+0x8c>)
    2e5c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2e5e:	4b0b      	ldr	r3, [pc, #44]	; (2e8c <system_clock_source_get_hz+0x80>)
    2e60:	689b      	ldr	r3, [r3, #8]
    2e62:	041b      	lsls	r3, r3, #16
    2e64:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    2e66:	4358      	muls	r0, r3
    2e68:	e00c      	b.n	2e84 <system_clock_source_get_hz+0x78>
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    2e6a:	2328      	movs	r3, #40	; 0x28
    2e6c:	4a08      	ldr	r2, [pc, #32]	; (2e90 <system_clock_source_get_hz+0x84>)
    2e6e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2e70:	2000      	movs	r0, #0
		}

		return 48000000UL;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    2e72:	079b      	lsls	r3, r3, #30
    2e74:	d506      	bpl.n	2e84 <system_clock_source_get_hz+0x78>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    2e76:	4b05      	ldr	r3, [pc, #20]	; (2e8c <system_clock_source_get_hz+0x80>)
    2e78:	68d8      	ldr	r0, [r3, #12]
    2e7a:	e003      	b.n	2e84 <system_clock_source_get_hz+0x78>

	case SYSTEM_CLOCK_SOURCE_OSC16M:
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    2e7c:	2080      	movs	r0, #128	; 0x80
    2e7e:	0200      	lsls	r0, r0, #8
    2e80:	e000      	b.n	2e84 <system_clock_source_get_hz+0x78>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    2e82:	4806      	ldr	r0, [pc, #24]	; (2e9c <system_clock_source_get_hz+0x90>)
		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
	}
}
    2e84:	bd08      	pop	{r3, pc}
    2e86:	46c0      	nop			; (mov r8, r8)
    2e88:	00003c40 	.word	0x00003c40
    2e8c:	20000714 	.word	0x20000714
    2e90:	40000c00 	.word	0x40000c00
    2e94:	003d0900 	.word	0x003d0900
    2e98:	00003581 	.word	0x00003581
    2e9c:	02dc6c00 	.word	0x02dc6c00

00002ea0 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    2ea0:	b530      	push	{r4, r5, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    2ea2:	4c0c      	ldr	r4, [pc, #48]	; (2ed4 <system_clock_source_osc16m_set_config+0x34>)
    2ea4:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    2ea6:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2ea8:	7841      	ldrb	r1, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    2eaa:	7800      	ldrb	r0, [r0, #0]
    2eac:	2203      	movs	r2, #3
    2eae:	4010      	ands	r0, r2
    2eb0:	0080      	lsls	r0, r0, #2
    2eb2:	3209      	adds	r2, #9
    2eb4:	4393      	bics	r3, r2
    2eb6:	4303      	orrs	r3, r0
    2eb8:	3a0b      	subs	r2, #11
    2eba:	4011      	ands	r1, r2
    2ebc:	0189      	lsls	r1, r1, #6
    2ebe:	323f      	adds	r2, #63	; 0x3f
    2ec0:	4393      	bics	r3, r2
    2ec2:	430b      	orrs	r3, r1
    2ec4:	1c1a      	adds	r2, r3, #0
    2ec6:	01e9      	lsls	r1, r5, #7
    2ec8:	237f      	movs	r3, #127	; 0x7f
    2eca:	4013      	ands	r3, r2
    2ecc:	430b      	orrs	r3, r1
    2ece:	7523      	strb	r3, [r4, #20]
}
    2ed0:	bd30      	pop	{r4, r5, pc}
    2ed2:	46c0      	nop			; (mov r8, r8)
    2ed4:	40000c00 	.word	0x40000c00

00002ed8 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2eda:	465f      	mov	r7, fp
    2edc:	4656      	mov	r6, sl
    2ede:	464d      	mov	r5, r9
    2ee0:	4644      	mov	r4, r8
    2ee2:	b4f0      	push	{r4, r5, r6, r7}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    2ee4:	4e25      	ldr	r6, [pc, #148]	; (2f7c <system_clock_source_xosc32k_set_config+0xa4>)
    2ee6:	6973      	ldr	r3, [r6, #20]
    2ee8:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
    2eea:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2eec:	7803      	ldrb	r3, [r0, #0]
    2eee:	425a      	negs	r2, r3
    2ef0:	415a      	adcs	r2, r3
    2ef2:	4690      	mov	r8, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    2ef4:	7883      	ldrb	r3, [r0, #2]
    2ef6:	469a      	mov	sl, r3
	temp.bit.EN32K = config->enable_32khz_output;
    2ef8:	78c3      	ldrb	r3, [r0, #3]

	temp.bit.ONDEMAND = config->on_demand;
    2efa:	7a47      	ldrb	r7, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2efc:	7a02      	ldrb	r2, [r0, #8]
    2efe:	4693      	mov	fp, r2
	temp.bit.WRTLOCK  = config->write_once;
    2f00:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2f02:	6842      	ldr	r2, [r0, #4]
    2f04:	481e      	ldr	r0, [pc, #120]	; (2f80 <system_clock_source_xosc32k_set_config+0xa8>)
    2f06:	6142      	str	r2, [r0, #20]

	OSC32KCTRL->XOSC32K = temp;
    2f08:	2001      	movs	r0, #1
    2f0a:	4642      	mov	r2, r8
    2f0c:	0092      	lsls	r2, r2, #2
    2f0e:	4690      	mov	r8, r2
    2f10:	2204      	movs	r2, #4
    2f12:	4691      	mov	r9, r2
    2f14:	4662      	mov	r2, ip
    2f16:	4649      	mov	r1, r9
    2f18:	438a      	bics	r2, r1
    2f1a:	4694      	mov	ip, r2
    2f1c:	4642      	mov	r2, r8
    2f1e:	4661      	mov	r1, ip
    2f20:	430a      	orrs	r2, r1
    2f22:	4694      	mov	ip, r2
    2f24:	4003      	ands	r3, r0
    2f26:	00db      	lsls	r3, r3, #3
    2f28:	2208      	movs	r2, #8
    2f2a:	4690      	mov	r8, r2
    2f2c:	4662      	mov	r2, ip
    2f2e:	4641      	mov	r1, r8
    2f30:	438a      	bics	r2, r1
    2f32:	4313      	orrs	r3, r2
    2f34:	4651      	mov	r1, sl
    2f36:	4001      	ands	r1, r0
    2f38:	0109      	lsls	r1, r1, #4
    2f3a:	2210      	movs	r2, #16
    2f3c:	4393      	bics	r3, r2
    2f3e:	430b      	orrs	r3, r1
    2f40:	465a      	mov	r2, fp
    2f42:	4002      	ands	r2, r0
    2f44:	0192      	lsls	r2, r2, #6
    2f46:	2140      	movs	r1, #64	; 0x40
    2f48:	438b      	bics	r3, r1
    2f4a:	4313      	orrs	r3, r2
    2f4c:	4007      	ands	r7, r0
    2f4e:	01ff      	lsls	r7, r7, #7
    2f50:	2280      	movs	r2, #128	; 0x80
    2f52:	4393      	bics	r3, r2
    2f54:	433b      	orrs	r3, r7
    2f56:	3a79      	subs	r2, #121	; 0x79
    2f58:	4015      	ands	r5, r2
    2f5a:	022d      	lsls	r5, r5, #8
    2f5c:	4f09      	ldr	r7, [pc, #36]	; (2f84 <system_clock_source_xosc32k_set_config+0xac>)
    2f5e:	403b      	ands	r3, r7
    2f60:	432b      	orrs	r3, r5
    2f62:	4004      	ands	r4, r0
    2f64:	0320      	lsls	r0, r4, #12
    2f66:	4c08      	ldr	r4, [pc, #32]	; (2f88 <system_clock_source_xosc32k_set_config+0xb0>)
    2f68:	401c      	ands	r4, r3
    2f6a:	4304      	orrs	r4, r0
    2f6c:	6174      	str	r4, [r6, #20]
}
    2f6e:	bc3c      	pop	{r2, r3, r4, r5}
    2f70:	4690      	mov	r8, r2
    2f72:	4699      	mov	r9, r3
    2f74:	46a2      	mov	sl, r4
    2f76:	46ab      	mov	fp, r5
    2f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f7a:	46c0      	nop			; (mov r8, r8)
    2f7c:	40001000 	.word	0x40001000
    2f80:	20000714 	.word	0x20000714
    2f84:	fffff8ff 	.word	0xfffff8ff
    2f88:	ffffefff 	.word	0xffffefff

00002f8c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2f8c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2f8e:	7a83      	ldrb	r3, [r0, #10]
    2f90:	069b      	lsls	r3, r3, #26
    2f92:	0c1a      	lsrs	r2, r3, #16
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
    2f94:	8983      	ldrh	r3, [r0, #12]
    2f96:	059b      	lsls	r3, r3, #22
    2f98:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2f9a:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    2f9c:	4c1a      	ldr	r4, [pc, #104]	; (3008 <system_clock_source_dfll_set_config+0x7c>)
    2f9e:	6063      	str	r3, [r4, #4]
    2fa0:	88c1      	ldrh	r1, [r0, #6]
    2fa2:	8883      	ldrh	r3, [r0, #4]
    2fa4:	4319      	orrs	r1, r3
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
			OSCCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2fa6:	7a43      	ldrb	r3, [r0, #9]
    2fa8:	7a02      	ldrb	r2, [r0, #8]
    2faa:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2fac:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    2fae:	7842      	ldrb	r2, [r0, #1]
    2fb0:	01d2      	lsls	r2, r2, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    2fb2:	4313      	orrs	r3, r2
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
    2fb4:	7882      	ldrb	r2, [r0, #2]
    2fb6:	0192      	lsls	r2, r2, #6
	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    2fb8:	4313      	orrs	r3, r2
{
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
			OSCCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    2fba:	6023      	str	r3, [r4, #0]
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2fbc:	7803      	ldrb	r3, [r0, #0]
    2fbe:	2b04      	cmp	r3, #4
    2fc0:	d10f      	bne.n	2fe2 <system_clock_source_dfll_set_config+0x56>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2fc2:	7b83      	ldrb	r3, [r0, #14]
    2fc4:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    2fc6:	8a42      	ldrh	r2, [r0, #18]
    2fc8:	4313      	orrs	r3, r2
    2fca:	1c19      	adds	r1, r3, #0

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2fcc:	8a03      	ldrh	r3, [r0, #16]
    2fce:	041b      	lsls	r3, r3, #16
    2fd0:	4a0e      	ldr	r2, [pc, #56]	; (300c <system_clock_source_dfll_set_config+0x80>)
    2fd2:	4013      	ands	r3, r2
    2fd4:	430b      	orrs	r3, r1
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    2fd6:	60a3      	str	r3, [r4, #8]
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    2fd8:	6821      	ldr	r1, [r4, #0]
    2fda:	2304      	movs	r3, #4
    2fdc:	430b      	orrs	r3, r1
    2fde:	6023      	str	r3, [r4, #0]
    2fe0:	e011      	b.n	3006 <system_clock_source_dfll_set_config+0x7a>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2fe2:	2b20      	cmp	r3, #32
    2fe4:	d10f      	bne.n	3006 <system_clock_source_dfll_set_config+0x7a>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2fe6:	7b83      	ldrb	r3, [r0, #14]
    2fe8:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    2fea:	8a42      	ldrh	r2, [r0, #18]
    2fec:	4313      	orrs	r3, r2
    2fee:	1c19      	adds	r1, r3, #0
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2ff0:	8a03      	ldrh	r3, [r0, #16]
    2ff2:	041b      	lsls	r3, r3, #16
    2ff4:	4a05      	ldr	r2, [pc, #20]	; (300c <system_clock_source_dfll_set_config+0x80>)
    2ff6:	4013      	ands	r3, r2
    2ff8:	430b      	orrs	r3, r1
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    2ffa:	4a03      	ldr	r2, [pc, #12]	; (3008 <system_clock_source_dfll_set_config+0x7c>)
    2ffc:	6093      	str	r3, [r2, #8]
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2ffe:	6813      	ldr	r3, [r2, #0]
    3000:	4903      	ldr	r1, [pc, #12]	; (3010 <system_clock_source_dfll_set_config+0x84>)
    3002:	430b      	orrs	r3, r1
    3004:	6013      	str	r3, [r2, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
    3006:	bd10      	pop	{r4, pc}
    3008:	20000714 	.word	0x20000714
    300c:	03ff0000 	.word	0x03ff0000
    3010:	00000424 	.word	0x00000424

00003014 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    3014:	2808      	cmp	r0, #8
    3016:	d803      	bhi.n	3020 <system_clock_source_enable+0xc>
    3018:	0080      	lsls	r0, r0, #2
    301a:	4b29      	ldr	r3, [pc, #164]	; (30c0 <system_clock_source_enable+0xac>)
    301c:	581b      	ldr	r3, [r3, r0]
    301e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3020:	2017      	movs	r0, #23
    3022:	e04b      	b.n	30bc <system_clock_source_enable+0xa8>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    3024:	4a27      	ldr	r2, [pc, #156]	; (30c4 <system_clock_source_enable+0xb0>)
    3026:	7d11      	ldrb	r1, [r2, #20]
    3028:	2302      	movs	r3, #2
    302a:	430b      	orrs	r3, r1
    302c:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    302e:	2000      	movs	r0, #0
    3030:	e044      	b.n	30bc <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    3032:	4a25      	ldr	r2, [pc, #148]	; (30c8 <system_clock_source_enable+0xb4>)
    3034:	6991      	ldr	r1, [r2, #24]
    3036:	2302      	movs	r3, #2
    3038:	430b      	orrs	r3, r1
    303a:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    303c:	2000      	movs	r0, #0
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;
    303e:	e03d      	b.n	30bc <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    3040:	4a20      	ldr	r2, [pc, #128]	; (30c4 <system_clock_source_enable+0xb0>)
    3042:	8a11      	ldrh	r1, [r2, #16]
    3044:	2302      	movs	r3, #2
    3046:	430b      	orrs	r3, r1
    3048:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    304a:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;
    304c:	e036      	b.n	30bc <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    304e:	4a1e      	ldr	r2, [pc, #120]	; (30c8 <system_clock_source_enable+0xb4>)
    3050:	6951      	ldr	r1, [r2, #20]
    3052:	2302      	movs	r3, #2
    3054:	430b      	orrs	r3, r1
    3056:	6153      	str	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3058:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
		break;
    305a:	e02f      	b.n	30bc <system_clock_source_enable+0xa8>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    305c:	491b      	ldr	r1, [pc, #108]	; (30cc <system_clock_source_enable+0xb8>)
    305e:	680b      	ldr	r3, [r1, #0]
    3060:	2202      	movs	r2, #2
    3062:	4313      	orrs	r3, r2
    3064:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    3066:	4b17      	ldr	r3, [pc, #92]	; (30c4 <system_clock_source_enable+0xb0>)
    3068:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    306a:	1c19      	adds	r1, r3, #0
    306c:	32fe      	adds	r2, #254	; 0xfe
    306e:	68cb      	ldr	r3, [r1, #12]
    3070:	4213      	tst	r3, r2
    3072:	d0fc      	beq.n	306e <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3074:	4a15      	ldr	r2, [pc, #84]	; (30cc <system_clock_source_enable+0xb8>)
    3076:	6891      	ldr	r1, [r2, #8]
    3078:	4b12      	ldr	r3, [pc, #72]	; (30c4 <system_clock_source_enable+0xb0>)
    307a:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    307c:	6852      	ldr	r2, [r2, #4]
    307e:	61da      	str	r2, [r3, #28]

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
    3080:	2200      	movs	r2, #0
    3082:	831a      	strh	r2, [r3, #24]
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    3084:	1c19      	adds	r1, r3, #0
    3086:	3201      	adds	r2, #1
    3088:	32ff      	adds	r2, #255	; 0xff
    308a:	68cb      	ldr	r3, [r1, #12]
    308c:	4213      	tst	r3, r2
    308e:	d0fc      	beq.n	308a <system_clock_source_enable+0x76>
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	OSCCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3090:	4b0e      	ldr	r3, [pc, #56]	; (30cc <system_clock_source_enable+0xb8>)
    3092:	681b      	ldr	r3, [r3, #0]
    3094:	b29b      	uxth	r3, r3
    3096:	4a0b      	ldr	r2, [pc, #44]	; (30c4 <system_clock_source_enable+0xb0>)
    3098:	8313      	strh	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    309a:	2000      	movs	r0, #0
    309c:	e00e      	b.n	30bc <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    309e:	4909      	ldr	r1, [pc, #36]	; (30c4 <system_clock_source_enable+0xb0>)
    30a0:	2228      	movs	r2, #40	; 0x28
    30a2:	5c88      	ldrb	r0, [r1, r2]
    30a4:	2302      	movs	r3, #2
    30a6:	4303      	orrs	r3, r0
    30a8:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    30aa:	1c08      	adds	r0, r1, #0
    30ac:	2138      	movs	r1, #56	; 0x38
    30ae:	3a26      	subs	r2, #38	; 0x26
    30b0:	5c43      	ldrb	r3, [r0, r1]
    30b2:	4213      	tst	r3, r2
    30b4:	d1fc      	bne.n	30b0 <system_clock_source_enable+0x9c>
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    30b6:	2000      	movs	r0, #0
    30b8:	e000      	b.n	30bc <system_clock_source_enable+0xa8>
		}
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    30ba:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    30bc:	4770      	bx	lr
    30be:	46c0      	nop			; (mov r8, r8)
    30c0:	00003c64 	.word	0x00003c64
    30c4:	40000c00 	.word	0x40000c00
    30c8:	40001000 	.word	0x40001000
    30cc:	20000714 	.word	0x20000714

000030d0 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    30d0:	2808      	cmp	r0, #8
    30d2:	d832      	bhi.n	313a <system_clock_source_disable+0x6a>
    30d4:	0080      	lsls	r0, r0, #2
    30d6:	4b1a      	ldr	r3, [pc, #104]	; (3140 <system_clock_source_disable+0x70>)
    30d8:	581b      	ldr	r3, [r3, r0]
    30da:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    30dc:	4a19      	ldr	r2, [pc, #100]	; (3144 <system_clock_source_disable+0x74>)
    30de:	7d13      	ldrb	r3, [r2, #20]
    30e0:	2102      	movs	r1, #2
    30e2:	438b      	bics	r3, r1
    30e4:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    30e6:	2000      	movs	r0, #0
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
		break;
    30e8:	e028      	b.n	313c <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    30ea:	4a17      	ldr	r2, [pc, #92]	; (3148 <system_clock_source_disable+0x78>)
    30ec:	6993      	ldr	r3, [r2, #24]
    30ee:	2102      	movs	r1, #2
    30f0:	438b      	bics	r3, r1
    30f2:	6193      	str	r3, [r2, #24]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    30f4:	2000      	movs	r0, #0
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
		break;
    30f6:	e021      	b.n	313c <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    30f8:	4a12      	ldr	r2, [pc, #72]	; (3144 <system_clock_source_disable+0x74>)
    30fa:	8a13      	ldrh	r3, [r2, #16]
    30fc:	2102      	movs	r1, #2
    30fe:	438b      	bics	r3, r1
    3100:	8213      	strh	r3, [r2, #16]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    3102:	2000      	movs	r0, #0
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
		break;
    3104:	e01a      	b.n	313c <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    3106:	4a10      	ldr	r2, [pc, #64]	; (3148 <system_clock_source_disable+0x78>)
    3108:	6953      	ldr	r3, [r2, #20]
    310a:	2102      	movs	r1, #2
    310c:	438b      	bics	r3, r1
    310e:	6153      	str	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    3110:	2000      	movs	r0, #0
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
		break;
    3112:	e013      	b.n	313c <system_clock_source_disable+0x6c>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    3114:	4b0d      	ldr	r3, [pc, #52]	; (314c <system_clock_source_disable+0x7c>)
    3116:	681a      	ldr	r2, [r3, #0]
    3118:	2102      	movs	r1, #2
    311a:	438a      	bics	r2, r1
    311c:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    311e:	681b      	ldr	r3, [r3, #0]
    3120:	b29b      	uxth	r3, r3
    3122:	4a08      	ldr	r2, [pc, #32]	; (3144 <system_clock_source_disable+0x74>)
    3124:	8313      	strh	r3, [r2, #24]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    3126:	2000      	movs	r0, #0
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
		break;
    3128:	e008      	b.n	313c <system_clock_source_disable+0x6c>
	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    312a:	4906      	ldr	r1, [pc, #24]	; (3144 <system_clock_source_disable+0x74>)
    312c:	2228      	movs	r2, #40	; 0x28
    312e:	5c8b      	ldrb	r3, [r1, r2]
    3130:	2002      	movs	r0, #2
    3132:	4383      	bics	r3, r0
    3134:	548b      	strb	r3, [r1, r2]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    3136:	2000      	movs	r0, #0
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
		break;
	case SYSTEM_CLOCK_SOURCE_DPLL:
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
		break;
    3138:	e000      	b.n	313c <system_clock_source_disable+0x6c>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    313a:	2017      	movs	r0, #23

	}

	return STATUS_OK;
}
    313c:	4770      	bx	lr
    313e:	46c0      	nop			; (mov r8, r8)
    3140:	00003c88 	.word	0x00003c88
    3144:	40000c00 	.word	0x40000c00
    3148:	40001000 	.word	0x40001000
    314c:	20000714 	.word	0x20000714

00003150 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3150:	b5f0      	push	{r4, r5, r6, r7, lr}
    3152:	4647      	mov	r7, r8
    3154:	b480      	push	{r7}
    3156:	b08c      	sub	sp, #48	; 0x30
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    3158:	2280      	movs	r2, #128	; 0x80
    315a:	0052      	lsls	r2, r2, #1
    315c:	4b74      	ldr	r3, [pc, #464]	; (3330 <system_clock_init+0x1e0>)
    315e:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    3160:	3afd      	subs	r2, #253	; 0xfd
    3162:	4b74      	ldr	r3, [pc, #464]	; (3334 <system_clock_init+0x1e4>)
    3164:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3166:	4974      	ldr	r1, [pc, #464]	; (3338 <system_clock_init+0x1e8>)
    3168:	684b      	ldr	r3, [r1, #4]
    316a:	321b      	adds	r2, #27
    316c:	4393      	bics	r3, r2
    316e:	3a1a      	subs	r2, #26
    3170:	4313      	orrs	r3, r2
    3172:	604b      	str	r3, [r1, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    3174:	2380      	movs	r3, #128	; 0x80
    3176:	05db      	lsls	r3, r3, #23
    3178:	789b      	ldrb	r3, [r3, #2]
    317a:	2b02      	cmp	r3, #2
    317c:	d009      	beq.n	3192 <system_clock_init+0x42>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    317e:	2380      	movs	r3, #128	; 0x80
    3180:	05db      	lsls	r3, r3, #23
    3182:	3a03      	subs	r2, #3
    3184:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    3186:	3201      	adds	r2, #1
    3188:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    318a:	1c1a      	adds	r2, r3, #0
    318c:	7993      	ldrb	r3, [r2, #6]
    318e:	2b00      	cmp	r3, #0
    3190:	d0fc      	beq.n	318c <system_clock_init+0x3c>
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->frequency           = 32768UL;
    3192:	a809      	add	r0, sp, #36	; 0x24
    3194:	2380      	movs	r3, #128	; 0x80
    3196:	021b      	lsls	r3, r3, #8
    3198:	6043      	str	r3, [r0, #4]
	config->enable_1khz_output  = false;
    319a:	2200      	movs	r2, #0
    319c:	7082      	strb	r2, [r0, #2]
	config->enable_32khz_output = true;
    319e:	2301      	movs	r3, #1
    31a0:	70c3      	strb	r3, [r0, #3]
	config->run_in_standby      = false;
	config->on_demand           = true;
	config->write_once          = false;
    31a2:	7282      	strb	r2, [r0, #10]
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    31a4:	7003      	strb	r3, [r0, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    31a6:	2104      	movs	r1, #4
    31a8:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    31aa:	7242      	strb	r2, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    31ac:	7203      	strb	r3, [r0, #8]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    31ae:	4b63      	ldr	r3, [pc, #396]	; (333c <system_clock_init+0x1ec>)
    31b0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    31b2:	2005      	movs	r0, #5
    31b4:	4b62      	ldr	r3, [pc, #392]	; (3340 <system_clock_init+0x1f0>)
    31b6:	4798      	blx	r3
		mask = OSCCTRL_STATUS_XOSCRDY;
		return ((OSCCTRL->STATUS.reg & mask) == mask);

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = OSC32KCTRL_STATUS_XOSC32KRDY;
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    31b8:	4962      	ldr	r1, [pc, #392]	; (3344 <system_clock_init+0x1f4>)
    31ba:	2201      	movs	r2, #1
    31bc:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    31be:	421a      	tst	r2, r3
    31c0:	d0fc      	beq.n	31bc <system_clock_init+0x6c>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    31c2:	a901      	add	r1, sp, #4
    31c4:	2301      	movs	r3, #1
    31c6:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    31c8:	2400      	movs	r4, #0
    31ca:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    31cc:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    31ce:	724c      	strb	r4, [r1, #9]
	struct system_gclk_gen_config gclk_conf;
	struct system_clock_source_osc16m_config osc16m_conf;

	/* Select OSCULP32K as new clock source for mainclock temporarily */
	system_gclk_gen_get_config_defaults(&gclk_conf);
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    31d0:	2503      	movs	r5, #3
    31d2:	700d      	strb	r5, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    31d4:	2000      	movs	r0, #0
    31d6:	4b5c      	ldr	r3, [pc, #368]	; (3348 <system_clock_init+0x1f8>)
    31d8:	4798      	blx	r3

	/* GCLK0 is enabled after POR */

	/* Disable OSC16M clock*/
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    31da:	2006      	movs	r0, #6
    31dc:	4b5b      	ldr	r3, [pc, #364]	; (334c <system_clock_init+0x1fc>)
    31de:	4798      	blx	r3
		struct system_clock_source_osc16m_config *const config)
{
	Assert(config);

	config->fsel = SYSTEM_OSC16M_4M;
	config->run_in_standby  = false;
    31e0:	466b      	mov	r3, sp
    31e2:	705c      	strb	r4, [r3, #1]

	/* Switch to new frequency selection and enable OSC16M */
	system_clock_source_osc16m_get_config_defaults(&osc16m_conf);
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    31e4:	701d      	strb	r5, [r3, #0]
	osc16m_conf.on_demand       = 0;
    31e6:	709c      	strb	r4, [r3, #2]
	osc16m_conf.run_in_standby  = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
	system_clock_source_osc16m_set_config(&osc16m_conf);
    31e8:	4668      	mov	r0, sp
    31ea:	4b59      	ldr	r3, [pc, #356]	; (3350 <system_clock_init+0x200>)
    31ec:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    31ee:	2006      	movs	r0, #6
    31f0:	4b53      	ldr	r3, [pc, #332]	; (3340 <system_clock_init+0x1f0>)
    31f2:	4798      	blx	r3
	uint32_t mask = 0;

	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		mask = OSCCTRL_STATUS_OSC16MRDY;
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    31f4:	494e      	ldr	r1, [pc, #312]	; (3330 <system_clock_init+0x1e0>)
    31f6:	2210      	movs	r2, #16
    31f8:	68cb      	ldr	r3, [r1, #12]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
	osc16m_conf.on_demand       = 0;
	osc16m_conf.run_in_standby  = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
	system_clock_source_osc16m_set_config(&osc16m_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    31fa:	421a      	tst	r2, r3
    31fc:	d0fc      	beq.n	31f8 <system_clock_init+0xa8>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    31fe:	a901      	add	r1, sp, #4
    3200:	2301      	movs	r3, #1
    3202:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    3204:	2400      	movs	r4, #0
    3206:	704c      	strb	r4, [r1, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
    3208:	3305      	adds	r3, #5
    320a:	700b      	strb	r3, [r1, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    320c:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    320e:	724c      	strb	r4, [r1, #9]

	/* Select OSC16M for mainclock again */
	system_gclk_gen_get_config_defaults(&gclk_conf);
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_OSC16M;
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    3210:	2000      	movs	r0, #0
    3212:	4b4d      	ldr	r3, [pc, #308]	; (3348 <system_clock_init+0x1f8>)
    3214:	4798      	blx	r3
	if (CONF_CLOCK_OSC16M_ON_DEMAND){
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    3216:	4a46      	ldr	r2, [pc, #280]	; (3330 <system_clock_init+0x1e0>)
    3218:	7d11      	ldrb	r1, [r2, #20]
    321a:	2380      	movs	r3, #128	; 0x80
    321c:	430b      	orrs	r3, r1
    321e:	7513      	strb	r3, [r2, #20]
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    3220:	ab04      	add	r3, sp, #16
    3222:	2200      	movs	r2, #0
    3224:	809c      	strh	r4, [r3, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    3226:	80dc      	strh	r4, [r3, #6]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    3228:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    322a:	725a      	strb	r2, [r3, #9]
	config->on_demand       = true;
	config->run_in_stanby   = false;
    322c:	709a      	strb	r2, [r3, #2]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
	config->fine_value      = 0xff / 4; /* Midpoint */
    322e:	213f      	movs	r1, #63	; 0x3f
    3230:	8199      	strh	r1, [r3, #12]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    3232:	393b      	subs	r1, #59	; 0x3b
    3234:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    3236:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    3238:	4b46      	ldr	r3, [pc, #280]	; (3354 <system_clock_init+0x204>)
    323a:	681b      	ldr	r3, [r3, #0]
    323c:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
    323e:	2b3f      	cmp	r3, #63	; 0x3f
    3240:	d100      	bne.n	3244 <system_clock_init+0xf4>
		coarse = 0x1f;
    3242:	3b20      	subs	r3, #32
	}

	dfll_conf.coarse_value = coarse;
    3244:	a804      	add	r0, sp, #16
    3246:	7283      	strb	r3, [r0, #10]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    3248:	23b7      	movs	r3, #183	; 0xb7
    324a:	00db      	lsls	r3, r3, #3
    324c:	8243      	strh	r3, [r0, #18]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    324e:	2303      	movs	r3, #3
    3250:	7383      	strb	r3, [r0, #14]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    3252:	331c      	adds	r3, #28
    3254:	8203      	strh	r3, [r0, #16]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    3256:	4b40      	ldr	r3, [pc, #256]	; (3358 <system_clock_init+0x208>)
    3258:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    325a:	4b40      	ldr	r3, [pc, #256]	; (335c <system_clock_init+0x20c>)
    325c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    325e:	ac01      	add	r4, sp, #4
    3260:	2601      	movs	r6, #1
    3262:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    3264:	2500      	movs	r5, #0
    3266:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    3268:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    326a:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    326c:	2305      	movs	r3, #5
    326e:	7023      	strb	r3, [r4, #0]
    3270:	2001      	movs	r0, #1
    3272:	1c21      	adds	r1, r4, #0
    3274:	4b34      	ldr	r3, [pc, #208]	; (3348 <system_clock_init+0x1f8>)
    3276:	4698      	mov	r8, r3
    3278:	4798      	blx	r3
    327a:	2001      	movs	r0, #1
    327c:	4f38      	ldr	r7, [pc, #224]	; (3360 <system_clock_init+0x210>)
    327e:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    3280:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    3282:	7065      	strb	r5, [r4, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
    3284:	2306      	movs	r3, #6
    3286:	7023      	strb	r3, [r4, #0]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    3288:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    328a:	7265      	strb	r5, [r4, #9]
    328c:	2002      	movs	r0, #2
    328e:	1c21      	adds	r1, r4, #0
    3290:	47c0      	blx	r8
    3292:	2002      	movs	r0, #2
    3294:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    3296:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    3298:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    329a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    329c:	7265      	strb	r5, [r4, #9]
    329e:	2307      	movs	r3, #7
    32a0:	7023      	strb	r3, [r4, #0]
    32a2:	2003      	movs	r0, #3
    32a4:	1c21      	adds	r1, r4, #0
    32a6:	47c0      	blx	r8
    32a8:	2003      	movs	r0, #3
    32aa:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    32ac:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    32ae:	2000      	movs	r0, #0
    32b0:	1c21      	adds	r1, r4, #0
    32b2:	4b2c      	ldr	r3, [pc, #176]	; (3364 <system_clock_init+0x214>)
    32b4:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
    32b6:	2000      	movs	r0, #0
    32b8:	4b2b      	ldr	r3, [pc, #172]	; (3368 <system_clock_init+0x218>)
    32ba:	4798      	blx	r3
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    32bc:	2007      	movs	r0, #7
    32be:	4b20      	ldr	r3, [pc, #128]	; (3340 <system_clock_init+0x1f0>)
    32c0:	4798      	blx	r3
			mask = (OSCCTRL_STATUS_DFLLRDY |
			        OSCCTRL_STATUS_DFLLLCKF | OSCCTRL_STATUS_DFLLLCKC);
		} else {
			mask = OSCCTRL_STATUS_DFLLRDY;
		}
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    32c2:	491b      	ldr	r1, [pc, #108]	; (3330 <system_clock_init+0x1e0>)
    32c4:	22d0      	movs	r2, #208	; 0xd0
    32c6:	0112      	lsls	r2, r2, #4
    32c8:	68cb      	ldr	r3, [r1, #12]
    32ca:	4013      	ands	r3, r2
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    32cc:	4293      	cmp	r3, r2
    32ce:	d1fb      	bne.n	32c8 <system_clock_init+0x178>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & MCLK_CPUDIV_CPUDIV_Msk) == divider);
	MCLK->CPUDIV.reg = (uint32_t)divider;
    32d0:	4c26      	ldr	r4, [pc, #152]	; (336c <system_clock_init+0x21c>)
    32d2:	2300      	movs	r3, #0
    32d4:	7123      	strb	r3, [r4, #4]
 */
static inline void system_low_power_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & MCLK_LPDIV_LPDIV_Msk) == divider);
	MCLK->LPDIV.reg = (uint32_t)divider;
    32d6:	7163      	strb	r3, [r4, #5]
 */
static inline void system_backup_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & MCLK_BUPDIV_BUPDIV_Msk) == divider);
	MCLK->BUPDIV.reg = (uint32_t)divider;
    32d8:	71a3      	strb	r3, [r4, #6]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    32da:	a901      	add	r1, sp, #4
    32dc:	2201      	movs	r2, #1
    32de:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    32e0:	704b      	strb	r3, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    32e2:	724b      	strb	r3, [r1, #9]
	system_backup_clock_set_divider(CONF_CLOCK_BACKUP_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    32e4:	3307      	adds	r3, #7
    32e6:	700b      	strb	r3, [r1, #0]
    32e8:	720a      	strb	r2, [r1, #8]
    32ea:	2000      	movs	r0, #0
    32ec:	4b16      	ldr	r3, [pc, #88]	; (3348 <system_clock_init+0x1f8>)
    32ee:	4798      	blx	r3
    32f0:	2000      	movs	r0, #0
    32f2:	4b1b      	ldr	r3, [pc, #108]	; (3360 <system_clock_init+0x210>)
    32f4:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> (MCLK->CPUDIV.reg - 1));
    32f6:	2000      	movs	r0, #0
    32f8:	4b1d      	ldr	r3, [pc, #116]	; (3370 <system_clock_init+0x220>)
    32fa:	4798      	blx	r3
    32fc:	7923      	ldrb	r3, [r4, #4]
    32fe:	3b01      	subs	r3, #1
    3300:	40d8      	lsrs	r0, r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    3302:	4b1c      	ldr	r3, [pc, #112]	; (3374 <system_clock_init+0x224>)
    3304:	4298      	cmp	r0, r3
    3306:	d80e      	bhi.n	3326 <system_clock_init+0x1d6>
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    3308:	2380      	movs	r3, #128	; 0x80
    330a:	05db      	lsls	r3, r3, #23
    330c:	789b      	ldrb	r3, [r3, #2]
    330e:	2b00      	cmp	r3, #0
    3310:	d009      	beq.n	3326 <system_clock_init+0x1d6>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    3312:	2380      	movs	r3, #128	; 0x80
    3314:	05db      	lsls	r3, r3, #23
    3316:	2201      	movs	r2, #1
    3318:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    331a:	2200      	movs	r2, #0
    331c:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    331e:	1c1a      	adds	r2, r3, #0
    3320:	7993      	ldrb	r3, [r2, #6]
    3322:	2b00      	cmp	r3, #0
    3324:	d0fc      	beq.n	3320 <system_clock_init+0x1d0>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    3326:	b00c      	add	sp, #48	; 0x30
    3328:	bc04      	pop	{r2}
    332a:	4690      	mov	r8, r2
    332c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    332e:	46c0      	nop			; (mov r8, r8)
    3330:	40000c00 	.word	0x40000c00
    3334:	40001400 	.word	0x40001400
    3338:	41004000 	.word	0x41004000
    333c:	00002ed9 	.word	0x00002ed9
    3340:	00003015 	.word	0x00003015
    3344:	40001000 	.word	0x40001000
    3348:	0000339d 	.word	0x0000339d
    334c:	000030d1 	.word	0x000030d1
    3350:	00002ea1 	.word	0x00002ea1
    3354:	00806020 	.word	0x00806020
    3358:	00002f8d 	.word	0x00002f8d
    335c:	00003379 	.word	0x00003379
    3360:	00003449 	.word	0x00003449
    3364:	0000355d 	.word	0x0000355d
    3368:	000034f5 	.word	0x000034f5
    336c:	40000400 	.word	0x40000400
    3370:	00003489 	.word	0x00003489
    3374:	00b71b00 	.word	0x00b71b00

00003378 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    3378:	4a06      	ldr	r2, [pc, #24]	; (3394 <system_gclk_init+0x1c>)
    337a:	6951      	ldr	r1, [r2, #20]
    337c:	2340      	movs	r3, #64	; 0x40
    337e:	430b      	orrs	r3, r1
    3380:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    3382:	2201      	movs	r2, #1
    3384:	4b04      	ldr	r3, [pc, #16]	; (3398 <system_gclk_init+0x20>)
    3386:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    3388:	1c19      	adds	r1, r3, #0
    338a:	780b      	ldrb	r3, [r1, #0]
    338c:	4213      	tst	r3, r2
    338e:	d1fc      	bne.n	338a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    3390:	4770      	bx	lr
    3392:	46c0      	nop			; (mov r8, r8)
    3394:	40000400 	.word	0x40000400
    3398:	40001800 	.word	0x40001800

0000339c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    339c:	b570      	push	{r4, r5, r6, lr}
    339e:	1c04      	adds	r4, r0, #0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    33a0:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    33a2:	784b      	ldrb	r3, [r1, #1]
    33a4:	2b00      	cmp	r3, #0
    33a6:	d002      	beq.n	33ae <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    33a8:	2380      	movs	r3, #128	; 0x80
    33aa:	00db      	lsls	r3, r3, #3
    33ac:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    33ae:	7a4b      	ldrb	r3, [r1, #9]
    33b0:	2b00      	cmp	r3, #0
    33b2:	d002      	beq.n	33ba <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    33b4:	2380      	movs	r3, #128	; 0x80
    33b6:	011b      	lsls	r3, r3, #4
    33b8:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    33ba:	684a      	ldr	r2, [r1, #4]
    33bc:	2a01      	cmp	r2, #1
    33be:	d917      	bls.n	33f0 <system_gclk_gen_set_config+0x54>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    33c0:	1e53      	subs	r3, r2, #1
    33c2:	421a      	tst	r2, r3
    33c4:	d10f      	bne.n	33e6 <system_gclk_gen_set_config+0x4a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    33c6:	2a02      	cmp	r2, #2
    33c8:	d906      	bls.n	33d8 <system_gclk_gen_set_config+0x3c>
    33ca:	2302      	movs	r3, #2
    33cc:	2000      	movs	r0, #0
						mask <<= 1) {
				div2_count++;
    33ce:	3001      	adds	r0, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    33d0:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    33d2:	429a      	cmp	r2, r3
    33d4:	d8fb      	bhi.n	33ce <system_gclk_gen_set_config+0x32>
    33d6:	e000      	b.n	33da <system_gclk_gen_set_config+0x3e>
    33d8:	2000      	movs	r0, #0
    33da:	2380      	movs	r3, #128	; 0x80
    33dc:	015b      	lsls	r3, r3, #5
    33de:	431d      	orrs	r5, r3
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    33e0:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    33e2:	4305      	orrs	r5, r0
    33e4:	e004      	b.n	33f0 <system_gclk_gen_set_config+0x54>
		} else {
			/* Set integer division factor */

			new_genctrl_config  |=
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    33e6:	0412      	lsls	r2, r2, #16
    33e8:	2380      	movs	r3, #128	; 0x80
    33ea:	009b      	lsls	r3, r3, #2
    33ec:	431a      	orrs	r2, r3

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    33ee:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    33f0:	7a0b      	ldrb	r3, [r1, #8]
    33f2:	2b00      	cmp	r3, #0
    33f4:	d002      	beq.n	33fc <system_gclk_gen_set_config+0x60>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    33f6:	2380      	movs	r3, #128	; 0x80
    33f8:	019b      	lsls	r3, r3, #6
    33fa:	431d      	orrs	r5, r3
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    33fc:	2604      	movs	r6, #4
    33fe:	40a6      	lsls	r6, r4
    3400:	490d      	ldr	r1, [pc, #52]	; (3438 <system_gclk_gen_set_config+0x9c>)
    3402:	4a0e      	ldr	r2, [pc, #56]	; (343c <system_gclk_gen_set_config+0xa0>)
    3404:	684b      	ldr	r3, [r1, #4]
    3406:	4013      	ands	r3, r2
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing(generator)) {
    3408:	421e      	tst	r6, r3
    340a:	d1fb      	bne.n	3404 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    340c:	4b0c      	ldr	r3, [pc, #48]	; (3440 <system_gclk_gen_set_config+0xa4>)
    340e:	4798      	blx	r3
    3410:	00a4      	lsls	r4, r4, #2
    3412:	4b09      	ldr	r3, [pc, #36]	; (3438 <system_gclk_gen_set_config+0x9c>)
    3414:	469c      	mov	ip, r3
    3416:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    3418:	6a20      	ldr	r0, [r4, #32]
    341a:	2380      	movs	r3, #128	; 0x80
    341c:	005b      	lsls	r3, r3, #1
    341e:	4018      	ands	r0, r3
    3420:	4328      	orrs	r0, r5
    3422:	6220      	str	r0, [r4, #32]
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3424:	4661      	mov	r1, ip
    3426:	4a05      	ldr	r2, [pc, #20]	; (343c <system_gclk_gen_set_config+0xa0>)
    3428:	684b      	ldr	r3, [r1, #4]
    342a:	4013      	ands	r3, r2

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);

	while (system_gclk_is_syncing(generator)) {
    342c:	421e      	tst	r6, r3
    342e:	d1fb      	bne.n	3428 <system_gclk_gen_set_config+0x8c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3430:	4b04      	ldr	r3, [pc, #16]	; (3444 <system_gclk_gen_set_config+0xa8>)
    3432:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    3434:	bd70      	pop	{r4, r5, r6, pc}
    3436:	46c0      	nop			; (mov r8, r8)
    3438:	40001800 	.word	0x40001800
    343c:	000007fc 	.word	0x000007fc
    3440:	00002d9d 	.word	0x00002d9d
    3444:	00002ddd 	.word	0x00002ddd

00003448 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3448:	b510      	push	{r4, lr}
    344a:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    344c:	2204      	movs	r2, #4
    344e:	4082      	lsls	r2, r0
    3450:	4809      	ldr	r0, [pc, #36]	; (3478 <system_gclk_gen_enable+0x30>)
    3452:	490a      	ldr	r1, [pc, #40]	; (347c <system_gclk_gen_enable+0x34>)
    3454:	6843      	ldr	r3, [r0, #4]
    3456:	400b      	ands	r3, r1
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    3458:	421a      	tst	r2, r3
    345a:	d1fb      	bne.n	3454 <system_gclk_gen_enable+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    345c:	4b08      	ldr	r3, [pc, #32]	; (3480 <system_gclk_gen_enable+0x38>)
    345e:	4798      	blx	r3
    3460:	00a4      	lsls	r4, r4, #2
    3462:	4b05      	ldr	r3, [pc, #20]	; (3478 <system_gclk_gen_enable+0x30>)
    3464:	469c      	mov	ip, r3
    3466:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    3468:	6a23      	ldr	r3, [r4, #32]
    346a:	2280      	movs	r2, #128	; 0x80
    346c:	0052      	lsls	r2, r2, #1
    346e:	4313      	orrs	r3, r2
    3470:	6223      	str	r3, [r4, #32]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3472:	4b04      	ldr	r3, [pc, #16]	; (3484 <system_gclk_gen_enable+0x3c>)
    3474:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3476:	bd10      	pop	{r4, pc}
    3478:	40001800 	.word	0x40001800
    347c:	000007fc 	.word	0x000007fc
    3480:	00002d9d 	.word	0x00002d9d
    3484:	00002ddd 	.word	0x00002ddd

00003488 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    348a:	1c04      	adds	r4, r0, #0
  * \retval true if the module synchronization is ongoing
  */
static inline bool system_gclk_is_syncing(const uint8_t generator)
{

	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    348c:	2204      	movs	r2, #4
    348e:	4082      	lsls	r2, r0
    3490:	4812      	ldr	r0, [pc, #72]	; (34dc <system_gclk_gen_get_hz+0x54>)
    3492:	4913      	ldr	r1, [pc, #76]	; (34e0 <system_gclk_gen_get_hz+0x58>)
    3494:	6843      	ldr	r3, [r0, #4]
    3496:	400b      	ands	r3, r1
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing(generator)) {
    3498:	421a      	tst	r2, r3
    349a:	d1fb      	bne.n	3494 <system_gclk_gen_get_hz+0xc>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    349c:	4b11      	ldr	r3, [pc, #68]	; (34e4 <system_gclk_gen_get_hz+0x5c>)
    349e:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    34a0:	4f0e      	ldr	r7, [pc, #56]	; (34dc <system_gclk_gen_get_hz+0x54>)
    34a2:	3408      	adds	r4, #8
    34a4:	00a4      	lsls	r4, r4, #2
    34a6:	59e3      	ldr	r3, [r4, r7]
    34a8:	200f      	movs	r0, #15
    34aa:	4018      	ands	r0, r3
	};

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    34ac:	4b0e      	ldr	r3, [pc, #56]	; (34e8 <system_gclk_gen_get_hz+0x60>)
    34ae:	4798      	blx	r3
    34b0:	1c06      	adds	r6, r0, #0
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    34b2:	59e5      	ldr	r5, [r4, r7]
    34b4:	04ed      	lsls	r5, r5, #19
    34b6:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    34b8:	59e4      	ldr	r4, [r4, r7]
    34ba:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    34bc:	4b0b      	ldr	r3, [pc, #44]	; (34ec <system_gclk_gen_get_hz+0x64>)
    34be:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    34c0:	2d00      	cmp	r5, #0
    34c2:	d107      	bne.n	34d4 <system_gclk_gen_get_hz+0x4c>
    34c4:	2c01      	cmp	r4, #1
    34c6:	d907      	bls.n	34d8 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    34c8:	1c30      	adds	r0, r6, #0
    34ca:	1c21      	adds	r1, r4, #0
    34cc:	4b08      	ldr	r3, [pc, #32]	; (34f0 <system_gclk_gen_get_hz+0x68>)
    34ce:	4798      	blx	r3
    34d0:	1c06      	adds	r6, r0, #0
    34d2:	e001      	b.n	34d8 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    34d4:	3401      	adds	r4, #1
    34d6:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    34d8:	1c30      	adds	r0, r6, #0
    34da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34dc:	40001800 	.word	0x40001800
    34e0:	000007fc 	.word	0x000007fc
    34e4:	00002d9d 	.word	0x00002d9d
    34e8:	00002e0d 	.word	0x00002e0d
    34ec:	00002ddd 	.word	0x00002ddd
    34f0:	00003861 	.word	0x00003861

000034f4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    34f4:	b510      	push	{r4, lr}
    34f6:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    34f8:	4b08      	ldr	r3, [pc, #32]	; (351c <system_gclk_chan_enable+0x28>)
    34fa:	4798      	blx	r3
    34fc:	00a4      	lsls	r4, r4, #2
    34fe:	4b08      	ldr	r3, [pc, #32]	; (3520 <system_gclk_chan_enable+0x2c>)
    3500:	18e0      	adds	r0, r4, r3
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    3502:	2280      	movs	r2, #128	; 0x80
    3504:	5881      	ldr	r1, [r0, r2]
    3506:	2340      	movs	r3, #64	; 0x40
    3508:	430b      	orrs	r3, r1
    350a:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    350c:	2180      	movs	r1, #128	; 0x80
    350e:	3a40      	subs	r2, #64	; 0x40
    3510:	5843      	ldr	r3, [r0, r1]
    3512:	421a      	tst	r2, r3
    3514:	d0fc      	beq.n	3510 <system_gclk_chan_enable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3516:	4b03      	ldr	r3, [pc, #12]	; (3524 <system_gclk_chan_enable+0x30>)
    3518:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    351a:	bd10      	pop	{r4, pc}
    351c:	00002d9d 	.word	0x00002d9d
    3520:	40001800 	.word	0x40001800
    3524:	00002ddd 	.word	0x00002ddd

00003528 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3528:	b510      	push	{r4, lr}
    352a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    352c:	4b08      	ldr	r3, [pc, #32]	; (3550 <system_gclk_chan_disable+0x28>)
    352e:	4798      	blx	r3
    3530:	00a4      	lsls	r4, r4, #2
    3532:	4b08      	ldr	r3, [pc, #32]	; (3554 <system_gclk_chan_disable+0x2c>)
    3534:	18e0      	adds	r0, r4, r3

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    3536:	2280      	movs	r2, #128	; 0x80
    3538:	5883      	ldr	r3, [r0, r2]
    353a:	2140      	movs	r1, #64	; 0x40
    353c:	438b      	bics	r3, r1
    353e:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    3540:	3140      	adds	r1, #64	; 0x40
    3542:	3a40      	subs	r2, #64	; 0x40
    3544:	5843      	ldr	r3, [r0, r1]
    3546:	421a      	tst	r2, r3
    3548:	d1fc      	bne.n	3544 <system_gclk_chan_disable+0x1c>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    354a:	4b03      	ldr	r3, [pc, #12]	; (3558 <system_gclk_chan_disable+0x30>)
    354c:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    354e:	bd10      	pop	{r4, pc}
    3550:	00002d9d 	.word	0x00002d9d
    3554:	40001800 	.word	0x40001800
    3558:	00002ddd 	.word	0x00002ddd

0000355c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    355c:	b538      	push	{r3, r4, r5, lr}
    355e:	1c04      	adds	r4, r0, #0
    3560:	1c0d      	adds	r5, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    3562:	4b05      	ldr	r3, [pc, #20]	; (3578 <system_gclk_chan_set_config+0x1c>)
    3564:	4798      	blx	r3

	/* Configure the peripheral channel */
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    3566:	782b      	ldrb	r3, [r5, #0]
    3568:	220f      	movs	r2, #15
    356a:	4013      	ands	r3, r2
    356c:	3420      	adds	r4, #32
    356e:	00a4      	lsls	r4, r4, #2
    3570:	4a02      	ldr	r2, [pc, #8]	; (357c <system_gclk_chan_set_config+0x20>)
    3572:	50a3      	str	r3, [r4, r2]


}
    3574:	bd38      	pop	{r3, r4, r5, pc}
    3576:	46c0      	nop			; (mov r8, r8)
    3578:	00003529 	.word	0x00003529
    357c:	40001800 	.word	0x40001800

00003580 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3580:	b510      	push	{r4, lr}
    3582:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    3584:	4b06      	ldr	r3, [pc, #24]	; (35a0 <system_gclk_chan_get_hz+0x20>)
    3586:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    3588:	3420      	adds	r4, #32
    358a:	00a4      	lsls	r4, r4, #2
    358c:	4b05      	ldr	r3, [pc, #20]	; (35a4 <system_gclk_chan_get_hz+0x24>)
    358e:	58e3      	ldr	r3, [r4, r3]
    3590:	240f      	movs	r4, #15
    3592:	401c      	ands	r4, r3
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    3594:	4b04      	ldr	r3, [pc, #16]	; (35a8 <system_gclk_chan_get_hz+0x28>)
    3596:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3598:	1c20      	adds	r0, r4, #0
    359a:	4b04      	ldr	r3, [pc, #16]	; (35ac <system_gclk_chan_get_hz+0x2c>)
    359c:	4798      	blx	r3
}
    359e:	bd10      	pop	{r4, pc}
    35a0:	00002d9d 	.word	0x00002d9d
    35a4:	40001800 	.word	0x40001800
    35a8:	00002ddd 	.word	0x00002ddd
    35ac:	00003489 	.word	0x00003489

000035b0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    35b0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    35b2:	78d3      	ldrb	r3, [r2, #3]
    35b4:	2b00      	cmp	r3, #0
    35b6:	d11e      	bne.n	35f6 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    35b8:	7814      	ldrb	r4, [r2, #0]
    35ba:	2c80      	cmp	r4, #128	; 0x80
    35bc:	d004      	beq.n	35c8 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    35be:	0624      	lsls	r4, r4, #24
    35c0:	2380      	movs	r3, #128	; 0x80
    35c2:	025b      	lsls	r3, r3, #9
    35c4:	431c      	orrs	r4, r3
    35c6:	e000      	b.n	35ca <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    35c8:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    35ca:	7853      	ldrb	r3, [r2, #1]
    35cc:	2502      	movs	r5, #2
    35ce:	43ab      	bics	r3, r5
    35d0:	d10a      	bne.n	35e8 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    35d2:	7893      	ldrb	r3, [r2, #2]
    35d4:	2b00      	cmp	r3, #0
    35d6:	d103      	bne.n	35e0 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    35d8:	2380      	movs	r3, #128	; 0x80
    35da:	029b      	lsls	r3, r3, #10
    35dc:	431c      	orrs	r4, r3
    35de:	e002      	b.n	35e6 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    35e0:	23c0      	movs	r3, #192	; 0xc0
    35e2:	02db      	lsls	r3, r3, #11
    35e4:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    35e6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    35e8:	7853      	ldrb	r3, [r2, #1]
    35ea:	3b01      	subs	r3, #1
    35ec:	2b01      	cmp	r3, #1
    35ee:	d812      	bhi.n	3616 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    35f0:	4b18      	ldr	r3, [pc, #96]	; (3654 <_system_pinmux_config+0xa4>)
    35f2:	401c      	ands	r4, r3
    35f4:	e00f      	b.n	3616 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    35f6:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    35f8:	040b      	lsls	r3, r1, #16
    35fa:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    35fc:	24a0      	movs	r4, #160	; 0xa0
    35fe:	05e4      	lsls	r4, r4, #23
    3600:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3602:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3604:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3606:	24d0      	movs	r4, #208	; 0xd0
    3608:	0624      	lsls	r4, r4, #24
    360a:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    360c:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    360e:	78d3      	ldrb	r3, [r2, #3]
    3610:	2b00      	cmp	r3, #0
    3612:	d018      	beq.n	3646 <_system_pinmux_config+0x96>
    3614:	e01c      	b.n	3650 <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3616:	040b      	lsls	r3, r1, #16
    3618:	0c1b      	lsrs	r3, r3, #16
    361a:	25a0      	movs	r5, #160	; 0xa0
    361c:	05ed      	lsls	r5, r5, #23
    361e:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3620:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3622:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3624:	0c0b      	lsrs	r3, r1, #16
    3626:	25d0      	movs	r5, #208	; 0xd0
    3628:	062d      	lsls	r5, r5, #24
    362a:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    362c:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    362e:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3630:	78d3      	ldrb	r3, [r2, #3]
    3632:	2b00      	cmp	r3, #0
    3634:	d10c      	bne.n	3650 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3636:	0363      	lsls	r3, r4, #13
    3638:	d505      	bpl.n	3646 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    363a:	7893      	ldrb	r3, [r2, #2]
    363c:	2b01      	cmp	r3, #1
    363e:	d101      	bne.n	3644 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    3640:	6181      	str	r1, [r0, #24]
    3642:	e000      	b.n	3646 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    3644:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3646:	7853      	ldrb	r3, [r2, #1]
    3648:	3b01      	subs	r3, #1
    364a:	2b01      	cmp	r3, #1
    364c:	d800      	bhi.n	3650 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    364e:	6081      	str	r1, [r0, #8]
		}
	}
}
    3650:	bd30      	pop	{r4, r5, pc}
    3652:	46c0      	nop			; (mov r8, r8)
    3654:	fffbffff 	.word	0xfffbffff

00003658 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3658:	b508      	push	{r3, lr}
    365a:	1c03      	adds	r3, r0, #0
    365c:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    365e:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3660:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3662:	2900      	cmp	r1, #0
    3664:	d104      	bne.n	3670 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    3666:	0958      	lsrs	r0, r3, #5
    3668:	01c0      	lsls	r0, r0, #7
    366a:	4905      	ldr	r1, [pc, #20]	; (3680 <system_pinmux_pin_set_config+0x28>)
    366c:	468c      	mov	ip, r1
    366e:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3670:	211f      	movs	r1, #31
    3672:	400b      	ands	r3, r1
    3674:	391e      	subs	r1, #30
    3676:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    3678:	4b02      	ldr	r3, [pc, #8]	; (3684 <system_pinmux_pin_set_config+0x2c>)
    367a:	4798      	blx	r3
}
    367c:	bd08      	pop	{r3, pc}
    367e:	46c0      	nop			; (mov r8, r8)
    3680:	40002800 	.word	0x40002800
    3684:	000035b1 	.word	0x000035b1

00003688 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3688:	4770      	bx	lr
    368a:	46c0      	nop			; (mov r8, r8)

0000368c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    368c:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    368e:	4b05      	ldr	r3, [pc, #20]	; (36a4 <system_init+0x18>)
    3690:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3692:	4b05      	ldr	r3, [pc, #20]	; (36a8 <system_init+0x1c>)
    3694:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3696:	4b05      	ldr	r3, [pc, #20]	; (36ac <system_init+0x20>)
    3698:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    369a:	4b05      	ldr	r3, [pc, #20]	; (36b0 <system_init+0x24>)
    369c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    369e:	4b05      	ldr	r3, [pc, #20]	; (36b4 <system_init+0x28>)
    36a0:	4798      	blx	r3
}
    36a2:	bd08      	pop	{r3, pc}
    36a4:	00003151 	.word	0x00003151
    36a8:	00002d99 	.word	0x00002d99
    36ac:	00000f9d 	.word	0x00000f9d
    36b0:	00000fdd 	.word	0x00000fdd
    36b4:	00003689 	.word	0x00003689

000036b8 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    36b8:	e7fe      	b.n	36b8 <Dummy_Handler>
    36ba:	46c0      	nop			; (mov r8, r8)

000036bc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    36bc:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    36be:	4b1d      	ldr	r3, [pc, #116]	; (3734 <Reset_Handler+0x78>)
    36c0:	4a1d      	ldr	r2, [pc, #116]	; (3738 <Reset_Handler+0x7c>)
    36c2:	429a      	cmp	r2, r3
    36c4:	d003      	beq.n	36ce <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    36c6:	4b1d      	ldr	r3, [pc, #116]	; (373c <Reset_Handler+0x80>)
    36c8:	4a1a      	ldr	r2, [pc, #104]	; (3734 <Reset_Handler+0x78>)
    36ca:	429a      	cmp	r2, r3
    36cc:	d304      	bcc.n	36d8 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    36ce:	4b1c      	ldr	r3, [pc, #112]	; (3740 <Reset_Handler+0x84>)
    36d0:	4a1c      	ldr	r2, [pc, #112]	; (3744 <Reset_Handler+0x88>)
    36d2:	429a      	cmp	r2, r3
    36d4:	d310      	bcc.n	36f8 <Reset_Handler+0x3c>
    36d6:	e01e      	b.n	3716 <Reset_Handler+0x5a>
    36d8:	4a1b      	ldr	r2, [pc, #108]	; (3748 <Reset_Handler+0x8c>)
    36da:	4b18      	ldr	r3, [pc, #96]	; (373c <Reset_Handler+0x80>)
    36dc:	3303      	adds	r3, #3
    36de:	1a9b      	subs	r3, r3, r2
    36e0:	089b      	lsrs	r3, r3, #2
    36e2:	3301      	adds	r3, #1
    36e4:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    36e6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    36e8:	4812      	ldr	r0, [pc, #72]	; (3734 <Reset_Handler+0x78>)
    36ea:	4913      	ldr	r1, [pc, #76]	; (3738 <Reset_Handler+0x7c>)
    36ec:	588c      	ldr	r4, [r1, r2]
    36ee:	5084      	str	r4, [r0, r2]
    36f0:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    36f2:	429a      	cmp	r2, r3
    36f4:	d1fa      	bne.n	36ec <Reset_Handler+0x30>
    36f6:	e7ea      	b.n	36ce <Reset_Handler+0x12>
    36f8:	4a14      	ldr	r2, [pc, #80]	; (374c <Reset_Handler+0x90>)
    36fa:	4b11      	ldr	r3, [pc, #68]	; (3740 <Reset_Handler+0x84>)
    36fc:	3303      	adds	r3, #3
    36fe:	1a9b      	subs	r3, r3, r2
    3700:	089b      	lsrs	r3, r3, #2
    3702:	3301      	adds	r3, #1
    3704:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3706:	2200      	movs	r2, #0
                *pDest++ = 0;
    3708:	480e      	ldr	r0, [pc, #56]	; (3744 <Reset_Handler+0x88>)
    370a:	2100      	movs	r1, #0
    370c:	1814      	adds	r4, r2, r0
    370e:	6021      	str	r1, [r4, #0]
    3710:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3712:	429a      	cmp	r2, r3
    3714:	d1fa      	bne.n	370c <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3716:	4a0e      	ldr	r2, [pc, #56]	; (3750 <Reset_Handler+0x94>)
    3718:	21ff      	movs	r1, #255	; 0xff
    371a:	4b0e      	ldr	r3, [pc, #56]	; (3754 <Reset_Handler+0x98>)
    371c:	438b      	bics	r3, r1
    371e:	6093      	str	r3, [r2, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    3720:	4a0d      	ldr	r2, [pc, #52]	; (3758 <Reset_Handler+0x9c>)
    3722:	6851      	ldr	r1, [r2, #4]
    3724:	2380      	movs	r3, #128	; 0x80
    3726:	430b      	orrs	r3, r1
    3728:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    372a:	4b0c      	ldr	r3, [pc, #48]	; (375c <Reset_Handler+0xa0>)
    372c:	4798      	blx	r3

        /* Branch to main function */
        main();
    372e:	4b0c      	ldr	r3, [pc, #48]	; (3760 <Reset_Handler+0xa4>)
    3730:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    3732:	e7fe      	b.n	3732 <Reset_Handler+0x76>
    3734:	20000000 	.word	0x20000000
    3738:	00003ccc 	.word	0x00003ccc
    373c:	200000f8 	.word	0x200000f8
    3740:	20000b0c 	.word	0x20000b0c
    3744:	200000f8 	.word	0x200000f8
    3748:	20000004 	.word	0x20000004
    374c:	200000fc 	.word	0x200000fc
    3750:	e000ed00 	.word	0xe000ed00
    3754:	00000000 	.word	0x00000000
    3758:	41004000 	.word	0x41004000
    375c:	00003ba5 	.word	0x00003ba5
    3760:	00003765 	.word	0x00003765

00003764 <main>:

/*! \brief Main function. Execution starts here.
 */

int main(void)
{
    3764:	b538      	push	{r3, r4, r5, lr}

	irq_initialize_vectors();
	cpu_irq_enable();
    3766:	4d12      	ldr	r5, [pc, #72]	; (37b0 <main+0x4c>)
    3768:	2401      	movs	r4, #1
    376a:	702c      	strb	r4, [r5, #0]
    376c:	f3bf 8f5f 	dmb	sy
    3770:	b662      	cpsie	i
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    3772:	4b10      	ldr	r3, [pc, #64]	; (37b4 <main+0x50>)
    3774:	2200      	movs	r2, #0
    3776:	701a      	strb	r2, [r3, #0]
    3778:	705a      	strb	r2, [r3, #1]
    377a:	709a      	strb	r2, [r3, #2]
    377c:	70da      	strb	r2, [r3, #3]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    377e:	711c      	strb	r4, [r3, #4]

#if !SAM0
	sysclk_init();
	board_init();
#else
	system_init();
    3780:	4b0d      	ldr	r3, [pc, #52]	; (37b8 <main+0x54>)
    3782:	4798      	blx	r3
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3784:	490d      	ldr	r1, [pc, #52]	; (37bc <main+0x58>)
    3786:	684b      	ldr	r3, [r1, #4]
    3788:	221e      	movs	r2, #30
    378a:	4393      	bics	r3, r2
    378c:	1c1a      	adds	r2, r3, #0
    378e:	2304      	movs	r3, #4
    3790:	4313      	orrs	r3, r2
    3792:	604b      	str	r3, [r1, #4]
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    3794:	702c      	strb	r4, [r5, #0]
    3796:	f3bf 8f5f 	dmb	sy
    379a:	b662      	cpsie	i
	

	system_flash_set_waitstates(2);
	system_interrupt_enable_global();

	ui_init();
    379c:	4b08      	ldr	r3, [pc, #32]	; (37c0 <main+0x5c>)
    379e:	4798      	blx	r3
	ui_powerdown();
    37a0:	4b08      	ldr	r3, [pc, #32]	; (37c4 <main+0x60>)
    37a2:	4798      	blx	r3

	// Start USB stack to authorize VBus monitoring
	udc_start();
    37a4:	4b08      	ldr	r3, [pc, #32]	; (37c8 <main+0x64>)
    37a6:	4798      	blx	r3
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    37a8:	f3bf 8f4f 	dsb	sy
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
    37ac:	bf30      	wfi
    37ae:	e7fb      	b.n	37a8 <main+0x44>
    37b0:	200000f7 	.word	0x200000f7
    37b4:	20000730 	.word	0x20000730
    37b8:	0000368d 	.word	0x0000368d
    37bc:	41004000 	.word	0x41004000
    37c0:	00001ecd 	.word	0x00001ecd
    37c4:	00001ed1 	.word	0x00001ed1
    37c8:	00000aa1 	.word	0x00000aa1

000037cc <main_suspend_action>:
		system_sleep();
	}
}

void main_suspend_action(void)
{
    37cc:	b508      	push	{r3, lr}
	ui_powerdown();
    37ce:	4b01      	ldr	r3, [pc, #4]	; (37d4 <main_suspend_action+0x8>)
    37d0:	4798      	blx	r3
}
    37d2:	bd08      	pop	{r3, pc}
    37d4:	00001ed1 	.word	0x00001ed1

000037d8 <main_resume_action>:

void main_resume_action(void)
{
    37d8:	b508      	push	{r3, lr}
	ui_wakeup();
    37da:	4b01      	ldr	r3, [pc, #4]	; (37e0 <main_resume_action+0x8>)
    37dc:	4798      	blx	r3
}
    37de:	bd08      	pop	{r3, pc}
    37e0:	00001edd 	.word	0x00001edd

000037e4 <main_sof_action>:

void main_sof_action(void)
{
    37e4:	b508      	push	{r3, lr}
	if (!main_b_cdc_enable)
    37e6:	4b04      	ldr	r3, [pc, #16]	; (37f8 <main_sof_action+0x14>)
    37e8:	781b      	ldrb	r3, [r3, #0]
    37ea:	2b00      	cmp	r3, #0
    37ec:	d003      	beq.n	37f6 <main_sof_action+0x12>
		return;
	ui_process(udd_get_frame_number());
    37ee:	4b03      	ldr	r3, [pc, #12]	; (37fc <main_sof_action+0x18>)
    37f0:	4798      	blx	r3
    37f2:	4b03      	ldr	r3, [pc, #12]	; (3800 <main_sof_action+0x1c>)
    37f4:	4798      	blx	r3
}
    37f6:	bd08      	pop	{r3, pc}
    37f8:	2000072c 	.word	0x2000072c
    37fc:	00001851 	.word	0x00001851
    3800:	00001ee9 	.word	0x00001ee9

00003804 <main_suspend_lpm_action>:

#ifdef USB_DEVICE_LPM_SUPPORT
void main_suspend_lpm_action(void)
{
    3804:	b508      	push	{r3, lr}
	ui_powerdown();
    3806:	4b01      	ldr	r3, [pc, #4]	; (380c <main_suspend_lpm_action+0x8>)
    3808:	4798      	blx	r3
}
    380a:	bd08      	pop	{r3, pc}
    380c:	00001ed1 	.word	0x00001ed1

00003810 <main_remotewakeup_lpm_disable>:

void main_remotewakeup_lpm_disable(void)
{
    3810:	b508      	push	{r3, lr}
	ui_wakeup_disable();
    3812:	4b01      	ldr	r3, [pc, #4]	; (3818 <main_remotewakeup_lpm_disable+0x8>)
    3814:	4798      	blx	r3
}
    3816:	bd08      	pop	{r3, pc}
    3818:	00001ed9 	.word	0x00001ed9

0000381c <main_remotewakeup_lpm_enable>:

void main_remotewakeup_lpm_enable(void)
{
    381c:	b508      	push	{r3, lr}
	ui_wakeup_enable();
    381e:	4b01      	ldr	r3, [pc, #4]	; (3824 <main_remotewakeup_lpm_enable+0x8>)
    3820:	4798      	blx	r3
}
    3822:	bd08      	pop	{r3, pc}
    3824:	00001ed5 	.word	0x00001ed5

00003828 <main_cdc_enable>:
#endif

bool main_cdc_enable(uint8_t port)
{
	main_b_cdc_enable = true;
    3828:	2201      	movs	r2, #1
    382a:	4b02      	ldr	r3, [pc, #8]	; (3834 <main_cdc_enable+0xc>)
    382c:	701a      	strb	r2, [r3, #0]
	return true;
}
    382e:	2001      	movs	r0, #1
    3830:	4770      	bx	lr
    3832:	46c0      	nop			; (mov r8, r8)
    3834:	2000072c 	.word	0x2000072c

00003838 <main_cdc_disable>:

void main_cdc_disable(uint8_t port)
{
	main_b_cdc_enable = false;
    3838:	2200      	movs	r2, #0
    383a:	4b01      	ldr	r3, [pc, #4]	; (3840 <main_cdc_disable+0x8>)
    383c:	701a      	strb	r2, [r3, #0]
}
    383e:	4770      	bx	lr
    3840:	2000072c 	.word	0x2000072c

00003844 <main_cdc_set_dtr>:

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
    3844:	b508      	push	{r3, lr}
	if (b_enable) {
    3846:	2900      	cmp	r1, #0
    3848:	d002      	beq.n	3850 <main_cdc_set_dtr+0xc>
		// Host terminal has open COM
		ui_com_open(port);
    384a:	4b03      	ldr	r3, [pc, #12]	; (3858 <main_cdc_set_dtr+0x14>)
    384c:	4798      	blx	r3
    384e:	e001      	b.n	3854 <main_cdc_set_dtr+0x10>
	}else{
		// Host terminal has close COM
		ui_com_close(port);
    3850:	4b02      	ldr	r3, [pc, #8]	; (385c <main_cdc_set_dtr+0x18>)
    3852:	4798      	blx	r3
	}
    3854:	bd08      	pop	{r3, pc}
    3856:	46c0      	nop			; (mov r8, r8)
    3858:	00001ee1 	.word	0x00001ee1
    385c:	00001ee5 	.word	0x00001ee5

00003860 <__aeabi_uidiv>:
    3860:	2200      	movs	r2, #0
    3862:	0843      	lsrs	r3, r0, #1
    3864:	428b      	cmp	r3, r1
    3866:	d374      	bcc.n	3952 <__aeabi_uidiv+0xf2>
    3868:	0903      	lsrs	r3, r0, #4
    386a:	428b      	cmp	r3, r1
    386c:	d35f      	bcc.n	392e <__aeabi_uidiv+0xce>
    386e:	0a03      	lsrs	r3, r0, #8
    3870:	428b      	cmp	r3, r1
    3872:	d344      	bcc.n	38fe <__aeabi_uidiv+0x9e>
    3874:	0b03      	lsrs	r3, r0, #12
    3876:	428b      	cmp	r3, r1
    3878:	d328      	bcc.n	38cc <__aeabi_uidiv+0x6c>
    387a:	0c03      	lsrs	r3, r0, #16
    387c:	428b      	cmp	r3, r1
    387e:	d30d      	bcc.n	389c <__aeabi_uidiv+0x3c>
    3880:	22ff      	movs	r2, #255	; 0xff
    3882:	0209      	lsls	r1, r1, #8
    3884:	ba12      	rev	r2, r2
    3886:	0c03      	lsrs	r3, r0, #16
    3888:	428b      	cmp	r3, r1
    388a:	d302      	bcc.n	3892 <__aeabi_uidiv+0x32>
    388c:	1212      	asrs	r2, r2, #8
    388e:	0209      	lsls	r1, r1, #8
    3890:	d065      	beq.n	395e <__aeabi_uidiv+0xfe>
    3892:	0b03      	lsrs	r3, r0, #12
    3894:	428b      	cmp	r3, r1
    3896:	d319      	bcc.n	38cc <__aeabi_uidiv+0x6c>
    3898:	e000      	b.n	389c <__aeabi_uidiv+0x3c>
    389a:	0a09      	lsrs	r1, r1, #8
    389c:	0bc3      	lsrs	r3, r0, #15
    389e:	428b      	cmp	r3, r1
    38a0:	d301      	bcc.n	38a6 <__aeabi_uidiv+0x46>
    38a2:	03cb      	lsls	r3, r1, #15
    38a4:	1ac0      	subs	r0, r0, r3
    38a6:	4152      	adcs	r2, r2
    38a8:	0b83      	lsrs	r3, r0, #14
    38aa:	428b      	cmp	r3, r1
    38ac:	d301      	bcc.n	38b2 <__aeabi_uidiv+0x52>
    38ae:	038b      	lsls	r3, r1, #14
    38b0:	1ac0      	subs	r0, r0, r3
    38b2:	4152      	adcs	r2, r2
    38b4:	0b43      	lsrs	r3, r0, #13
    38b6:	428b      	cmp	r3, r1
    38b8:	d301      	bcc.n	38be <__aeabi_uidiv+0x5e>
    38ba:	034b      	lsls	r3, r1, #13
    38bc:	1ac0      	subs	r0, r0, r3
    38be:	4152      	adcs	r2, r2
    38c0:	0b03      	lsrs	r3, r0, #12
    38c2:	428b      	cmp	r3, r1
    38c4:	d301      	bcc.n	38ca <__aeabi_uidiv+0x6a>
    38c6:	030b      	lsls	r3, r1, #12
    38c8:	1ac0      	subs	r0, r0, r3
    38ca:	4152      	adcs	r2, r2
    38cc:	0ac3      	lsrs	r3, r0, #11
    38ce:	428b      	cmp	r3, r1
    38d0:	d301      	bcc.n	38d6 <__aeabi_uidiv+0x76>
    38d2:	02cb      	lsls	r3, r1, #11
    38d4:	1ac0      	subs	r0, r0, r3
    38d6:	4152      	adcs	r2, r2
    38d8:	0a83      	lsrs	r3, r0, #10
    38da:	428b      	cmp	r3, r1
    38dc:	d301      	bcc.n	38e2 <__aeabi_uidiv+0x82>
    38de:	028b      	lsls	r3, r1, #10
    38e0:	1ac0      	subs	r0, r0, r3
    38e2:	4152      	adcs	r2, r2
    38e4:	0a43      	lsrs	r3, r0, #9
    38e6:	428b      	cmp	r3, r1
    38e8:	d301      	bcc.n	38ee <__aeabi_uidiv+0x8e>
    38ea:	024b      	lsls	r3, r1, #9
    38ec:	1ac0      	subs	r0, r0, r3
    38ee:	4152      	adcs	r2, r2
    38f0:	0a03      	lsrs	r3, r0, #8
    38f2:	428b      	cmp	r3, r1
    38f4:	d301      	bcc.n	38fa <__aeabi_uidiv+0x9a>
    38f6:	020b      	lsls	r3, r1, #8
    38f8:	1ac0      	subs	r0, r0, r3
    38fa:	4152      	adcs	r2, r2
    38fc:	d2cd      	bcs.n	389a <__aeabi_uidiv+0x3a>
    38fe:	09c3      	lsrs	r3, r0, #7
    3900:	428b      	cmp	r3, r1
    3902:	d301      	bcc.n	3908 <__aeabi_uidiv+0xa8>
    3904:	01cb      	lsls	r3, r1, #7
    3906:	1ac0      	subs	r0, r0, r3
    3908:	4152      	adcs	r2, r2
    390a:	0983      	lsrs	r3, r0, #6
    390c:	428b      	cmp	r3, r1
    390e:	d301      	bcc.n	3914 <__aeabi_uidiv+0xb4>
    3910:	018b      	lsls	r3, r1, #6
    3912:	1ac0      	subs	r0, r0, r3
    3914:	4152      	adcs	r2, r2
    3916:	0943      	lsrs	r3, r0, #5
    3918:	428b      	cmp	r3, r1
    391a:	d301      	bcc.n	3920 <__aeabi_uidiv+0xc0>
    391c:	014b      	lsls	r3, r1, #5
    391e:	1ac0      	subs	r0, r0, r3
    3920:	4152      	adcs	r2, r2
    3922:	0903      	lsrs	r3, r0, #4
    3924:	428b      	cmp	r3, r1
    3926:	d301      	bcc.n	392c <__aeabi_uidiv+0xcc>
    3928:	010b      	lsls	r3, r1, #4
    392a:	1ac0      	subs	r0, r0, r3
    392c:	4152      	adcs	r2, r2
    392e:	08c3      	lsrs	r3, r0, #3
    3930:	428b      	cmp	r3, r1
    3932:	d301      	bcc.n	3938 <__aeabi_uidiv+0xd8>
    3934:	00cb      	lsls	r3, r1, #3
    3936:	1ac0      	subs	r0, r0, r3
    3938:	4152      	adcs	r2, r2
    393a:	0883      	lsrs	r3, r0, #2
    393c:	428b      	cmp	r3, r1
    393e:	d301      	bcc.n	3944 <__aeabi_uidiv+0xe4>
    3940:	008b      	lsls	r3, r1, #2
    3942:	1ac0      	subs	r0, r0, r3
    3944:	4152      	adcs	r2, r2
    3946:	0843      	lsrs	r3, r0, #1
    3948:	428b      	cmp	r3, r1
    394a:	d301      	bcc.n	3950 <__aeabi_uidiv+0xf0>
    394c:	004b      	lsls	r3, r1, #1
    394e:	1ac0      	subs	r0, r0, r3
    3950:	4152      	adcs	r2, r2
    3952:	1a41      	subs	r1, r0, r1
    3954:	d200      	bcs.n	3958 <__aeabi_uidiv+0xf8>
    3956:	4601      	mov	r1, r0
    3958:	4152      	adcs	r2, r2
    395a:	4610      	mov	r0, r2
    395c:	4770      	bx	lr
    395e:	e7ff      	b.n	3960 <__aeabi_uidiv+0x100>
    3960:	b501      	push	{r0, lr}
    3962:	2000      	movs	r0, #0
    3964:	f000 f8fc 	bl	3b60 <__aeabi_idiv0>
    3968:	bd02      	pop	{r1, pc}
    396a:	46c0      	nop			; (mov r8, r8)

0000396c <__aeabi_uidivmod>:
    396c:	2900      	cmp	r1, #0
    396e:	d0f7      	beq.n	3960 <__aeabi_uidiv+0x100>
    3970:	b503      	push	{r0, r1, lr}
    3972:	f7ff ff75 	bl	3860 <__aeabi_uidiv>
    3976:	bc0e      	pop	{r1, r2, r3}
    3978:	4342      	muls	r2, r0
    397a:	1a89      	subs	r1, r1, r2
    397c:	4718      	bx	r3
    397e:	46c0      	nop			; (mov r8, r8)

00003980 <__aeabi_idiv>:
    3980:	4603      	mov	r3, r0
    3982:	430b      	orrs	r3, r1
    3984:	d47f      	bmi.n	3a86 <__aeabi_idiv+0x106>
    3986:	2200      	movs	r2, #0
    3988:	0843      	lsrs	r3, r0, #1
    398a:	428b      	cmp	r3, r1
    398c:	d374      	bcc.n	3a78 <__aeabi_idiv+0xf8>
    398e:	0903      	lsrs	r3, r0, #4
    3990:	428b      	cmp	r3, r1
    3992:	d35f      	bcc.n	3a54 <__aeabi_idiv+0xd4>
    3994:	0a03      	lsrs	r3, r0, #8
    3996:	428b      	cmp	r3, r1
    3998:	d344      	bcc.n	3a24 <__aeabi_idiv+0xa4>
    399a:	0b03      	lsrs	r3, r0, #12
    399c:	428b      	cmp	r3, r1
    399e:	d328      	bcc.n	39f2 <__aeabi_idiv+0x72>
    39a0:	0c03      	lsrs	r3, r0, #16
    39a2:	428b      	cmp	r3, r1
    39a4:	d30d      	bcc.n	39c2 <__aeabi_idiv+0x42>
    39a6:	22ff      	movs	r2, #255	; 0xff
    39a8:	0209      	lsls	r1, r1, #8
    39aa:	ba12      	rev	r2, r2
    39ac:	0c03      	lsrs	r3, r0, #16
    39ae:	428b      	cmp	r3, r1
    39b0:	d302      	bcc.n	39b8 <__aeabi_idiv+0x38>
    39b2:	1212      	asrs	r2, r2, #8
    39b4:	0209      	lsls	r1, r1, #8
    39b6:	d065      	beq.n	3a84 <__aeabi_idiv+0x104>
    39b8:	0b03      	lsrs	r3, r0, #12
    39ba:	428b      	cmp	r3, r1
    39bc:	d319      	bcc.n	39f2 <__aeabi_idiv+0x72>
    39be:	e000      	b.n	39c2 <__aeabi_idiv+0x42>
    39c0:	0a09      	lsrs	r1, r1, #8
    39c2:	0bc3      	lsrs	r3, r0, #15
    39c4:	428b      	cmp	r3, r1
    39c6:	d301      	bcc.n	39cc <__aeabi_idiv+0x4c>
    39c8:	03cb      	lsls	r3, r1, #15
    39ca:	1ac0      	subs	r0, r0, r3
    39cc:	4152      	adcs	r2, r2
    39ce:	0b83      	lsrs	r3, r0, #14
    39d0:	428b      	cmp	r3, r1
    39d2:	d301      	bcc.n	39d8 <__aeabi_idiv+0x58>
    39d4:	038b      	lsls	r3, r1, #14
    39d6:	1ac0      	subs	r0, r0, r3
    39d8:	4152      	adcs	r2, r2
    39da:	0b43      	lsrs	r3, r0, #13
    39dc:	428b      	cmp	r3, r1
    39de:	d301      	bcc.n	39e4 <__aeabi_idiv+0x64>
    39e0:	034b      	lsls	r3, r1, #13
    39e2:	1ac0      	subs	r0, r0, r3
    39e4:	4152      	adcs	r2, r2
    39e6:	0b03      	lsrs	r3, r0, #12
    39e8:	428b      	cmp	r3, r1
    39ea:	d301      	bcc.n	39f0 <__aeabi_idiv+0x70>
    39ec:	030b      	lsls	r3, r1, #12
    39ee:	1ac0      	subs	r0, r0, r3
    39f0:	4152      	adcs	r2, r2
    39f2:	0ac3      	lsrs	r3, r0, #11
    39f4:	428b      	cmp	r3, r1
    39f6:	d301      	bcc.n	39fc <__aeabi_idiv+0x7c>
    39f8:	02cb      	lsls	r3, r1, #11
    39fa:	1ac0      	subs	r0, r0, r3
    39fc:	4152      	adcs	r2, r2
    39fe:	0a83      	lsrs	r3, r0, #10
    3a00:	428b      	cmp	r3, r1
    3a02:	d301      	bcc.n	3a08 <__aeabi_idiv+0x88>
    3a04:	028b      	lsls	r3, r1, #10
    3a06:	1ac0      	subs	r0, r0, r3
    3a08:	4152      	adcs	r2, r2
    3a0a:	0a43      	lsrs	r3, r0, #9
    3a0c:	428b      	cmp	r3, r1
    3a0e:	d301      	bcc.n	3a14 <__aeabi_idiv+0x94>
    3a10:	024b      	lsls	r3, r1, #9
    3a12:	1ac0      	subs	r0, r0, r3
    3a14:	4152      	adcs	r2, r2
    3a16:	0a03      	lsrs	r3, r0, #8
    3a18:	428b      	cmp	r3, r1
    3a1a:	d301      	bcc.n	3a20 <__aeabi_idiv+0xa0>
    3a1c:	020b      	lsls	r3, r1, #8
    3a1e:	1ac0      	subs	r0, r0, r3
    3a20:	4152      	adcs	r2, r2
    3a22:	d2cd      	bcs.n	39c0 <__aeabi_idiv+0x40>
    3a24:	09c3      	lsrs	r3, r0, #7
    3a26:	428b      	cmp	r3, r1
    3a28:	d301      	bcc.n	3a2e <__aeabi_idiv+0xae>
    3a2a:	01cb      	lsls	r3, r1, #7
    3a2c:	1ac0      	subs	r0, r0, r3
    3a2e:	4152      	adcs	r2, r2
    3a30:	0983      	lsrs	r3, r0, #6
    3a32:	428b      	cmp	r3, r1
    3a34:	d301      	bcc.n	3a3a <__aeabi_idiv+0xba>
    3a36:	018b      	lsls	r3, r1, #6
    3a38:	1ac0      	subs	r0, r0, r3
    3a3a:	4152      	adcs	r2, r2
    3a3c:	0943      	lsrs	r3, r0, #5
    3a3e:	428b      	cmp	r3, r1
    3a40:	d301      	bcc.n	3a46 <__aeabi_idiv+0xc6>
    3a42:	014b      	lsls	r3, r1, #5
    3a44:	1ac0      	subs	r0, r0, r3
    3a46:	4152      	adcs	r2, r2
    3a48:	0903      	lsrs	r3, r0, #4
    3a4a:	428b      	cmp	r3, r1
    3a4c:	d301      	bcc.n	3a52 <__aeabi_idiv+0xd2>
    3a4e:	010b      	lsls	r3, r1, #4
    3a50:	1ac0      	subs	r0, r0, r3
    3a52:	4152      	adcs	r2, r2
    3a54:	08c3      	lsrs	r3, r0, #3
    3a56:	428b      	cmp	r3, r1
    3a58:	d301      	bcc.n	3a5e <__aeabi_idiv+0xde>
    3a5a:	00cb      	lsls	r3, r1, #3
    3a5c:	1ac0      	subs	r0, r0, r3
    3a5e:	4152      	adcs	r2, r2
    3a60:	0883      	lsrs	r3, r0, #2
    3a62:	428b      	cmp	r3, r1
    3a64:	d301      	bcc.n	3a6a <__aeabi_idiv+0xea>
    3a66:	008b      	lsls	r3, r1, #2
    3a68:	1ac0      	subs	r0, r0, r3
    3a6a:	4152      	adcs	r2, r2
    3a6c:	0843      	lsrs	r3, r0, #1
    3a6e:	428b      	cmp	r3, r1
    3a70:	d301      	bcc.n	3a76 <__aeabi_idiv+0xf6>
    3a72:	004b      	lsls	r3, r1, #1
    3a74:	1ac0      	subs	r0, r0, r3
    3a76:	4152      	adcs	r2, r2
    3a78:	1a41      	subs	r1, r0, r1
    3a7a:	d200      	bcs.n	3a7e <__aeabi_idiv+0xfe>
    3a7c:	4601      	mov	r1, r0
    3a7e:	4152      	adcs	r2, r2
    3a80:	4610      	mov	r0, r2
    3a82:	4770      	bx	lr
    3a84:	e05d      	b.n	3b42 <__aeabi_idiv+0x1c2>
    3a86:	0fca      	lsrs	r2, r1, #31
    3a88:	d000      	beq.n	3a8c <__aeabi_idiv+0x10c>
    3a8a:	4249      	negs	r1, r1
    3a8c:	1003      	asrs	r3, r0, #32
    3a8e:	d300      	bcc.n	3a92 <__aeabi_idiv+0x112>
    3a90:	4240      	negs	r0, r0
    3a92:	4053      	eors	r3, r2
    3a94:	2200      	movs	r2, #0
    3a96:	469c      	mov	ip, r3
    3a98:	0903      	lsrs	r3, r0, #4
    3a9a:	428b      	cmp	r3, r1
    3a9c:	d32d      	bcc.n	3afa <__aeabi_idiv+0x17a>
    3a9e:	0a03      	lsrs	r3, r0, #8
    3aa0:	428b      	cmp	r3, r1
    3aa2:	d312      	bcc.n	3aca <__aeabi_idiv+0x14a>
    3aa4:	22fc      	movs	r2, #252	; 0xfc
    3aa6:	0189      	lsls	r1, r1, #6
    3aa8:	ba12      	rev	r2, r2
    3aaa:	0a03      	lsrs	r3, r0, #8
    3aac:	428b      	cmp	r3, r1
    3aae:	d30c      	bcc.n	3aca <__aeabi_idiv+0x14a>
    3ab0:	0189      	lsls	r1, r1, #6
    3ab2:	1192      	asrs	r2, r2, #6
    3ab4:	428b      	cmp	r3, r1
    3ab6:	d308      	bcc.n	3aca <__aeabi_idiv+0x14a>
    3ab8:	0189      	lsls	r1, r1, #6
    3aba:	1192      	asrs	r2, r2, #6
    3abc:	428b      	cmp	r3, r1
    3abe:	d304      	bcc.n	3aca <__aeabi_idiv+0x14a>
    3ac0:	0189      	lsls	r1, r1, #6
    3ac2:	d03a      	beq.n	3b3a <__aeabi_idiv+0x1ba>
    3ac4:	1192      	asrs	r2, r2, #6
    3ac6:	e000      	b.n	3aca <__aeabi_idiv+0x14a>
    3ac8:	0989      	lsrs	r1, r1, #6
    3aca:	09c3      	lsrs	r3, r0, #7
    3acc:	428b      	cmp	r3, r1
    3ace:	d301      	bcc.n	3ad4 <__aeabi_idiv+0x154>
    3ad0:	01cb      	lsls	r3, r1, #7
    3ad2:	1ac0      	subs	r0, r0, r3
    3ad4:	4152      	adcs	r2, r2
    3ad6:	0983      	lsrs	r3, r0, #6
    3ad8:	428b      	cmp	r3, r1
    3ada:	d301      	bcc.n	3ae0 <__aeabi_idiv+0x160>
    3adc:	018b      	lsls	r3, r1, #6
    3ade:	1ac0      	subs	r0, r0, r3
    3ae0:	4152      	adcs	r2, r2
    3ae2:	0943      	lsrs	r3, r0, #5
    3ae4:	428b      	cmp	r3, r1
    3ae6:	d301      	bcc.n	3aec <__aeabi_idiv+0x16c>
    3ae8:	014b      	lsls	r3, r1, #5
    3aea:	1ac0      	subs	r0, r0, r3
    3aec:	4152      	adcs	r2, r2
    3aee:	0903      	lsrs	r3, r0, #4
    3af0:	428b      	cmp	r3, r1
    3af2:	d301      	bcc.n	3af8 <__aeabi_idiv+0x178>
    3af4:	010b      	lsls	r3, r1, #4
    3af6:	1ac0      	subs	r0, r0, r3
    3af8:	4152      	adcs	r2, r2
    3afa:	08c3      	lsrs	r3, r0, #3
    3afc:	428b      	cmp	r3, r1
    3afe:	d301      	bcc.n	3b04 <__aeabi_idiv+0x184>
    3b00:	00cb      	lsls	r3, r1, #3
    3b02:	1ac0      	subs	r0, r0, r3
    3b04:	4152      	adcs	r2, r2
    3b06:	0883      	lsrs	r3, r0, #2
    3b08:	428b      	cmp	r3, r1
    3b0a:	d301      	bcc.n	3b10 <__aeabi_idiv+0x190>
    3b0c:	008b      	lsls	r3, r1, #2
    3b0e:	1ac0      	subs	r0, r0, r3
    3b10:	4152      	adcs	r2, r2
    3b12:	d2d9      	bcs.n	3ac8 <__aeabi_idiv+0x148>
    3b14:	0843      	lsrs	r3, r0, #1
    3b16:	428b      	cmp	r3, r1
    3b18:	d301      	bcc.n	3b1e <__aeabi_idiv+0x19e>
    3b1a:	004b      	lsls	r3, r1, #1
    3b1c:	1ac0      	subs	r0, r0, r3
    3b1e:	4152      	adcs	r2, r2
    3b20:	1a41      	subs	r1, r0, r1
    3b22:	d200      	bcs.n	3b26 <__aeabi_idiv+0x1a6>
    3b24:	4601      	mov	r1, r0
    3b26:	4663      	mov	r3, ip
    3b28:	4152      	adcs	r2, r2
    3b2a:	105b      	asrs	r3, r3, #1
    3b2c:	4610      	mov	r0, r2
    3b2e:	d301      	bcc.n	3b34 <__aeabi_idiv+0x1b4>
    3b30:	4240      	negs	r0, r0
    3b32:	2b00      	cmp	r3, #0
    3b34:	d500      	bpl.n	3b38 <__aeabi_idiv+0x1b8>
    3b36:	4249      	negs	r1, r1
    3b38:	4770      	bx	lr
    3b3a:	4663      	mov	r3, ip
    3b3c:	105b      	asrs	r3, r3, #1
    3b3e:	d300      	bcc.n	3b42 <__aeabi_idiv+0x1c2>
    3b40:	4240      	negs	r0, r0
    3b42:	b501      	push	{r0, lr}
    3b44:	2000      	movs	r0, #0
    3b46:	f000 f80b 	bl	3b60 <__aeabi_idiv0>
    3b4a:	bd02      	pop	{r1, pc}

00003b4c <__aeabi_idivmod>:
    3b4c:	2900      	cmp	r1, #0
    3b4e:	d0f8      	beq.n	3b42 <__aeabi_idiv+0x1c2>
    3b50:	b503      	push	{r0, r1, lr}
    3b52:	f7ff ff15 	bl	3980 <__aeabi_idiv>
    3b56:	bc0e      	pop	{r1, r2, r3}
    3b58:	4342      	muls	r2, r0
    3b5a:	1a89      	subs	r1, r1, r2
    3b5c:	4718      	bx	r3
    3b5e:	46c0      	nop			; (mov r8, r8)

00003b60 <__aeabi_idiv0>:
    3b60:	4770      	bx	lr
    3b62:	46c0      	nop			; (mov r8, r8)

00003b64 <__ctzsi2>:
    3b64:	4241      	negs	r1, r0
    3b66:	4008      	ands	r0, r1
    3b68:	211c      	movs	r1, #28
    3b6a:	2301      	movs	r3, #1
    3b6c:	041b      	lsls	r3, r3, #16
    3b6e:	4298      	cmp	r0, r3
    3b70:	d301      	bcc.n	3b76 <__ctzsi2+0x12>
    3b72:	0c00      	lsrs	r0, r0, #16
    3b74:	3910      	subs	r1, #16
    3b76:	0a1b      	lsrs	r3, r3, #8
    3b78:	4298      	cmp	r0, r3
    3b7a:	d301      	bcc.n	3b80 <__ctzsi2+0x1c>
    3b7c:	0a00      	lsrs	r0, r0, #8
    3b7e:	3908      	subs	r1, #8
    3b80:	091b      	lsrs	r3, r3, #4
    3b82:	4298      	cmp	r0, r3
    3b84:	d301      	bcc.n	3b8a <__ctzsi2+0x26>
    3b86:	0900      	lsrs	r0, r0, #4
    3b88:	3904      	subs	r1, #4
    3b8a:	a202      	add	r2, pc, #8	; (adr r2, 3b94 <__ctzsi2+0x30>)
    3b8c:	5c10      	ldrb	r0, [r2, r0]
    3b8e:	1a40      	subs	r0, r0, r1
    3b90:	4770      	bx	lr
    3b92:	46c0      	nop			; (mov r8, r8)
    3b94:	1d1d1c1b 	.word	0x1d1d1c1b
    3b98:	1e1e1e1e 	.word	0x1e1e1e1e
    3b9c:	1f1f1f1f 	.word	0x1f1f1f1f
    3ba0:	1f1f1f1f 	.word	0x1f1f1f1f

00003ba4 <__libc_init_array>:
    3ba4:	4b0e      	ldr	r3, [pc, #56]	; (3be0 <__libc_init_array+0x3c>)
    3ba6:	b570      	push	{r4, r5, r6, lr}
    3ba8:	2500      	movs	r5, #0
    3baa:	1c1e      	adds	r6, r3, #0
    3bac:	4c0d      	ldr	r4, [pc, #52]	; (3be4 <__libc_init_array+0x40>)
    3bae:	1ae4      	subs	r4, r4, r3
    3bb0:	10a4      	asrs	r4, r4, #2
    3bb2:	42a5      	cmp	r5, r4
    3bb4:	d004      	beq.n	3bc0 <__libc_init_array+0x1c>
    3bb6:	00ab      	lsls	r3, r5, #2
    3bb8:	58f3      	ldr	r3, [r6, r3]
    3bba:	4798      	blx	r3
    3bbc:	3501      	adds	r5, #1
    3bbe:	e7f8      	b.n	3bb2 <__libc_init_array+0xe>
    3bc0:	f000 f874 	bl	3cac <_init>
    3bc4:	4b08      	ldr	r3, [pc, #32]	; (3be8 <__libc_init_array+0x44>)
    3bc6:	2500      	movs	r5, #0
    3bc8:	1c1e      	adds	r6, r3, #0
    3bca:	4c08      	ldr	r4, [pc, #32]	; (3bec <__libc_init_array+0x48>)
    3bcc:	1ae4      	subs	r4, r4, r3
    3bce:	10a4      	asrs	r4, r4, #2
    3bd0:	42a5      	cmp	r5, r4
    3bd2:	d004      	beq.n	3bde <__libc_init_array+0x3a>
    3bd4:	00ab      	lsls	r3, r5, #2
    3bd6:	58f3      	ldr	r3, [r6, r3]
    3bd8:	4798      	blx	r3
    3bda:	3501      	adds	r5, #1
    3bdc:	e7f8      	b.n	3bd0 <__libc_init_array+0x2c>
    3bde:	bd70      	pop	{r4, r5, r6, pc}
    3be0:	00003cb8 	.word	0x00003cb8
    3be4:	00003cb8 	.word	0x00003cb8
    3be8:	00003cb8 	.word	0x00003cb8
    3bec:	00003cbc 	.word	0x00003cbc

00003bf0 <memcpy>:
    3bf0:	2300      	movs	r3, #0
    3bf2:	b510      	push	{r4, lr}
    3bf4:	4293      	cmp	r3, r2
    3bf6:	d003      	beq.n	3c00 <memcpy+0x10>
    3bf8:	5ccc      	ldrb	r4, [r1, r3]
    3bfa:	54c4      	strb	r4, [r0, r3]
    3bfc:	3301      	adds	r3, #1
    3bfe:	e7f9      	b.n	3bf4 <memcpy+0x4>
    3c00:	bd10      	pop	{r4, pc}

00003c02 <memset>:
    3c02:	1c03      	adds	r3, r0, #0
    3c04:	1882      	adds	r2, r0, r2
    3c06:	4293      	cmp	r3, r2
    3c08:	d002      	beq.n	3c10 <memset+0xe>
    3c0a:	7019      	strb	r1, [r3, #0]
    3c0c:	3301      	adds	r3, #1
    3c0e:	e7fa      	b.n	3c06 <memset+0x4>
    3c10:	4770      	bx	lr
    3c12:	0000      	movs	r0, r0
    3c14:	01010100 	.word	0x01010100
    3c18:	0000217a 	.word	0x0000217a
    3c1c:	00002188 	.word	0x00002188
    3c20:	00002226 	.word	0x00002226
    3c24:	0000228e 	.word	0x0000228e
    3c28:	000022f2 	.word	0x000022f2

00003c2c <_usb_device_irq_bits>:
    3c2c:	00080004 00800070 01000001 00000200     ....p...........

00003c3c <_usb_endpoint_irq_bits>:
    3c3c:	60100c03 00002e1e 00002e1a 00002e1a     ...`............
    3c4c:	00002e7c 00002e7c 00002e34 00002e24     |...|...4...$...
    3c5c:	00002e3a 00002e6a 00003040 00003020     :...j...@0.. 0..
    3c6c:	00003020 000030ba 00003032 0000304e      0...0..20..N0..
    3c7c:	00003024 0000305c 0000309e 000030f8     $0..\0...0...0..
    3c8c:	0000313a 0000313a 0000313a 000030ea     :1..:1..:1...0..
    3c9c:	00003106 000030dc 00003114 0000312a     .1...0...1..*1..

00003cac <_init>:
    3cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3cae:	46c0      	nop			; (mov r8, r8)
    3cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3cb2:	bc08      	pop	{r3}
    3cb4:	469e      	mov	lr, r3
    3cb6:	4770      	bx	lr

00003cb8 <__init_array_start>:
    3cb8:	000000dd 	.word	0x000000dd

00003cbc <_fini>:
    3cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3cbe:	46c0      	nop			; (mov r8, r8)
    3cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3cc2:	bc08      	pop	{r3}
    3cc4:	469e      	mov	lr, r3
    3cc6:	4770      	bx	lr

00003cc8 <__fini_array_start>:
    3cc8:	000000b5 	.word	0x000000b5
